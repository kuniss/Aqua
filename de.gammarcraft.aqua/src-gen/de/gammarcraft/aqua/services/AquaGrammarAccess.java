/*
* generated by Xtext
*/
package de.gammarcraft.aqua.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class AquaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AquaModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AquaModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cImportSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_1_0 = (RuleCall)cImportSectionAssignment_1.eContents().get(0);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesTypeParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		
		//AquaModel:
		//	PackageDeclaration importSection=XImportSection? types+=Type*;
		public ParserRule getRule() { return rule; }

		//PackageDeclaration importSection=XImportSection? types+=Type*
		public Group getGroup() { return cGroup; }

		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_1() { return cImportSectionAssignment_1; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_1_0() { return cImportSectionXImportSectionParserRuleCall_1_0; }

		//types+=Type*
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_2_0() { return cTypesTypeParserRuleCall_2_0; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitOrBoardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	UnitOrBoard | DataType;
		public ParserRule getRule() { return rule; }

		//UnitOrBoard | DataType
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnitOrBoard
		public RuleCall getUnitOrBoardParserRuleCall_0() { return cUnitOrBoardParserRuleCall_0; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
	}

	public class UnitOrBoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitOrBoard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnitOrBoard:
		//	Unit | Board;
		public ParserRule getRule() { return rule; }

		//Unit | Board
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unit
		public RuleCall getUnitParserRuleCall_0() { return cUnitParserRuleCall_0; }

		//Board
		public RuleCall getBoardParserRuleCall_1() { return cBoardParserRuleCall_1; }
	}

	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Board");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPortsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortsPortDeclarationParserRuleCall_2_0 = (RuleCall)cPortsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFlowsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFlowsFlowParserRuleCall_4_0 = (RuleCall)cFlowsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Board:
		//	"board" name=ID ports+=PortDeclaration+ "{" flows+=Flow* "}";
		public ParserRule getRule() { return rule; }

		//"board" name=ID ports+=PortDeclaration+ "{" flows+=Flow* "}"
		public Group getGroup() { return cGroup; }

		//"board"
		public Keyword getBoardKeyword_0() { return cBoardKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//ports+=PortDeclaration+
		public Assignment getPortsAssignment_2() { return cPortsAssignment_2; }

		//PortDeclaration
		public RuleCall getPortsPortDeclarationParserRuleCall_2_0() { return cPortsPortDeclarationParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//flows+=Flow*
		public Assignment getFlowsAssignment_4() { return cFlowsAssignment_4; }

		//Flow
		public RuleCall getFlowsFlowParserRuleCall_4_0() { return cFlowsFlowParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PortDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PortDeclaration:
		//	InputPort | OutputPort;
		public ParserRule getRule() { return rule; }

		//InputPort | OutputPort
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputPort
		public RuleCall getInputPortParserRuleCall_0() { return cInputPortParserRuleCall_0; }

		//OutputPort
		public RuleCall getOutputPortParserRuleCall_1() { return cOutputPortParserRuleCall_1; }
	}

	public class InputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//InputPort:
		//	"in" type=JvmTypeReference name=ID;
		public ParserRule getRule() { return rule; }

		//"in" type=JvmTypeReference name=ID
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class OutputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cErrorPortAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cErrorPortErrKeyword_0_0_0 = (Keyword)cErrorPortAssignment_0_0.eContents().get(0);
		private final Keyword cOutKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OutputPort:
		//	(errorPort?="err" | "out") type=JvmTypeReference name=ID;
		public ParserRule getRule() { return rule; }

		//(errorPort?="err" | "out") type=JvmTypeReference name=ID
		public Group getGroup() { return cGroup; }

		//errorPort?="err" | "out"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//errorPort?="err"
		public Assignment getErrorPortAssignment_0_0() { return cErrorPortAssignment_0_0; }

		//"err"
		public Keyword getErrorPortErrKeyword_0_0_0() { return cErrorPortErrKeyword_0_0_0; }

		//"out"
		public Keyword getOutKeyword_0_1() { return cOutKeyword_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromOutputPortReferenceParserRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToInputPortReferenceParserRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		//Flow:
		//	from=OutputPortReference "->" to=InputPortReference;
		public ParserRule getRule() { return rule; }

		//from=OutputPortReference "->" to=InputPortReference
		public Group getGroup() { return cGroup; }

		//from=OutputPortReference
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//OutputPortReference
		public RuleCall getFromOutputPortReferenceParserRuleCall_0_0() { return cFromOutputPortReferenceParserRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//to=InputPortReference
		public Assignment getToAssignment_2() { return cToAssignment_2; }

		//InputPortReference
		public RuleCall getToInputPortReferenceParserRuleCall_2_0() { return cToInputPortReferenceParserRuleCall_2_0; }
	}

	public class OutputPortReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputPortReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalInputPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegratedPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OutputPortReference:
		//	LocalInputPort | IntegratedPort;
		public ParserRule getRule() { return rule; }

		//LocalInputPort | IntegratedPort
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalInputPort
		public RuleCall getLocalInputPortParserRuleCall_0() { return cLocalInputPortParserRuleCall_0; }

		//IntegratedPort
		public RuleCall getIntegratedPortParserRuleCall_1() { return cIntegratedPortParserRuleCall_1; }
	}

	public class IntegratedPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegratedPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cUnitUnitOrBoardCrossReference_0_0 = (CrossReference)cUnitAssignment_0.eContents().get(0);
		private final RuleCall cUnitUnitOrBoardIDTerminalRuleCall_0_0_1 = (RuleCall)cUnitUnitOrBoardCrossReference_0_0.eContents().get(1);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortPortParserRuleCall_1_0 = (RuleCall)cPortAssignment_1.eContents().get(0);
		
		//IntegratedPort:
		//	unit=[UnitOrBoard] port=Port?;
		public ParserRule getRule() { return rule; }

		//unit=[UnitOrBoard] port=Port?
		public Group getGroup() { return cGroup; }

		//unit=[UnitOrBoard]
		public Assignment getUnitAssignment_0() { return cUnitAssignment_0; }

		//[UnitOrBoard]
		public CrossReference getUnitUnitOrBoardCrossReference_0_0() { return cUnitUnitOrBoardCrossReference_0_0; }

		//ID
		public RuleCall getUnitUnitOrBoardIDTerminalRuleCall_0_0_1() { return cUnitUnitOrBoardIDTerminalRuleCall_0_0_1; }

		//port=Port?
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }

		//Port
		public RuleCall getPortPortParserRuleCall_1_0() { return cPortPortParserRuleCall_1_0; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Port:
		//	"." name=ID;
		public ParserRule getRule() { return rule; }

		//"." name=ID
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class LocalInputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalInputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPortInputPortCrossReference_1_0 = (CrossReference)cPortAssignment_1.eContents().get(0);
		private final RuleCall cPortInputPortIDTerminalRuleCall_1_0_1 = (RuleCall)cPortInputPortCrossReference_1_0.eContents().get(1);
		
		//LocalInputPort:
		//	":" port=[InputPort];
		public ParserRule getRule() { return rule; }

		//":" port=[InputPort]
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//port=[InputPort]
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }

		//[InputPort]
		public CrossReference getPortInputPortCrossReference_1_0() { return cPortInputPortCrossReference_1_0; }

		//ID
		public RuleCall getPortInputPortIDTerminalRuleCall_1_0_1() { return cPortInputPortIDTerminalRuleCall_1_0_1; }
	}

	public class InputPortReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputPortReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalOutputPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegratedPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Assignment cClosureAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cClosureXClosureParserRuleCall_2_0 = (RuleCall)cClosureAssignment_2.eContents().get(0);
		
		//InputPortReference:
		//	LocalOutputPort | IntegratedPort | closure=XClosure;
		public ParserRule getRule() { return rule; }

		//LocalOutputPort | IntegratedPort | closure=XClosure
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalOutputPort
		public RuleCall getLocalOutputPortParserRuleCall_0() { return cLocalOutputPortParserRuleCall_0; }

		//IntegratedPort
		public RuleCall getIntegratedPortParserRuleCall_1() { return cIntegratedPortParserRuleCall_1; }

		//closure=XClosure
		public Assignment getClosureAssignment_2() { return cClosureAssignment_2; }

		//XClosure
		public RuleCall getClosureXClosureParserRuleCall_2_0() { return cClosureXClosureParserRuleCall_2_0; }
	}

	public class LocalOutputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalOutputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPortOutputPortCrossReference_1_0 = (CrossReference)cPortAssignment_1.eContents().get(0);
		private final RuleCall cPortOutputPortIDTerminalRuleCall_1_0_1 = (RuleCall)cPortOutputPortCrossReference_1_0.eContents().get(1);
		
		//LocalOutputPort:
		//	":" port=[OutputPort];
		public ParserRule getRule() { return rule; }

		//":" port=[OutputPort]
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//port=[OutputPort]
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }

		//[OutputPort]
		public CrossReference getPortOutputPortCrossReference_1_0() { return cPortOutputPortCrossReference_1_0; }

		//ID
		public RuleCall getPortOutputPortIDTerminalRuleCall_1_0_1() { return cPortOutputPortIDTerminalRuleCall_1_0_1; }
	}

	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPortsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortsPortDeclarationParserRuleCall_2_0 = (RuleCall)cPortsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Unit:
		//	"unit" name=ID ports+=PortDeclaration+ "{" declarations+=Declaration* "}";
		public ParserRule getRule() { return rule; }

		//"unit" name=ID ports+=PortDeclaration+ "{" declarations+=Declaration* "}"
		public Group getGroup() { return cGroup; }

		//"unit"
		public Keyword getUnitKeyword_0() { return cUnitKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//ports+=PortDeclaration+
		public Assignment getPortsAssignment_2() { return cPortsAssignment_2; }

		//PortDeclaration
		public RuleCall getPortsPortDeclarationParserRuleCall_2_0() { return cPortsPortDeclarationParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_0() { return cDeclarationsDeclarationParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstructorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputProcessingDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Declaration:
		//	Constructor | InputProcessingDeclaration | MethodDeclaration | VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//Constructor | InputProcessingDeclaration | MethodDeclaration | VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_0() { return cConstructorParserRuleCall_0; }

		//InputProcessingDeclaration
		public RuleCall getInputProcessingDeclarationParserRuleCall_1() { return cInputProcessingDeclarationParserRuleCall_1; }

		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_2() { return cMethodDeclarationParserRuleCall_2; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_3() { return cVariableDeclarationParserRuleCall_3; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//Constructor:
		//	"new" "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"new" "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_2_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_2_0_0; }

		//("," params+=FullJvmFormalParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_2_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_4_0() { return cBodyXBlockExpressionParserRuleCall_4_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Assignment cVarDeclAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarDeclXVariableDeclarationParserRuleCall_0 = (RuleCall)cVarDeclAssignment.eContents().get(0);
		
		//VariableDeclaration:
		//	varDecl=XVariableDeclaration;
		public ParserRule getRule() { return rule; }

		//varDecl=XVariableDeclaration
		public Assignment getVarDeclAssignment() { return cVarDeclAssignment; }

		//XVariableDeclaration
		public RuleCall getVarDeclXVariableDeclarationParserRuleCall_0() { return cVarDeclXVariableDeclarationParserRuleCall_0; }
	}

	public class InputProcessingDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputProcessingDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInputPortInputPortCrossReference_1_0 = (CrossReference)cInputPortAssignment_1.eContents().get(0);
		private final RuleCall cInputPortInputPortIDTerminalRuleCall_1_0_1 = (RuleCall)cInputPortInputPortCrossReference_1_0.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprXBlockExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutputPortAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutputPortLocalOutputPortParserRuleCall_3_1_0 = (RuleCall)cOutputPortAssignment_3_1.eContents().get(0);
		
		//InputProcessingDeclaration:
		//	"on" inputPort=[InputPort] expr=XBlockExpression ("->" outputPort=LocalOutputPort)?;
		public ParserRule getRule() { return rule; }

		//"on" inputPort=[InputPort] expr=XBlockExpression ("->" outputPort=LocalOutputPort)?
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//inputPort=[InputPort]
		public Assignment getInputPortAssignment_1() { return cInputPortAssignment_1; }

		//[InputPort]
		public CrossReference getInputPortInputPortCrossReference_1_0() { return cInputPortInputPortCrossReference_1_0; }

		//ID
		public RuleCall getInputPortInputPortIDTerminalRuleCall_1_0_1() { return cInputPortInputPortIDTerminalRuleCall_1_0_1; }

		//expr=XBlockExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//XBlockExpression
		public RuleCall getExprXBlockExpressionParserRuleCall_2_0() { return cExprXBlockExpressionParserRuleCall_2_0; }

		//("->" outputPort=LocalOutputPort)?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//outputPort=LocalOutputPort
		public Assignment getOutputPortAssignment_3_1() { return cOutputPortAssignment_3_1; }

		//LocalOutputPort
		public RuleCall getOutputPortLocalOutputPortParserRuleCall_3_1_0() { return cOutputPortLocalOutputPortParserRuleCall_3_1_0; }
	}

	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmArgumentTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//MethodDeclaration:
		//	"def" type=JvmArgumentTypeReference name=ID "(" (params+=FullJvmFormalParameter (","
		//	params+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"def" type=JvmArgumentTypeReference name=ID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		//")" body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//type=JvmArgumentTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeJvmArgumentTypeReferenceParserRuleCall_1_0() { return cTypeJvmArgumentTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_0_0; }

		//("," params+=FullJvmFormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}

	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAssignmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cOutputForwardingExpressionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cOutputPortAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cOutputPortLocalOutputPortParserRuleCall_1_0_2_0 = (RuleCall)cOutputPortAssignment_1_0_2.eContents().get(0);
		
		//// extension of the XBase' XExpression rule for output port forwarding
		//XExpression returns xbase::XExpression:
		//	XAssignment => ({OutputForwarding.expression=current} "->" outputPort=LocalOutputPort)?;
		public ParserRule getRule() { return rule; }

		//XAssignment => ({OutputForwarding.expression=current} "->" outputPort=LocalOutputPort)?
		public Group getGroup() { return cGroup; }

		//XAssignment
		public RuleCall getXAssignmentParserRuleCall_0() { return cXAssignmentParserRuleCall_0; }

		//=> ({OutputForwarding.expression=current} "->" outputPort=LocalOutputPort)?
		public Group getGroup_1() { return cGroup_1; }

		//{OutputForwarding.expression=current} "->" outputPort=LocalOutputPort
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{OutputForwarding.expression=current}
		public Action getOutputForwardingExpressionAction_1_0_0() { return cOutputForwardingExpressionAction_1_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_1; }

		//outputPort=LocalOutputPort
		public Assignment getOutputPortAssignment_1_0_2() { return cOutputPortAssignment_1_0_2; }

		//LocalOutputPort
		public RuleCall getOutputPortLocalOutputPortParserRuleCall_1_0_2_0() { return cOutputPortLocalOutputPortParserRuleCall_1_0_2_0; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopFullStopLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cAlternatives_4_1.eContents().get(0);
		private final Group cGroup_4_1_0_0 = (Group)cGroup_4_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_1_0_0_0 = (Keyword)cGroup_4_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_1_0_0_1 = (Keyword)cGroup_4_1_0_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final Group cGroup_5_1_0_0 = (Group)cGroup_5_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5_1_0_0_0 = (Keyword)cGroup_5_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5_1_0_0_1 = (Keyword)cGroup_5_1_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_5_1_1 = (Keyword)cAlternatives_5_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5_1_2 = (Keyword)cAlternatives_5_1.eContents().get(2);
		private final Keyword cLessThanSignGreaterThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cQuestionMarkColonKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//// operation "->" removed from XBase' OpOther rule to get "->" available for output port forwarding
		//OpOther:
		//	"..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
		public ParserRule getRule() { return rule; }

		//"..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"..<"
		public Keyword getFullStopFullStopLessThanSignKeyword_0() { return cFullStopFullStopLessThanSignKeyword_0; }

		//">" ".."
		public Group getGroup_1() { return cGroup_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//">" (=> (">" ">") | ">")
		public Group getGroup_4() { return cGroup_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_0() { return cGreaterThanSignKeyword_4_0; }

		//=> (">" ">") | ">"
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//=> (">" ">")
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }

		//">" ">"
		public Group getGroup_4_1_0_0() { return cGroup_4_1_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_1_0_0_0() { return cGreaterThanSignKeyword_4_1_0_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_1_0_0_1() { return cGreaterThanSignKeyword_4_1_0_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_1_1() { return cGreaterThanSignKeyword_4_1_1; }

		//"<" (=> ("<" "<") | "<" | "=>")
		public Group getGroup_5() { return cGroup_5; }

		//"<"
		public Keyword getLessThanSignKeyword_5_0() { return cLessThanSignKeyword_5_0; }

		//=> ("<" "<") | "<" | "=>"
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//=> ("<" "<")
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//"<" "<"
		public Group getGroup_5_1_0_0() { return cGroup_5_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_5_1_0_0_0() { return cLessThanSignKeyword_5_1_0_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_5_1_0_0_1() { return cLessThanSignKeyword_5_1_0_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_5_1_1() { return cLessThanSignKeyword_5_1_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_5_1_2() { return cEqualsSignGreaterThanSignKeyword_5_1_2; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_6() { return cLessThanSignGreaterThanSignKeyword_6; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_7() { return cQuestionMarkColonKeyword_7; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_1_0 = (RuleCall)cTypeParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0 = (RuleCall)cTypeParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendsJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cExtendsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImplementsJvmParameterizedTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cImplementsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImplementsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImplementsJvmParameterizedTypeReferenceParserRuleCall_4_2_1_0 = (RuleCall)cImplementsAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DataType:
		//	"data" name=ID ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("extends"
		//	extends=JvmParameterizedTypeReference)? ("implements" implements+=JvmParameterizedTypeReference (","
		//	implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//"data" name=ID ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("extends"
		//extends=JvmParameterizedTypeReference)? ("implements" implements+=JvmParameterizedTypeReference (","
		//implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_1() { return cTypeParametersAssignment_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_2_1() { return cTypeParametersAssignment_2_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//("extends" extends=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extends=JvmParameterizedTypeReference
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExtendsJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cExtendsJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//("implements" implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//implements+=JvmParameterizedTypeReference
		public Assignment getImplementsAssignment_4_1() { return cImplementsAssignment_4_1; }

		//JvmParameterizedTypeReference
		public RuleCall getImplementsJvmParameterizedTypeReferenceParserRuleCall_4_1_0() { return cImplementsJvmParameterizedTypeReferenceParserRuleCall_4_1_0; }

		//("," implements+=JvmParameterizedTypeReference)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//implements+=JvmParameterizedTypeReference
		public Assignment getImplementsAssignment_4_2_1() { return cImplementsAssignment_4_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getImplementsJvmParameterizedTypeReferenceParserRuleCall_4_2_1_0() { return cImplementsJvmParameterizedTypeReferenceParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=Member*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_6_0() { return cMembersMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	PropertyDeclaration | MethodDeclaration;
		public ParserRule getRule() { return rule; }

		//PropertyDeclaration | MethodDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_0() { return cPropertyDeclarationParserRuleCall_0; }

		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_1() { return cMethodDeclarationParserRuleCall_1; }
	}

	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_2_1_0 = (RuleCall)cInitialValueAssignment_2_1.eContents().get(0);
		
		//PropertyDeclaration:
		//	type=JvmTypeReference name=ID ("=" initialValue=XExpression)?;
		public ParserRule getRule() { return rule; }

		//type=JvmTypeReference name=ID ("=" initialValue=XExpression)?
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" initialValue=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_2_1() { return cInitialValueAssignment_2_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_2_1_0() { return cInitialValueXExpressionParserRuleCall_2_1_0; }
	}
	
	
	private final AquaModelElements pAquaModel;
	private final PackageDeclarationElements pPackageDeclaration;
	private final TypeElements pType;
	private final UnitOrBoardElements pUnitOrBoard;
	private final BoardElements pBoard;
	private final PortDeclarationElements pPortDeclaration;
	private final InputPortElements pInputPort;
	private final OutputPortElements pOutputPort;
	private final FlowElements pFlow;
	private final OutputPortReferenceElements pOutputPortReference;
	private final IntegratedPortElements pIntegratedPort;
	private final PortElements pPort;
	private final LocalInputPortElements pLocalInputPort;
	private final InputPortReferenceElements pInputPortReference;
	private final LocalOutputPortElements pLocalOutputPort;
	private final UnitElements pUnit;
	private final DeclarationElements pDeclaration;
	private final ConstructorElements pConstructor;
	private final VariableDeclarationElements pVariableDeclaration;
	private final InputProcessingDeclarationElements pInputProcessingDeclaration;
	private final MethodDeclarationElements pMethodDeclaration;
	private final XExpressionElements pXExpression;
	private final OpOtherElements pOpOther;
	private final DataTypeElements pDataType;
	private final MemberElements pMember;
	private final PropertyDeclarationElements pPropertyDeclaration;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public AquaGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pAquaModel = new AquaModelElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pType = new TypeElements();
		this.pUnitOrBoard = new UnitOrBoardElements();
		this.pBoard = new BoardElements();
		this.pPortDeclaration = new PortDeclarationElements();
		this.pInputPort = new InputPortElements();
		this.pOutputPort = new OutputPortElements();
		this.pFlow = new FlowElements();
		this.pOutputPortReference = new OutputPortReferenceElements();
		this.pIntegratedPort = new IntegratedPortElements();
		this.pPort = new PortElements();
		this.pLocalInputPort = new LocalInputPortElements();
		this.pInputPortReference = new InputPortReferenceElements();
		this.pLocalOutputPort = new LocalOutputPortElements();
		this.pUnit = new UnitElements();
		this.pDeclaration = new DeclarationElements();
		this.pConstructor = new ConstructorElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pInputProcessingDeclaration = new InputProcessingDeclarationElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pXExpression = new XExpressionElements();
		this.pOpOther = new OpOtherElements();
		this.pDataType = new DataTypeElements();
		this.pMember = new MemberElements();
		this.pPropertyDeclaration = new PropertyDeclarationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.gammarcraft.aqua.Aqua".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//AquaModel:
	//	PackageDeclaration importSection=XImportSection? types+=Type*;
	public AquaModelElements getAquaModelAccess() {
		return pAquaModel;
	}
	
	public ParserRule getAquaModelRule() {
		return getAquaModelAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//Type:
	//	UnitOrBoard | DataType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//UnitOrBoard:
	//	Unit | Board;
	public UnitOrBoardElements getUnitOrBoardAccess() {
		return pUnitOrBoard;
	}
	
	public ParserRule getUnitOrBoardRule() {
		return getUnitOrBoardAccess().getRule();
	}

	//Board:
	//	"board" name=ID ports+=PortDeclaration+ "{" flows+=Flow* "}";
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}

	//PortDeclaration:
	//	InputPort | OutputPort;
	public PortDeclarationElements getPortDeclarationAccess() {
		return pPortDeclaration;
	}
	
	public ParserRule getPortDeclarationRule() {
		return getPortDeclarationAccess().getRule();
	}

	//InputPort:
	//	"in" type=JvmTypeReference name=ID;
	public InputPortElements getInputPortAccess() {
		return pInputPort;
	}
	
	public ParserRule getInputPortRule() {
		return getInputPortAccess().getRule();
	}

	//OutputPort:
	//	(errorPort?="err" | "out") type=JvmTypeReference name=ID;
	public OutputPortElements getOutputPortAccess() {
		return pOutputPort;
	}
	
	public ParserRule getOutputPortRule() {
		return getOutputPortAccess().getRule();
	}

	//Flow:
	//	from=OutputPortReference "->" to=InputPortReference;
	public FlowElements getFlowAccess() {
		return pFlow;
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}

	//OutputPortReference:
	//	LocalInputPort | IntegratedPort;
	public OutputPortReferenceElements getOutputPortReferenceAccess() {
		return pOutputPortReference;
	}
	
	public ParserRule getOutputPortReferenceRule() {
		return getOutputPortReferenceAccess().getRule();
	}

	//IntegratedPort:
	//	unit=[UnitOrBoard] port=Port?;
	public IntegratedPortElements getIntegratedPortAccess() {
		return pIntegratedPort;
	}
	
	public ParserRule getIntegratedPortRule() {
		return getIntegratedPortAccess().getRule();
	}

	//Port:
	//	"." name=ID;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//LocalInputPort:
	//	":" port=[InputPort];
	public LocalInputPortElements getLocalInputPortAccess() {
		return pLocalInputPort;
	}
	
	public ParserRule getLocalInputPortRule() {
		return getLocalInputPortAccess().getRule();
	}

	//InputPortReference:
	//	LocalOutputPort | IntegratedPort | closure=XClosure;
	public InputPortReferenceElements getInputPortReferenceAccess() {
		return pInputPortReference;
	}
	
	public ParserRule getInputPortReferenceRule() {
		return getInputPortReferenceAccess().getRule();
	}

	//LocalOutputPort:
	//	":" port=[OutputPort];
	public LocalOutputPortElements getLocalOutputPortAccess() {
		return pLocalOutputPort;
	}
	
	public ParserRule getLocalOutputPortRule() {
		return getLocalOutputPortAccess().getRule();
	}

	//Unit:
	//	"unit" name=ID ports+=PortDeclaration+ "{" declarations+=Declaration* "}";
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//Declaration:
	//	Constructor | InputProcessingDeclaration | MethodDeclaration | VariableDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Constructor:
	//	"new" "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//VariableDeclaration:
	//	varDecl=XVariableDeclaration;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//InputProcessingDeclaration:
	//	"on" inputPort=[InputPort] expr=XBlockExpression ("->" outputPort=LocalOutputPort)?;
	public InputProcessingDeclarationElements getInputProcessingDeclarationAccess() {
		return pInputProcessingDeclaration;
	}
	
	public ParserRule getInputProcessingDeclarationRule() {
		return getInputProcessingDeclarationAccess().getRule();
	}

	//MethodDeclaration:
	//	"def" type=JvmArgumentTypeReference name=ID "(" (params+=FullJvmFormalParameter (","
	//	params+=FullJvmFormalParameter)*)? ")" body=XBlockExpression;
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}

	//// extension of the XBase' XExpression rule for output port forwarding
	//XExpression returns xbase::XExpression:
	//	XAssignment => ({OutputForwarding.expression=current} "->" outputPort=LocalOutputPort)?;
	public XExpressionElements getXExpressionAccess() {
		return pXExpression;
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//// operation "->" removed from XBase' OpOther rule to get "->" available for output port forwarding
	//OpOther:
	//	"..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public OpOtherElements getOpOtherAccess() {
		return pOpOther;
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//DataType:
	//	"data" name=ID ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? ("extends"
	//	extends=JvmParameterizedTypeReference)? ("implements" implements+=JvmParameterizedTypeReference (","
	//	implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}";
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//Member:
	//	PropertyDeclaration | MethodDeclaration;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//PropertyDeclaration:
	//	type=JvmTypeReference name=ID ("=" initialValue=XExpression)?;
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return pPropertyDeclaration;
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
