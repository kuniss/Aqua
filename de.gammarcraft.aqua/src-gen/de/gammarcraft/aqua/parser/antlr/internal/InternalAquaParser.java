package de.gammarcraft.aqua.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.gammarcraft.aqua.services.AquaGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalAquaParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "RULE_ID", "RULE_STRING", "RULE_HEX", "RULE_INT", "RULE_DECIMAL", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER", "'package'", "'board'", "'{'", "'}'", "'in'", "'err'", "'out'", "'->'", "'.'", "':'", "'unit'", "'new'", "'('", "','", "')'", "'on'", "'def'", "'..<'", "'>'", "'..'", "'=>'", "'<'", "'<>'", "'?:'", "'data'", "'extends'", "'implements'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'>='", "'||'", "'&&'", "'=='", "'!='", "'==='", "'!=='", "'instanceof'", "'+'", "'-'", "'*'", "'**'", "'/'", "'%'", "'!'", "'as'", "'++'", "'--'", "'::'", "'?.'", "'#'", "'['", "']'", "'|'", "';'", "'if'", "'else'", "'switch'", "'default'", "'case'", "'for'", "'while'", "'do'", "'var'", "'val'", "'static'", "'import'", "'extension'", "'super'", "'false'", "'true'", "'null'", "'typeof'", "'throw'", "'return'", "'try'", "'finally'", "'synchronized'", "'catch'", "'?'", "'&'"
    };
    public static final int RULE_ID=4;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int RULE_ANY_OTHER=12;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int EOF=-1;
    public static final int T__93=93;
    public static final int T__19=19;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int RULE_HEX=6;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__90=90;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int RULE_DECIMAL=8;
    public static final int T__96=96;
    public static final int T__95=95;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__89=89;
    public static final int T__88=88;
    public static final int RULE_ML_COMMENT=9;
    public static final int RULE_STRING=5;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__73=73;
    public static final int T__79=79;
    public static final int T__78=78;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__59=59;
    public static final int RULE_INT=7;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int RULE_SL_COMMENT=10;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__33=33;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int RULE_WS=11;

    // delegates
    // delegators


        public InternalAquaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalAquaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalAquaParser.tokenNames; }
    public String getGrammarFileName() { return "../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g"; }



     	private AquaGrammarAccess grammarAccess;
     	
        public InternalAquaParser(TokenStream input, AquaGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }
        
        @Override
        protected String getFirstRuleName() {
        	return "AquaModel";	
       	}
       	
       	@Override
       	protected AquaGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}



    // $ANTLR start "entryRuleAquaModel"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:67:1: entryRuleAquaModel returns [EObject current=null] : iv_ruleAquaModel= ruleAquaModel EOF ;
    public final EObject entryRuleAquaModel() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAquaModel = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:68:2: (iv_ruleAquaModel= ruleAquaModel EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:69:2: iv_ruleAquaModel= ruleAquaModel EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAquaModelRule()); 
            }
            pushFollow(FOLLOW_ruleAquaModel_in_entryRuleAquaModel75);
            iv_ruleAquaModel=ruleAquaModel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAquaModel; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAquaModel85); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAquaModel"


    // $ANTLR start "ruleAquaModel"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:76:1: ruleAquaModel returns [EObject current=null] : (this_PackageDeclaration_0= rulePackageDeclaration ( (lv_importSection_1_0= ruleXImportSection ) )? ( (lv_types_2_0= ruleType ) )* ) ;
    public final EObject ruleAquaModel() throws RecognitionException {
        EObject current = null;

        EObject this_PackageDeclaration_0 = null;

        EObject lv_importSection_1_0 = null;

        EObject lv_types_2_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:79:28: ( (this_PackageDeclaration_0= rulePackageDeclaration ( (lv_importSection_1_0= ruleXImportSection ) )? ( (lv_types_2_0= ruleType ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:80:1: (this_PackageDeclaration_0= rulePackageDeclaration ( (lv_importSection_1_0= ruleXImportSection ) )? ( (lv_types_2_0= ruleType ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:80:1: (this_PackageDeclaration_0= rulePackageDeclaration ( (lv_importSection_1_0= ruleXImportSection ) )? ( (lv_types_2_0= ruleType ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:81:5: this_PackageDeclaration_0= rulePackageDeclaration ( (lv_importSection_1_0= ruleXImportSection ) )? ( (lv_types_2_0= ruleType ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getAquaModelAccess().getPackageDeclarationParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_rulePackageDeclaration_in_ruleAquaModel132);
            this_PackageDeclaration_0=rulePackageDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_PackageDeclaration_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:89:1: ( (lv_importSection_1_0= ruleXImportSection ) )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==82) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:90:1: (lv_importSection_1_0= ruleXImportSection )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:90:1: (lv_importSection_1_0= ruleXImportSection )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:91:3: lv_importSection_1_0= ruleXImportSection
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getAquaModelAccess().getImportSectionXImportSectionParserRuleCall_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXImportSection_in_ruleAquaModel152);
                    lv_importSection_1_0=ruleXImportSection();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getAquaModelRule());
                      	        }
                             		set(
                             			current, 
                             			"importSection",
                              		lv_importSection_1_0, 
                              		"XImportSection");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:107:3: ( (lv_types_2_0= ruleType ) )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==14||LA2_0==23||LA2_0==37) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:108:1: (lv_types_2_0= ruleType )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:108:1: (lv_types_2_0= ruleType )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:109:3: lv_types_2_0= ruleType
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getAquaModelAccess().getTypesTypeParserRuleCall_2_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleType_in_ruleAquaModel174);
            	    lv_types_2_0=ruleType();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getAquaModelRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"types",
            	              		lv_types_2_0, 
            	              		"Type");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAquaModel"


    // $ANTLR start "entryRulePackageDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:133:1: entryRulePackageDeclaration returns [EObject current=null] : iv_rulePackageDeclaration= rulePackageDeclaration EOF ;
    public final EObject entryRulePackageDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePackageDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:134:2: (iv_rulePackageDeclaration= rulePackageDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:135:2: iv_rulePackageDeclaration= rulePackageDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPackageDeclarationRule()); 
            }
            pushFollow(FOLLOW_rulePackageDeclaration_in_entryRulePackageDeclaration211);
            iv_rulePackageDeclaration=rulePackageDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePackageDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePackageDeclaration221); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePackageDeclaration"


    // $ANTLR start "rulePackageDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:142:1: rulePackageDeclaration returns [EObject current=null] : (otherlv_0= 'package' ( (lv_name_1_0= ruleQualifiedName ) ) ) ;
    public final EObject rulePackageDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:145:28: ( (otherlv_0= 'package' ( (lv_name_1_0= ruleQualifiedName ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:146:1: (otherlv_0= 'package' ( (lv_name_1_0= ruleQualifiedName ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:146:1: (otherlv_0= 'package' ( (lv_name_1_0= ruleQualifiedName ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:146:3: otherlv_0= 'package' ( (lv_name_1_0= ruleQualifiedName ) )
            {
            otherlv_0=(Token)match(input,13,FOLLOW_13_in_rulePackageDeclaration258); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:150:1: ( (lv_name_1_0= ruleQualifiedName ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:151:1: (lv_name_1_0= ruleQualifiedName )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:151:1: (lv_name_1_0= ruleQualifiedName )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:152:3: lv_name_1_0= ruleQualifiedName
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleQualifiedName_in_rulePackageDeclaration279);
            lv_name_1_0=ruleQualifiedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
              	        }
                     		set(
                     			current, 
                     			"name",
                      		lv_name_1_0, 
                      		"QualifiedName");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePackageDeclaration"


    // $ANTLR start "entryRuleType"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:176:1: entryRuleType returns [EObject current=null] : iv_ruleType= ruleType EOF ;
    public final EObject entryRuleType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleType = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:177:2: (iv_ruleType= ruleType EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:178:2: iv_ruleType= ruleType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRule()); 
            }
            pushFollow(FOLLOW_ruleType_in_entryRuleType315);
            iv_ruleType=ruleType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleType; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleType325); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleType"


    // $ANTLR start "ruleType"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:185:1: ruleType returns [EObject current=null] : (this_UnitOrBoard_0= ruleUnitOrBoard | this_DataType_1= ruleDataType ) ;
    public final EObject ruleType() throws RecognitionException {
        EObject current = null;

        EObject this_UnitOrBoard_0 = null;

        EObject this_DataType_1 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:188:28: ( (this_UnitOrBoard_0= ruleUnitOrBoard | this_DataType_1= ruleDataType ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:189:1: (this_UnitOrBoard_0= ruleUnitOrBoard | this_DataType_1= ruleDataType )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:189:1: (this_UnitOrBoard_0= ruleUnitOrBoard | this_DataType_1= ruleDataType )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==14||LA3_0==23) ) {
                alt3=1;
            }
            else if ( (LA3_0==37) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:190:5: this_UnitOrBoard_0= ruleUnitOrBoard
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getTypeAccess().getUnitOrBoardParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleUnitOrBoard_in_ruleType372);
                    this_UnitOrBoard_0=ruleUnitOrBoard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_UnitOrBoard_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:200:5: this_DataType_1= ruleDataType
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleDataType_in_ruleType399);
                    this_DataType_1=ruleDataType();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_DataType_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleType"


    // $ANTLR start "entryRuleUnitOrBoard"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:216:1: entryRuleUnitOrBoard returns [EObject current=null] : iv_ruleUnitOrBoard= ruleUnitOrBoard EOF ;
    public final EObject entryRuleUnitOrBoard() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnitOrBoard = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:217:2: (iv_ruleUnitOrBoard= ruleUnitOrBoard EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:218:2: iv_ruleUnitOrBoard= ruleUnitOrBoard EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnitOrBoardRule()); 
            }
            pushFollow(FOLLOW_ruleUnitOrBoard_in_entryRuleUnitOrBoard434);
            iv_ruleUnitOrBoard=ruleUnitOrBoard();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnitOrBoard; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleUnitOrBoard444); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnitOrBoard"


    // $ANTLR start "ruleUnitOrBoard"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:225:1: ruleUnitOrBoard returns [EObject current=null] : (this_Unit_0= ruleUnit | this_Board_1= ruleBoard ) ;
    public final EObject ruleUnitOrBoard() throws RecognitionException {
        EObject current = null;

        EObject this_Unit_0 = null;

        EObject this_Board_1 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:228:28: ( (this_Unit_0= ruleUnit | this_Board_1= ruleBoard ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:229:1: (this_Unit_0= ruleUnit | this_Board_1= ruleBoard )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:229:1: (this_Unit_0= ruleUnit | this_Board_1= ruleBoard )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==23) ) {
                alt4=1;
            }
            else if ( (LA4_0==14) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:230:5: this_Unit_0= ruleUnit
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getUnitOrBoardAccess().getUnitParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleUnit_in_ruleUnitOrBoard491);
                    this_Unit_0=ruleUnit();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_Unit_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:240:5: this_Board_1= ruleBoard
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getUnitOrBoardAccess().getBoardParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleBoard_in_ruleUnitOrBoard518);
                    this_Board_1=ruleBoard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_Board_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnitOrBoard"


    // $ANTLR start "entryRuleBoard"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:256:1: entryRuleBoard returns [EObject current=null] : iv_ruleBoard= ruleBoard EOF ;
    public final EObject entryRuleBoard() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBoard = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:257:2: (iv_ruleBoard= ruleBoard EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:258:2: iv_ruleBoard= ruleBoard EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBoardRule()); 
            }
            pushFollow(FOLLOW_ruleBoard_in_entryRuleBoard553);
            iv_ruleBoard=ruleBoard();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBoard; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleBoard563); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBoard"


    // $ANTLR start "ruleBoard"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:265:1: ruleBoard returns [EObject current=null] : (otherlv_0= 'board' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_flows_4_0= ruleFlow ) )* otherlv_5= '}' ) ;
    public final EObject ruleBoard() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_ports_2_0 = null;

        EObject lv_flows_4_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:268:28: ( (otherlv_0= 'board' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_flows_4_0= ruleFlow ) )* otherlv_5= '}' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:269:1: (otherlv_0= 'board' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_flows_4_0= ruleFlow ) )* otherlv_5= '}' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:269:1: (otherlv_0= 'board' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_flows_4_0= ruleFlow ) )* otherlv_5= '}' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:269:3: otherlv_0= 'board' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_flows_4_0= ruleFlow ) )* otherlv_5= '}'
            {
            otherlv_0=(Token)match(input,14,FOLLOW_14_in_ruleBoard600); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getBoardAccess().getBoardKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:273:1: ( (lv_name_1_0= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:274:1: (lv_name_1_0= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:274:1: (lv_name_1_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:275:3: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleBoard617); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(lv_name_1_0, grammarAccess.getBoardAccess().getNameIDTerminalRuleCall_1_0()); 
              		
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getBoardRule());
              	        }
                     		setWithLastConsumed(
                     			current, 
                     			"name",
                      		lv_name_1_0, 
                      		"ID");
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:291:2: ( (lv_ports_2_0= rulePortDeclaration ) )+
            int cnt5=0;
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( ((LA5_0>=17 && LA5_0<=19)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:292:1: (lv_ports_2_0= rulePortDeclaration )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:292:1: (lv_ports_2_0= rulePortDeclaration )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:293:3: lv_ports_2_0= rulePortDeclaration
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getBoardAccess().getPortsPortDeclarationParserRuleCall_2_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulePortDeclaration_in_ruleBoard643);
            	    lv_ports_2_0=rulePortDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getBoardRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"ports",
            	              		lv_ports_2_0, 
            	              		"PortDeclaration");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);

            otherlv_3=(Token)match(input,15,FOLLOW_15_in_ruleBoard656); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_3, grammarAccess.getBoardAccess().getLeftCurlyBracketKeyword_3());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:313:1: ( (lv_flows_4_0= ruleFlow ) )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==RULE_ID||LA6_0==22) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:314:1: (lv_flows_4_0= ruleFlow )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:314:1: (lv_flows_4_0= ruleFlow )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:315:3: lv_flows_4_0= ruleFlow
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getBoardAccess().getFlowsFlowParserRuleCall_4_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleFlow_in_ruleBoard677);
            	    lv_flows_4_0=ruleFlow();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getBoardRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"flows",
            	              		lv_flows_4_0, 
            	              		"Flow");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            otherlv_5=(Token)match(input,16,FOLLOW_16_in_ruleBoard690); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_5, grammarAccess.getBoardAccess().getRightCurlyBracketKeyword_5());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBoard"


    // $ANTLR start "entryRulePortDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:343:1: entryRulePortDeclaration returns [EObject current=null] : iv_rulePortDeclaration= rulePortDeclaration EOF ;
    public final EObject entryRulePortDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePortDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:344:2: (iv_rulePortDeclaration= rulePortDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:345:2: iv_rulePortDeclaration= rulePortDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPortDeclarationRule()); 
            }
            pushFollow(FOLLOW_rulePortDeclaration_in_entryRulePortDeclaration726);
            iv_rulePortDeclaration=rulePortDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePortDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePortDeclaration736); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePortDeclaration"


    // $ANTLR start "rulePortDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:352:1: rulePortDeclaration returns [EObject current=null] : (this_InputPort_0= ruleInputPort | this_OutputPort_1= ruleOutputPort ) ;
    public final EObject rulePortDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_InputPort_0 = null;

        EObject this_OutputPort_1 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:355:28: ( (this_InputPort_0= ruleInputPort | this_OutputPort_1= ruleOutputPort ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:356:1: (this_InputPort_0= ruleInputPort | this_OutputPort_1= ruleOutputPort )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:356:1: (this_InputPort_0= ruleInputPort | this_OutputPort_1= ruleOutputPort )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==17) ) {
                alt7=1;
            }
            else if ( ((LA7_0>=18 && LA7_0<=19)) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:357:5: this_InputPort_0= ruleInputPort
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getPortDeclarationAccess().getInputPortParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleInputPort_in_rulePortDeclaration783);
                    this_InputPort_0=ruleInputPort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_InputPort_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:367:5: this_OutputPort_1= ruleOutputPort
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getPortDeclarationAccess().getOutputPortParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleOutputPort_in_rulePortDeclaration810);
                    this_OutputPort_1=ruleOutputPort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_OutputPort_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePortDeclaration"


    // $ANTLR start "entryRuleInputPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:383:1: entryRuleInputPort returns [EObject current=null] : iv_ruleInputPort= ruleInputPort EOF ;
    public final EObject entryRuleInputPort() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInputPort = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:384:2: (iv_ruleInputPort= ruleInputPort EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:385:2: iv_ruleInputPort= ruleInputPort EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInputPortRule()); 
            }
            pushFollow(FOLLOW_ruleInputPort_in_entryRuleInputPort845);
            iv_ruleInputPort=ruleInputPort();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInputPort; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleInputPort855); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInputPort"


    // $ANTLR start "ruleInputPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:392:1: ruleInputPort returns [EObject current=null] : (otherlv_0= 'in' ( (lv_type_1_0= ruleJvmTypeReference ) ) ( (lv_name_2_0= RULE_ID ) ) ) ;
    public final EObject ruleInputPort() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_2_0=null;
        EObject lv_type_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:395:28: ( (otherlv_0= 'in' ( (lv_type_1_0= ruleJvmTypeReference ) ) ( (lv_name_2_0= RULE_ID ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:396:1: (otherlv_0= 'in' ( (lv_type_1_0= ruleJvmTypeReference ) ) ( (lv_name_2_0= RULE_ID ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:396:1: (otherlv_0= 'in' ( (lv_type_1_0= ruleJvmTypeReference ) ) ( (lv_name_2_0= RULE_ID ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:396:3: otherlv_0= 'in' ( (lv_type_1_0= ruleJvmTypeReference ) ) ( (lv_name_2_0= RULE_ID ) )
            {
            otherlv_0=(Token)match(input,17,FOLLOW_17_in_ruleInputPort892); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getInputPortAccess().getInKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:400:1: ( (lv_type_1_0= ruleJvmTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:401:1: (lv_type_1_0= ruleJvmTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:401:1: (lv_type_1_0= ruleJvmTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:402:3: lv_type_1_0= ruleJvmTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getInputPortAccess().getTypeJvmTypeReferenceParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleInputPort913);
            lv_type_1_0=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getInputPortRule());
              	        }
                     		set(
                     			current, 
                     			"type",
                      		lv_type_1_0, 
                      		"JvmTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:418:2: ( (lv_name_2_0= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:419:1: (lv_name_2_0= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:419:1: (lv_name_2_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:420:3: lv_name_2_0= RULE_ID
            {
            lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleInputPort930); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(lv_name_2_0, grammarAccess.getInputPortAccess().getNameIDTerminalRuleCall_2_0()); 
              		
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getInputPortRule());
              	        }
                     		setWithLastConsumed(
                     			current, 
                     			"name",
                      		lv_name_2_0, 
                      		"ID");
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInputPort"


    // $ANTLR start "entryRuleOutputPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:444:1: entryRuleOutputPort returns [EObject current=null] : iv_ruleOutputPort= ruleOutputPort EOF ;
    public final EObject entryRuleOutputPort() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOutputPort = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:445:2: (iv_ruleOutputPort= ruleOutputPort EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:446:2: iv_ruleOutputPort= ruleOutputPort EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOutputPortRule()); 
            }
            pushFollow(FOLLOW_ruleOutputPort_in_entryRuleOutputPort971);
            iv_ruleOutputPort=ruleOutputPort();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOutputPort; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOutputPort981); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOutputPort"


    // $ANTLR start "ruleOutputPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:453:1: ruleOutputPort returns [EObject current=null] : ( ( ( (lv_errorPort_0_0= 'err' ) ) | otherlv_1= 'out' ) ( (lv_type_2_0= ruleJvmTypeReference ) ) ( (lv_name_3_0= RULE_ID ) ) ) ;
    public final EObject ruleOutputPort() throws RecognitionException {
        EObject current = null;

        Token lv_errorPort_0_0=null;
        Token otherlv_1=null;
        Token lv_name_3_0=null;
        EObject lv_type_2_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:456:28: ( ( ( ( (lv_errorPort_0_0= 'err' ) ) | otherlv_1= 'out' ) ( (lv_type_2_0= ruleJvmTypeReference ) ) ( (lv_name_3_0= RULE_ID ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:457:1: ( ( ( (lv_errorPort_0_0= 'err' ) ) | otherlv_1= 'out' ) ( (lv_type_2_0= ruleJvmTypeReference ) ) ( (lv_name_3_0= RULE_ID ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:457:1: ( ( ( (lv_errorPort_0_0= 'err' ) ) | otherlv_1= 'out' ) ( (lv_type_2_0= ruleJvmTypeReference ) ) ( (lv_name_3_0= RULE_ID ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:457:2: ( ( (lv_errorPort_0_0= 'err' ) ) | otherlv_1= 'out' ) ( (lv_type_2_0= ruleJvmTypeReference ) ) ( (lv_name_3_0= RULE_ID ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:457:2: ( ( (lv_errorPort_0_0= 'err' ) ) | otherlv_1= 'out' )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==18) ) {
                alt8=1;
            }
            else if ( (LA8_0==19) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:457:3: ( (lv_errorPort_0_0= 'err' ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:457:3: ( (lv_errorPort_0_0= 'err' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:458:1: (lv_errorPort_0_0= 'err' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:458:1: (lv_errorPort_0_0= 'err' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:459:3: lv_errorPort_0_0= 'err'
                    {
                    lv_errorPort_0_0=(Token)match(input,18,FOLLOW_18_in_ruleOutputPort1025); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              newLeafNode(lv_errorPort_0_0, grammarAccess.getOutputPortAccess().getErrorPortErrKeyword_0_0_0());
                          
                    }
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElement(grammarAccess.getOutputPortRule());
                      	        }
                             		setWithLastConsumed(current, "errorPort", true, "err");
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:473:7: otherlv_1= 'out'
                    {
                    otherlv_1=(Token)match(input,19,FOLLOW_19_in_ruleOutputPort1056); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_1, grammarAccess.getOutputPortAccess().getOutKeyword_0_1());
                          
                    }

                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:477:2: ( (lv_type_2_0= ruleJvmTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:478:1: (lv_type_2_0= ruleJvmTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:478:1: (lv_type_2_0= ruleJvmTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:479:3: lv_type_2_0= ruleJvmTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getOutputPortAccess().getTypeJvmTypeReferenceParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleOutputPort1078);
            lv_type_2_0=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getOutputPortRule());
              	        }
                     		set(
                     			current, 
                     			"type",
                      		lv_type_2_0, 
                      		"JvmTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:495:2: ( (lv_name_3_0= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:496:1: (lv_name_3_0= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:496:1: (lv_name_3_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:497:3: lv_name_3_0= RULE_ID
            {
            lv_name_3_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleOutputPort1095); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(lv_name_3_0, grammarAccess.getOutputPortAccess().getNameIDTerminalRuleCall_2_0()); 
              		
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getOutputPortRule());
              	        }
                     		setWithLastConsumed(
                     			current, 
                     			"name",
                      		lv_name_3_0, 
                      		"ID");
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOutputPort"


    // $ANTLR start "entryRuleFlow"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:521:1: entryRuleFlow returns [EObject current=null] : iv_ruleFlow= ruleFlow EOF ;
    public final EObject entryRuleFlow() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFlow = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:522:2: (iv_ruleFlow= ruleFlow EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:523:2: iv_ruleFlow= ruleFlow EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFlowRule()); 
            }
            pushFollow(FOLLOW_ruleFlow_in_entryRuleFlow1136);
            iv_ruleFlow=ruleFlow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFlow; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFlow1146); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFlow"


    // $ANTLR start "ruleFlow"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:530:1: ruleFlow returns [EObject current=null] : ( ( (lv_from_0_0= ruleOutputPortReference ) ) otherlv_1= '->' ( (lv_to_2_0= ruleInputPortReference ) ) ) ;
    public final EObject ruleFlow() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_from_0_0 = null;

        EObject lv_to_2_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:533:28: ( ( ( (lv_from_0_0= ruleOutputPortReference ) ) otherlv_1= '->' ( (lv_to_2_0= ruleInputPortReference ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:534:1: ( ( (lv_from_0_0= ruleOutputPortReference ) ) otherlv_1= '->' ( (lv_to_2_0= ruleInputPortReference ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:534:1: ( ( (lv_from_0_0= ruleOutputPortReference ) ) otherlv_1= '->' ( (lv_to_2_0= ruleInputPortReference ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:534:2: ( (lv_from_0_0= ruleOutputPortReference ) ) otherlv_1= '->' ( (lv_to_2_0= ruleInputPortReference ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:534:2: ( (lv_from_0_0= ruleOutputPortReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:535:1: (lv_from_0_0= ruleOutputPortReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:535:1: (lv_from_0_0= ruleOutputPortReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:536:3: lv_from_0_0= ruleOutputPortReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getFlowAccess().getFromOutputPortReferenceParserRuleCall_0_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleOutputPortReference_in_ruleFlow1192);
            lv_from_0_0=ruleOutputPortReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getFlowRule());
              	        }
                     		set(
                     			current, 
                     			"from",
                      		lv_from_0_0, 
                      		"OutputPortReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_1=(Token)match(input,20,FOLLOW_20_in_ruleFlow1204); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getFlowAccess().getHyphenMinusGreaterThanSignKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:556:1: ( (lv_to_2_0= ruleInputPortReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:557:1: (lv_to_2_0= ruleInputPortReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:557:1: (lv_to_2_0= ruleInputPortReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:558:3: lv_to_2_0= ruleInputPortReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getFlowAccess().getToInputPortReferenceParserRuleCall_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleInputPortReference_in_ruleFlow1225);
            lv_to_2_0=ruleInputPortReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getFlowRule());
              	        }
                     		set(
                     			current, 
                     			"to",
                      		lv_to_2_0, 
                      		"InputPortReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFlow"


    // $ANTLR start "entryRuleOutputPortReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:582:1: entryRuleOutputPortReference returns [EObject current=null] : iv_ruleOutputPortReference= ruleOutputPortReference EOF ;
    public final EObject entryRuleOutputPortReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOutputPortReference = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:583:2: (iv_ruleOutputPortReference= ruleOutputPortReference EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:584:2: iv_ruleOutputPortReference= ruleOutputPortReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOutputPortReferenceRule()); 
            }
            pushFollow(FOLLOW_ruleOutputPortReference_in_entryRuleOutputPortReference1261);
            iv_ruleOutputPortReference=ruleOutputPortReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOutputPortReference; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOutputPortReference1271); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOutputPortReference"


    // $ANTLR start "ruleOutputPortReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:591:1: ruleOutputPortReference returns [EObject current=null] : (this_LocalInputPort_0= ruleLocalInputPort | this_IntegratedPort_1= ruleIntegratedPort ) ;
    public final EObject ruleOutputPortReference() throws RecognitionException {
        EObject current = null;

        EObject this_LocalInputPort_0 = null;

        EObject this_IntegratedPort_1 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:594:28: ( (this_LocalInputPort_0= ruleLocalInputPort | this_IntegratedPort_1= ruleIntegratedPort ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:595:1: (this_LocalInputPort_0= ruleLocalInputPort | this_IntegratedPort_1= ruleIntegratedPort )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:595:1: (this_LocalInputPort_0= ruleLocalInputPort | this_IntegratedPort_1= ruleIntegratedPort )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==22) ) {
                alt9=1;
            }
            else if ( (LA9_0==RULE_ID) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:596:5: this_LocalInputPort_0= ruleLocalInputPort
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getOutputPortReferenceAccess().getLocalInputPortParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleLocalInputPort_in_ruleOutputPortReference1318);
                    this_LocalInputPort_0=ruleLocalInputPort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_LocalInputPort_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:606:5: this_IntegratedPort_1= ruleIntegratedPort
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getOutputPortReferenceAccess().getIntegratedPortParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleIntegratedPort_in_ruleOutputPortReference1345);
                    this_IntegratedPort_1=ruleIntegratedPort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_IntegratedPort_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOutputPortReference"


    // $ANTLR start "entryRuleIntegratedPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:622:1: entryRuleIntegratedPort returns [EObject current=null] : iv_ruleIntegratedPort= ruleIntegratedPort EOF ;
    public final EObject entryRuleIntegratedPort() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntegratedPort = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:623:2: (iv_ruleIntegratedPort= ruleIntegratedPort EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:624:2: iv_ruleIntegratedPort= ruleIntegratedPort EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntegratedPortRule()); 
            }
            pushFollow(FOLLOW_ruleIntegratedPort_in_entryRuleIntegratedPort1380);
            iv_ruleIntegratedPort=ruleIntegratedPort();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntegratedPort; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIntegratedPort1390); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIntegratedPort"


    // $ANTLR start "ruleIntegratedPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:631:1: ruleIntegratedPort returns [EObject current=null] : ( ( (otherlv_0= RULE_ID ) ) ( (lv_port_1_0= rulePort ) )? ) ;
    public final EObject ruleIntegratedPort() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_port_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:634:28: ( ( ( (otherlv_0= RULE_ID ) ) ( (lv_port_1_0= rulePort ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:635:1: ( ( (otherlv_0= RULE_ID ) ) ( (lv_port_1_0= rulePort ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:635:1: ( ( (otherlv_0= RULE_ID ) ) ( (lv_port_1_0= rulePort ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:635:2: ( (otherlv_0= RULE_ID ) ) ( (lv_port_1_0= rulePort ) )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:635:2: ( (otherlv_0= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:636:1: (otherlv_0= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:636:1: (otherlv_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:637:3: otherlv_0= RULE_ID
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              	            current = createModelElement(grammarAccess.getIntegratedPortRule());
              	        }
                      
            }
            otherlv_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleIntegratedPort1435); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		newLeafNode(otherlv_0, grammarAccess.getIntegratedPortAccess().getUnitUnitOrBoardCrossReference_0_0()); 
              	
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:648:2: ( (lv_port_1_0= rulePort ) )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==21) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:649:1: (lv_port_1_0= rulePort )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:649:1: (lv_port_1_0= rulePort )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:650:3: lv_port_1_0= rulePort
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getIntegratedPortAccess().getPortPortParserRuleCall_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_rulePort_in_ruleIntegratedPort1456);
                    lv_port_1_0=rulePort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getIntegratedPortRule());
                      	        }
                             		set(
                             			current, 
                             			"port",
                              		lv_port_1_0, 
                              		"Port");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIntegratedPort"


    // $ANTLR start "entryRulePort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:674:1: entryRulePort returns [EObject current=null] : iv_rulePort= rulePort EOF ;
    public final EObject entryRulePort() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePort = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:675:2: (iv_rulePort= rulePort EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:676:2: iv_rulePort= rulePort EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPortRule()); 
            }
            pushFollow(FOLLOW_rulePort_in_entryRulePort1493);
            iv_rulePort=rulePort();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePort; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePort1503); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePort"


    // $ANTLR start "rulePort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:683:1: rulePort returns [EObject current=null] : (otherlv_0= '.' ( (lv_name_1_0= RULE_ID ) ) ) ;
    public final EObject rulePort() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:686:28: ( (otherlv_0= '.' ( (lv_name_1_0= RULE_ID ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:687:1: (otherlv_0= '.' ( (lv_name_1_0= RULE_ID ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:687:1: (otherlv_0= '.' ( (lv_name_1_0= RULE_ID ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:687:3: otherlv_0= '.' ( (lv_name_1_0= RULE_ID ) )
            {
            otherlv_0=(Token)match(input,21,FOLLOW_21_in_rulePort1540); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getPortAccess().getFullStopKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:691:1: ( (lv_name_1_0= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:692:1: (lv_name_1_0= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:692:1: (lv_name_1_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:693:3: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_rulePort1557); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(lv_name_1_0, grammarAccess.getPortAccess().getNameIDTerminalRuleCall_1_0()); 
              		
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getPortRule());
              	        }
                     		setWithLastConsumed(
                     			current, 
                     			"name",
                      		lv_name_1_0, 
                      		"ID");
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePort"


    // $ANTLR start "entryRuleLocalInputPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:717:1: entryRuleLocalInputPort returns [EObject current=null] : iv_ruleLocalInputPort= ruleLocalInputPort EOF ;
    public final EObject entryRuleLocalInputPort() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLocalInputPort = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:718:2: (iv_ruleLocalInputPort= ruleLocalInputPort EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:719:2: iv_ruleLocalInputPort= ruleLocalInputPort EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLocalInputPortRule()); 
            }
            pushFollow(FOLLOW_ruleLocalInputPort_in_entryRuleLocalInputPort1598);
            iv_ruleLocalInputPort=ruleLocalInputPort();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLocalInputPort; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLocalInputPort1608); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLocalInputPort"


    // $ANTLR start "ruleLocalInputPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:726:1: ruleLocalInputPort returns [EObject current=null] : (otherlv_0= ':' ( (otherlv_1= RULE_ID ) ) ) ;
    public final EObject ruleLocalInputPort() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:729:28: ( (otherlv_0= ':' ( (otherlv_1= RULE_ID ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:730:1: (otherlv_0= ':' ( (otherlv_1= RULE_ID ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:730:1: (otherlv_0= ':' ( (otherlv_1= RULE_ID ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:730:3: otherlv_0= ':' ( (otherlv_1= RULE_ID ) )
            {
            otherlv_0=(Token)match(input,22,FOLLOW_22_in_ruleLocalInputPort1645); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getLocalInputPortAccess().getColonKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:734:1: ( (otherlv_1= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:735:1: (otherlv_1= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:735:1: (otherlv_1= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:736:3: otherlv_1= RULE_ID
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              	            current = createModelElement(grammarAccess.getLocalInputPortRule());
              	        }
                      
            }
            otherlv_1=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleLocalInputPort1665); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		newLeafNode(otherlv_1, grammarAccess.getLocalInputPortAccess().getPortInputPortCrossReference_1_0()); 
              	
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLocalInputPort"


    // $ANTLR start "entryRuleInputPortReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:755:1: entryRuleInputPortReference returns [EObject current=null] : iv_ruleInputPortReference= ruleInputPortReference EOF ;
    public final EObject entryRuleInputPortReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInputPortReference = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:756:2: (iv_ruleInputPortReference= ruleInputPortReference EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:757:2: iv_ruleInputPortReference= ruleInputPortReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInputPortReferenceRule()); 
            }
            pushFollow(FOLLOW_ruleInputPortReference_in_entryRuleInputPortReference1701);
            iv_ruleInputPortReference=ruleInputPortReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInputPortReference; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleInputPortReference1711); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInputPortReference"


    // $ANTLR start "ruleInputPortReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:764:1: ruleInputPortReference returns [EObject current=null] : (this_LocalOutputPort_0= ruleLocalOutputPort | this_IntegratedPort_1= ruleIntegratedPort | ( ( ( () '[' ) )=> (lv_closure_2_0= ruleXClosure ) ) ) ;
    public final EObject ruleInputPortReference() throws RecognitionException {
        EObject current = null;

        EObject this_LocalOutputPort_0 = null;

        EObject this_IntegratedPort_1 = null;

        EObject lv_closure_2_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:767:28: ( (this_LocalOutputPort_0= ruleLocalOutputPort | this_IntegratedPort_1= ruleIntegratedPort | ( ( ( () '[' ) )=> (lv_closure_2_0= ruleXClosure ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:768:1: (this_LocalOutputPort_0= ruleLocalOutputPort | this_IntegratedPort_1= ruleIntegratedPort | ( ( ( () '[' ) )=> (lv_closure_2_0= ruleXClosure ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:768:1: (this_LocalOutputPort_0= ruleLocalOutputPort | this_IntegratedPort_1= ruleIntegratedPort | ( ( ( () '[' ) )=> (lv_closure_2_0= ruleXClosure ) ) )
            int alt11=3;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==22) ) {
                alt11=1;
            }
            else if ( (LA11_0==RULE_ID) ) {
                alt11=2;
            }
            else if ( (LA11_0==67) && (synpred1_InternalAqua())) {
                alt11=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:769:5: this_LocalOutputPort_0= ruleLocalOutputPort
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getInputPortReferenceAccess().getLocalOutputPortParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleLocalOutputPort_in_ruleInputPortReference1758);
                    this_LocalOutputPort_0=ruleLocalOutputPort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_LocalOutputPort_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:779:5: this_IntegratedPort_1= ruleIntegratedPort
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getInputPortReferenceAccess().getIntegratedPortParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleIntegratedPort_in_ruleInputPortReference1785);
                    this_IntegratedPort_1=ruleIntegratedPort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_IntegratedPort_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:788:6: ( ( ( () '[' ) )=> (lv_closure_2_0= ruleXClosure ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:788:6: ( ( ( () '[' ) )=> (lv_closure_2_0= ruleXClosure ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:788:7: ( ( () '[' ) )=> (lv_closure_2_0= ruleXClosure )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:791:1: (lv_closure_2_0= ruleXClosure )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:792:3: lv_closure_2_0= ruleXClosure
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getInputPortReferenceAccess().getClosureXClosureParserRuleCall_2_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXClosure_in_ruleInputPortReference1823);
                    lv_closure_2_0=ruleXClosure();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getInputPortReferenceRule());
                      	        }
                             		set(
                             			current, 
                             			"closure",
                              		lv_closure_2_0, 
                              		"XClosure");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInputPortReference"


    // $ANTLR start "entryRuleLocalOutputPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:816:1: entryRuleLocalOutputPort returns [EObject current=null] : iv_ruleLocalOutputPort= ruleLocalOutputPort EOF ;
    public final EObject entryRuleLocalOutputPort() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLocalOutputPort = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:817:2: (iv_ruleLocalOutputPort= ruleLocalOutputPort EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:818:2: iv_ruleLocalOutputPort= ruleLocalOutputPort EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLocalOutputPortRule()); 
            }
            pushFollow(FOLLOW_ruleLocalOutputPort_in_entryRuleLocalOutputPort1859);
            iv_ruleLocalOutputPort=ruleLocalOutputPort();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLocalOutputPort; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLocalOutputPort1869); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLocalOutputPort"


    // $ANTLR start "ruleLocalOutputPort"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:825:1: ruleLocalOutputPort returns [EObject current=null] : (otherlv_0= ':' ( (otherlv_1= RULE_ID ) ) ) ;
    public final EObject ruleLocalOutputPort() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:828:28: ( (otherlv_0= ':' ( (otherlv_1= RULE_ID ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:829:1: (otherlv_0= ':' ( (otherlv_1= RULE_ID ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:829:1: (otherlv_0= ':' ( (otherlv_1= RULE_ID ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:829:3: otherlv_0= ':' ( (otherlv_1= RULE_ID ) )
            {
            otherlv_0=(Token)match(input,22,FOLLOW_22_in_ruleLocalOutputPort1906); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getLocalOutputPortAccess().getColonKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:833:1: ( (otherlv_1= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:834:1: (otherlv_1= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:834:1: (otherlv_1= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:835:3: otherlv_1= RULE_ID
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              	            current = createModelElement(grammarAccess.getLocalOutputPortRule());
              	        }
                      
            }
            otherlv_1=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleLocalOutputPort1926); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		newLeafNode(otherlv_1, grammarAccess.getLocalOutputPortAccess().getPortOutputPortCrossReference_1_0()); 
              	
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLocalOutputPort"


    // $ANTLR start "entryRuleUnit"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:854:1: entryRuleUnit returns [EObject current=null] : iv_ruleUnit= ruleUnit EOF ;
    public final EObject entryRuleUnit() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnit = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:855:2: (iv_ruleUnit= ruleUnit EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:856:2: iv_ruleUnit= ruleUnit EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnitRule()); 
            }
            pushFollow(FOLLOW_ruleUnit_in_entryRuleUnit1962);
            iv_ruleUnit=ruleUnit();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnit; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleUnit1972); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnit"


    // $ANTLR start "ruleUnit"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:863:1: ruleUnit returns [EObject current=null] : (otherlv_0= 'unit' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_declarations_4_0= ruleDeclaration ) )* otherlv_5= '}' ) ;
    public final EObject ruleUnit() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_ports_2_0 = null;

        EObject lv_declarations_4_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:866:28: ( (otherlv_0= 'unit' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_declarations_4_0= ruleDeclaration ) )* otherlv_5= '}' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:867:1: (otherlv_0= 'unit' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_declarations_4_0= ruleDeclaration ) )* otherlv_5= '}' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:867:1: (otherlv_0= 'unit' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_declarations_4_0= ruleDeclaration ) )* otherlv_5= '}' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:867:3: otherlv_0= 'unit' ( (lv_name_1_0= RULE_ID ) ) ( (lv_ports_2_0= rulePortDeclaration ) )+ otherlv_3= '{' ( (lv_declarations_4_0= ruleDeclaration ) )* otherlv_5= '}'
            {
            otherlv_0=(Token)match(input,23,FOLLOW_23_in_ruleUnit2009); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getUnitAccess().getUnitKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:871:1: ( (lv_name_1_0= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:872:1: (lv_name_1_0= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:872:1: (lv_name_1_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:873:3: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleUnit2026); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(lv_name_1_0, grammarAccess.getUnitAccess().getNameIDTerminalRuleCall_1_0()); 
              		
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getUnitRule());
              	        }
                     		setWithLastConsumed(
                     			current, 
                     			"name",
                      		lv_name_1_0, 
                      		"ID");
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:889:2: ( (lv_ports_2_0= rulePortDeclaration ) )+
            int cnt12=0;
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( ((LA12_0>=17 && LA12_0<=19)) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:890:1: (lv_ports_2_0= rulePortDeclaration )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:890:1: (lv_ports_2_0= rulePortDeclaration )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:891:3: lv_ports_2_0= rulePortDeclaration
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getUnitAccess().getPortsPortDeclarationParserRuleCall_2_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_rulePortDeclaration_in_ruleUnit2052);
            	    lv_ports_2_0=rulePortDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getUnitRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"ports",
            	              		lv_ports_2_0, 
            	              		"PortDeclaration");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            otherlv_3=(Token)match(input,15,FOLLOW_15_in_ruleUnit2065); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_3, grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_3());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:911:1: ( (lv_declarations_4_0= ruleDeclaration ) )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==24||(LA13_0>=28 && LA13_0<=29)||(LA13_0>=79 && LA13_0<=80)) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:912:1: (lv_declarations_4_0= ruleDeclaration )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:912:1: (lv_declarations_4_0= ruleDeclaration )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:913:3: lv_declarations_4_0= ruleDeclaration
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getUnitAccess().getDeclarationsDeclarationParserRuleCall_4_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleDeclaration_in_ruleUnit2086);
            	    lv_declarations_4_0=ruleDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getUnitRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"declarations",
            	              		lv_declarations_4_0, 
            	              		"Declaration");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            otherlv_5=(Token)match(input,16,FOLLOW_16_in_ruleUnit2099); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_5, grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_5());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnit"


    // $ANTLR start "entryRuleDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:941:1: entryRuleDeclaration returns [EObject current=null] : iv_ruleDeclaration= ruleDeclaration EOF ;
    public final EObject entryRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:942:2: (iv_ruleDeclaration= ruleDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:943:2: iv_ruleDeclaration= ruleDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDeclarationRule()); 
            }
            pushFollow(FOLLOW_ruleDeclaration_in_entryRuleDeclaration2135);
            iv_ruleDeclaration=ruleDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDeclaration2145); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDeclaration"


    // $ANTLR start "ruleDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:950:1: ruleDeclaration returns [EObject current=null] : (this_Constructor_0= ruleConstructor | this_InputProcessingDeclaration_1= ruleInputProcessingDeclaration | this_MethodDeclaration_2= ruleMethodDeclaration | this_VariableDeclaration_3= ruleVariableDeclaration ) ;
    public final EObject ruleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_Constructor_0 = null;

        EObject this_InputProcessingDeclaration_1 = null;

        EObject this_MethodDeclaration_2 = null;

        EObject this_VariableDeclaration_3 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:953:28: ( (this_Constructor_0= ruleConstructor | this_InputProcessingDeclaration_1= ruleInputProcessingDeclaration | this_MethodDeclaration_2= ruleMethodDeclaration | this_VariableDeclaration_3= ruleVariableDeclaration ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:954:1: (this_Constructor_0= ruleConstructor | this_InputProcessingDeclaration_1= ruleInputProcessingDeclaration | this_MethodDeclaration_2= ruleMethodDeclaration | this_VariableDeclaration_3= ruleVariableDeclaration )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:954:1: (this_Constructor_0= ruleConstructor | this_InputProcessingDeclaration_1= ruleInputProcessingDeclaration | this_MethodDeclaration_2= ruleMethodDeclaration | this_VariableDeclaration_3= ruleVariableDeclaration )
            int alt14=4;
            switch ( input.LA(1) ) {
            case 24:
                {
                alt14=1;
                }
                break;
            case 28:
                {
                alt14=2;
                }
                break;
            case 29:
                {
                alt14=3;
                }
                break;
            case 79:
            case 80:
                {
                alt14=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:955:5: this_Constructor_0= ruleConstructor
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getDeclarationAccess().getConstructorParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleConstructor_in_ruleDeclaration2192);
                    this_Constructor_0=ruleConstructor();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_Constructor_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:965:5: this_InputProcessingDeclaration_1= ruleInputProcessingDeclaration
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getDeclarationAccess().getInputProcessingDeclarationParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleInputProcessingDeclaration_in_ruleDeclaration2219);
                    this_InputProcessingDeclaration_1=ruleInputProcessingDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_InputProcessingDeclaration_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:975:5: this_MethodDeclaration_2= ruleMethodDeclaration
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getDeclarationAccess().getMethodDeclarationParserRuleCall_2()); 
                          
                    }
                    pushFollow(FOLLOW_ruleMethodDeclaration_in_ruleDeclaration2246);
                    this_MethodDeclaration_2=ruleMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_MethodDeclaration_2; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:985:5: this_VariableDeclaration_3= ruleVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getDeclarationAccess().getVariableDeclarationParserRuleCall_3()); 
                          
                    }
                    pushFollow(FOLLOW_ruleVariableDeclaration_in_ruleDeclaration2273);
                    this_VariableDeclaration_3=ruleVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_VariableDeclaration_3; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDeclaration"


    // $ANTLR start "entryRuleConstructor"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1001:1: entryRuleConstructor returns [EObject current=null] : iv_ruleConstructor= ruleConstructor EOF ;
    public final EObject entryRuleConstructor() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConstructor = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1002:2: (iv_ruleConstructor= ruleConstructor EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1003:2: iv_ruleConstructor= ruleConstructor EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConstructorRule()); 
            }
            pushFollow(FOLLOW_ruleConstructor_in_entryRuleConstructor2308);
            iv_ruleConstructor=ruleConstructor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConstructor; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleConstructor2318); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConstructor"


    // $ANTLR start "ruleConstructor"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1010:1: ruleConstructor returns [EObject current=null] : (otherlv_0= 'new' otherlv_1= '(' ( ( (lv_params_2_0= ruleFullJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_5= ')' ( (lv_body_6_0= ruleXBlockExpression ) ) ) ;
    public final EObject ruleConstructor() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_params_2_0 = null;

        EObject lv_params_4_0 = null;

        EObject lv_body_6_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1013:28: ( (otherlv_0= 'new' otherlv_1= '(' ( ( (lv_params_2_0= ruleFullJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_5= ')' ( (lv_body_6_0= ruleXBlockExpression ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1014:1: (otherlv_0= 'new' otherlv_1= '(' ( ( (lv_params_2_0= ruleFullJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_5= ')' ( (lv_body_6_0= ruleXBlockExpression ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1014:1: (otherlv_0= 'new' otherlv_1= '(' ( ( (lv_params_2_0= ruleFullJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_5= ')' ( (lv_body_6_0= ruleXBlockExpression ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1014:3: otherlv_0= 'new' otherlv_1= '(' ( ( (lv_params_2_0= ruleFullJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_5= ')' ( (lv_body_6_0= ruleXBlockExpression ) )
            {
            otherlv_0=(Token)match(input,24,FOLLOW_24_in_ruleConstructor2355); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getConstructorAccess().getNewKeyword_0());
                  
            }
            otherlv_1=(Token)match(input,25,FOLLOW_25_in_ruleConstructor2367); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getConstructorAccess().getLeftParenthesisKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1022:1: ( ( (lv_params_2_0= ruleFullJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) )* )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==RULE_ID||LA16_0==25||LA16_0==33) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1022:2: ( (lv_params_2_0= ruleFullJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1022:2: ( (lv_params_2_0= ruleFullJvmFormalParameter ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1023:1: (lv_params_2_0= ruleFullJvmFormalParameter )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1023:1: (lv_params_2_0= ruleFullJvmFormalParameter )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1024:3: lv_params_2_0= ruleFullJvmFormalParameter
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getConstructorAccess().getParamsFullJvmFormalParameterParserRuleCall_2_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFullJvmFormalParameter_in_ruleConstructor2389);
                    lv_params_2_0=ruleFullJvmFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getConstructorRule());
                      	        }
                             		add(
                             			current, 
                             			"params",
                              		lv_params_2_0, 
                              		"FullJvmFormalParameter");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1040:2: (otherlv_3= ',' ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) )*
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);

                        if ( (LA15_0==26) ) {
                            alt15=1;
                        }


                        switch (alt15) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1040:4: otherlv_3= ',' ( (lv_params_4_0= ruleFullJvmFormalParameter ) )
                    	    {
                    	    otherlv_3=(Token)match(input,26,FOLLOW_26_in_ruleConstructor2402); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_3, grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1044:1: ( (lv_params_4_0= ruleFullJvmFormalParameter ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1045:1: (lv_params_4_0= ruleFullJvmFormalParameter )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1045:1: (lv_params_4_0= ruleFullJvmFormalParameter )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1046:3: lv_params_4_0= ruleFullJvmFormalParameter
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getConstructorAccess().getParamsFullJvmFormalParameterParserRuleCall_2_1_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleFullJvmFormalParameter_in_ruleConstructor2423);
                    	    lv_params_4_0=ruleFullJvmFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getConstructorRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"params",
                    	              		lv_params_4_0, 
                    	              		"FullJvmFormalParameter");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop15;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,27,FOLLOW_27_in_ruleConstructor2439); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_5, grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1066:1: ( (lv_body_6_0= ruleXBlockExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1067:1: (lv_body_6_0= ruleXBlockExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1067:1: (lv_body_6_0= ruleXBlockExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1068:3: lv_body_6_0= ruleXBlockExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getConstructorAccess().getBodyXBlockExpressionParserRuleCall_4_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXBlockExpression_in_ruleConstructor2460);
            lv_body_6_0=ruleXBlockExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getConstructorRule());
              	        }
                     		set(
                     			current, 
                     			"body",
                      		lv_body_6_0, 
                      		"XBlockExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConstructor"


    // $ANTLR start "entryRuleVariableDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1092:1: entryRuleVariableDeclaration returns [EObject current=null] : iv_ruleVariableDeclaration= ruleVariableDeclaration EOF ;
    public final EObject entryRuleVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1093:2: (iv_ruleVariableDeclaration= ruleVariableDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1094:2: iv_ruleVariableDeclaration= ruleVariableDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_ruleVariableDeclaration_in_entryRuleVariableDeclaration2496);
            iv_ruleVariableDeclaration=ruleVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleVariableDeclaration2506); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariableDeclaration"


    // $ANTLR start "ruleVariableDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1101:1: ruleVariableDeclaration returns [EObject current=null] : ( (lv_varDecl_0_0= ruleXVariableDeclaration ) ) ;
    public final EObject ruleVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_varDecl_0_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1104:28: ( ( (lv_varDecl_0_0= ruleXVariableDeclaration ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1105:1: ( (lv_varDecl_0_0= ruleXVariableDeclaration ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1105:1: ( (lv_varDecl_0_0= ruleXVariableDeclaration ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1106:1: (lv_varDecl_0_0= ruleXVariableDeclaration )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1106:1: (lv_varDecl_0_0= ruleXVariableDeclaration )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1107:3: lv_varDecl_0_0= ruleXVariableDeclaration
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVarDeclXVariableDeclarationParserRuleCall_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXVariableDeclaration_in_ruleVariableDeclaration2551);
            lv_varDecl_0_0=ruleXVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
              	        }
                     		set(
                     			current, 
                     			"varDecl",
                      		lv_varDecl_0_0, 
                      		"XVariableDeclaration");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariableDeclaration"


    // $ANTLR start "entryRuleInputProcessingDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1131:1: entryRuleInputProcessingDeclaration returns [EObject current=null] : iv_ruleInputProcessingDeclaration= ruleInputProcessingDeclaration EOF ;
    public final EObject entryRuleInputProcessingDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInputProcessingDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1132:2: (iv_ruleInputProcessingDeclaration= ruleInputProcessingDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1133:2: iv_ruleInputProcessingDeclaration= ruleInputProcessingDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInputProcessingDeclarationRule()); 
            }
            pushFollow(FOLLOW_ruleInputProcessingDeclaration_in_entryRuleInputProcessingDeclaration2586);
            iv_ruleInputProcessingDeclaration=ruleInputProcessingDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInputProcessingDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleInputProcessingDeclaration2596); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInputProcessingDeclaration"


    // $ANTLR start "ruleInputProcessingDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1140:1: ruleInputProcessingDeclaration returns [EObject current=null] : (otherlv_0= 'on' ( (otherlv_1= RULE_ID ) ) ( (lv_expr_2_0= ruleXBlockExpression ) ) (otherlv_3= '->' ( (lv_outputPort_4_0= ruleLocalOutputPort ) ) )? ) ;
    public final EObject ruleInputProcessingDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expr_2_0 = null;

        EObject lv_outputPort_4_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1143:28: ( (otherlv_0= 'on' ( (otherlv_1= RULE_ID ) ) ( (lv_expr_2_0= ruleXBlockExpression ) ) (otherlv_3= '->' ( (lv_outputPort_4_0= ruleLocalOutputPort ) ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1144:1: (otherlv_0= 'on' ( (otherlv_1= RULE_ID ) ) ( (lv_expr_2_0= ruleXBlockExpression ) ) (otherlv_3= '->' ( (lv_outputPort_4_0= ruleLocalOutputPort ) ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1144:1: (otherlv_0= 'on' ( (otherlv_1= RULE_ID ) ) ( (lv_expr_2_0= ruleXBlockExpression ) ) (otherlv_3= '->' ( (lv_outputPort_4_0= ruleLocalOutputPort ) ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1144:3: otherlv_0= 'on' ( (otherlv_1= RULE_ID ) ) ( (lv_expr_2_0= ruleXBlockExpression ) ) (otherlv_3= '->' ( (lv_outputPort_4_0= ruleLocalOutputPort ) ) )?
            {
            otherlv_0=(Token)match(input,28,FOLLOW_28_in_ruleInputProcessingDeclaration2633); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getInputProcessingDeclarationAccess().getOnKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1148:1: ( (otherlv_1= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1149:1: (otherlv_1= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1149:1: (otherlv_1= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1150:3: otherlv_1= RULE_ID
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              	            current = createModelElement(grammarAccess.getInputProcessingDeclarationRule());
              	        }
                      
            }
            otherlv_1=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleInputProcessingDeclaration2653); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		newLeafNode(otherlv_1, grammarAccess.getInputProcessingDeclarationAccess().getInputPortInputPortCrossReference_1_0()); 
              	
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1161:2: ( (lv_expr_2_0= ruleXBlockExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1162:1: (lv_expr_2_0= ruleXBlockExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1162:1: (lv_expr_2_0= ruleXBlockExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1163:3: lv_expr_2_0= ruleXBlockExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getInputProcessingDeclarationAccess().getExprXBlockExpressionParserRuleCall_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXBlockExpression_in_ruleInputProcessingDeclaration2674);
            lv_expr_2_0=ruleXBlockExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getInputProcessingDeclarationRule());
              	        }
                     		set(
                     			current, 
                     			"expr",
                      		lv_expr_2_0, 
                      		"XBlockExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1179:2: (otherlv_3= '->' ( (lv_outputPort_4_0= ruleLocalOutputPort ) ) )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==20) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1179:4: otherlv_3= '->' ( (lv_outputPort_4_0= ruleLocalOutputPort ) )
                    {
                    otherlv_3=(Token)match(input,20,FOLLOW_20_in_ruleInputProcessingDeclaration2687); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_3, grammarAccess.getInputProcessingDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1183:1: ( (lv_outputPort_4_0= ruleLocalOutputPort ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1184:1: (lv_outputPort_4_0= ruleLocalOutputPort )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1184:1: (lv_outputPort_4_0= ruleLocalOutputPort )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1185:3: lv_outputPort_4_0= ruleLocalOutputPort
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getInputProcessingDeclarationAccess().getOutputPortLocalOutputPortParserRuleCall_3_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleLocalOutputPort_in_ruleInputProcessingDeclaration2708);
                    lv_outputPort_4_0=ruleLocalOutputPort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getInputProcessingDeclarationRule());
                      	        }
                             		set(
                             			current, 
                             			"outputPort",
                              		lv_outputPort_4_0, 
                              		"LocalOutputPort");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInputProcessingDeclaration"


    // $ANTLR start "entryRuleMethodDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1209:1: entryRuleMethodDeclaration returns [EObject current=null] : iv_ruleMethodDeclaration= ruleMethodDeclaration EOF ;
    public final EObject entryRuleMethodDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMethodDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1210:2: (iv_ruleMethodDeclaration= ruleMethodDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1211:2: iv_ruleMethodDeclaration= ruleMethodDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_ruleMethodDeclaration_in_entryRuleMethodDeclaration2746);
            iv_ruleMethodDeclaration=ruleMethodDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMethodDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleMethodDeclaration2756); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMethodDeclaration"


    // $ANTLR start "ruleMethodDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1218:1: ruleMethodDeclaration returns [EObject current=null] : (otherlv_0= 'def' ( (lv_type_1_0= ruleJvmArgumentTypeReference ) ) ( (lv_name_2_0= RULE_ID ) ) otherlv_3= '(' ( ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) (otherlv_5= ',' ( (lv_params_6_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_7= ')' ( (lv_body_8_0= ruleXBlockExpression ) ) ) ;
    public final EObject ruleMethodDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_type_1_0 = null;

        EObject lv_params_4_0 = null;

        EObject lv_params_6_0 = null;

        EObject lv_body_8_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1221:28: ( (otherlv_0= 'def' ( (lv_type_1_0= ruleJvmArgumentTypeReference ) ) ( (lv_name_2_0= RULE_ID ) ) otherlv_3= '(' ( ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) (otherlv_5= ',' ( (lv_params_6_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_7= ')' ( (lv_body_8_0= ruleXBlockExpression ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1222:1: (otherlv_0= 'def' ( (lv_type_1_0= ruleJvmArgumentTypeReference ) ) ( (lv_name_2_0= RULE_ID ) ) otherlv_3= '(' ( ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) (otherlv_5= ',' ( (lv_params_6_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_7= ')' ( (lv_body_8_0= ruleXBlockExpression ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1222:1: (otherlv_0= 'def' ( (lv_type_1_0= ruleJvmArgumentTypeReference ) ) ( (lv_name_2_0= RULE_ID ) ) otherlv_3= '(' ( ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) (otherlv_5= ',' ( (lv_params_6_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_7= ')' ( (lv_body_8_0= ruleXBlockExpression ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1222:3: otherlv_0= 'def' ( (lv_type_1_0= ruleJvmArgumentTypeReference ) ) ( (lv_name_2_0= RULE_ID ) ) otherlv_3= '(' ( ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) (otherlv_5= ',' ( (lv_params_6_0= ruleFullJvmFormalParameter ) ) )* )? otherlv_7= ')' ( (lv_body_8_0= ruleXBlockExpression ) )
            {
            otherlv_0=(Token)match(input,29,FOLLOW_29_in_ruleMethodDeclaration2793); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getMethodDeclarationAccess().getDefKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1226:1: ( (lv_type_1_0= ruleJvmArgumentTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1227:1: (lv_type_1_0= ruleJvmArgumentTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1227:1: (lv_type_1_0= ruleJvmArgumentTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1228:3: lv_type_1_0= ruleJvmArgumentTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getTypeJvmArgumentTypeReferenceParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleMethodDeclaration2814);
            lv_type_1_0=ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
              	        }
                     		set(
                     			current, 
                     			"type",
                      		lv_type_1_0, 
                      		"JvmArgumentTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1244:2: ( (lv_name_2_0= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1245:1: (lv_name_2_0= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1245:1: (lv_name_2_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1246:3: lv_name_2_0= RULE_ID
            {
            lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleMethodDeclaration2831); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(lv_name_2_0, grammarAccess.getMethodDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
              		
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getMethodDeclarationRule());
              	        }
                     		setWithLastConsumed(
                     			current, 
                     			"name",
                      		lv_name_2_0, 
                      		"ID");
              	    
            }

            }


            }

            otherlv_3=(Token)match(input,25,FOLLOW_25_in_ruleMethodDeclaration2848); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_3, grammarAccess.getMethodDeclarationAccess().getLeftParenthesisKeyword_3());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1266:1: ( ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) (otherlv_5= ',' ( (lv_params_6_0= ruleFullJvmFormalParameter ) ) )* )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==RULE_ID||LA19_0==25||LA19_0==33) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1266:2: ( (lv_params_4_0= ruleFullJvmFormalParameter ) ) (otherlv_5= ',' ( (lv_params_6_0= ruleFullJvmFormalParameter ) ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1266:2: ( (lv_params_4_0= ruleFullJvmFormalParameter ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1267:1: (lv_params_4_0= ruleFullJvmFormalParameter )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1267:1: (lv_params_4_0= ruleFullJvmFormalParameter )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1268:3: lv_params_4_0= ruleFullJvmFormalParameter
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getParamsFullJvmFormalParameterParserRuleCall_4_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFullJvmFormalParameter_in_ruleMethodDeclaration2870);
                    lv_params_4_0=ruleFullJvmFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
                      	        }
                             		add(
                             			current, 
                             			"params",
                              		lv_params_4_0, 
                              		"FullJvmFormalParameter");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1284:2: (otherlv_5= ',' ( (lv_params_6_0= ruleFullJvmFormalParameter ) ) )*
                    loop18:
                    do {
                        int alt18=2;
                        int LA18_0 = input.LA(1);

                        if ( (LA18_0==26) ) {
                            alt18=1;
                        }


                        switch (alt18) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1284:4: otherlv_5= ',' ( (lv_params_6_0= ruleFullJvmFormalParameter ) )
                    	    {
                    	    otherlv_5=(Token)match(input,26,FOLLOW_26_in_ruleMethodDeclaration2883); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_5, grammarAccess.getMethodDeclarationAccess().getCommaKeyword_4_1_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1288:1: ( (lv_params_6_0= ruleFullJvmFormalParameter ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1289:1: (lv_params_6_0= ruleFullJvmFormalParameter )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1289:1: (lv_params_6_0= ruleFullJvmFormalParameter )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1290:3: lv_params_6_0= ruleFullJvmFormalParameter
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleFullJvmFormalParameter_in_ruleMethodDeclaration2904);
                    	    lv_params_6_0=ruleFullJvmFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"params",
                    	              		lv_params_6_0, 
                    	              		"FullJvmFormalParameter");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop18;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_7=(Token)match(input,27,FOLLOW_27_in_ruleMethodDeclaration2920); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_7, grammarAccess.getMethodDeclarationAccess().getRightParenthesisKeyword_5());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1310:1: ( (lv_body_8_0= ruleXBlockExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1311:1: (lv_body_8_0= ruleXBlockExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1311:1: (lv_body_8_0= ruleXBlockExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1312:3: lv_body_8_0= ruleXBlockExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getBodyXBlockExpressionParserRuleCall_6_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXBlockExpression_in_ruleMethodDeclaration2941);
            lv_body_8_0=ruleXBlockExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
              	        }
                     		set(
                     			current, 
                     			"body",
                      		lv_body_8_0, 
                      		"XBlockExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMethodDeclaration"


    // $ANTLR start "entryRuleXExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1336:1: entryRuleXExpression returns [EObject current=null] : iv_ruleXExpression= ruleXExpression EOF ;
    public final EObject entryRuleXExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1337:2: (iv_ruleXExpression= ruleXExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1338:2: iv_ruleXExpression= ruleXExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXExpression_in_entryRuleXExpression2977);
            iv_ruleXExpression=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXExpression2987); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpression"


    // $ANTLR start "ruleXExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1345:1: ruleXExpression returns [EObject current=null] : (this_XAssignment_0= ruleXAssignment ( ( ( () '->' ( ( ruleLocalOutputPort ) ) ) )=> ( () otherlv_2= '->' ( (lv_outputPort_3_0= ruleLocalOutputPort ) ) ) )? ) ;
    public final EObject ruleXExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_XAssignment_0 = null;

        EObject lv_outputPort_3_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1348:28: ( (this_XAssignment_0= ruleXAssignment ( ( ( () '->' ( ( ruleLocalOutputPort ) ) ) )=> ( () otherlv_2= '->' ( (lv_outputPort_3_0= ruleLocalOutputPort ) ) ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1349:1: (this_XAssignment_0= ruleXAssignment ( ( ( () '->' ( ( ruleLocalOutputPort ) ) ) )=> ( () otherlv_2= '->' ( (lv_outputPort_3_0= ruleLocalOutputPort ) ) ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1349:1: (this_XAssignment_0= ruleXAssignment ( ( ( () '->' ( ( ruleLocalOutputPort ) ) ) )=> ( () otherlv_2= '->' ( (lv_outputPort_3_0= ruleLocalOutputPort ) ) ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1350:5: this_XAssignment_0= ruleXAssignment ( ( ( () '->' ( ( ruleLocalOutputPort ) ) ) )=> ( () otherlv_2= '->' ( (lv_outputPort_3_0= ruleLocalOutputPort ) ) ) )?
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXExpressionAccess().getXAssignmentParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXAssignment_in_ruleXExpression3034);
            this_XAssignment_0=ruleXAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XAssignment_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1358:1: ( ( ( () '->' ( ( ruleLocalOutputPort ) ) ) )=> ( () otherlv_2= '->' ( (lv_outputPort_3_0= ruleLocalOutputPort ) ) ) )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==20) ) {
                int LA20_1 = input.LA(2);

                if ( (synpred2_InternalAqua()) ) {
                    alt20=1;
                }
            }
            switch (alt20) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1358:2: ( ( () '->' ( ( ruleLocalOutputPort ) ) ) )=> ( () otherlv_2= '->' ( (lv_outputPort_3_0= ruleLocalOutputPort ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1364:6: ( () otherlv_2= '->' ( (lv_outputPort_3_0= ruleLocalOutputPort ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1364:7: () otherlv_2= '->' ( (lv_outputPort_3_0= ruleLocalOutputPort ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1364:7: ()
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1365:5: 
                    {
                    if ( state.backtracking==0 ) {

                              current = forceCreateModelElementAndSet(
                                  grammarAccess.getXExpressionAccess().getOutputForwardingExpressionAction_1_0_0(),
                                  current);
                          
                    }

                    }

                    otherlv_2=(Token)match(input,20,FOLLOW_20_in_ruleXExpression3077); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_2, grammarAccess.getXExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_0_1());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1374:1: ( (lv_outputPort_3_0= ruleLocalOutputPort ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1375:1: (lv_outputPort_3_0= ruleLocalOutputPort )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1375:1: (lv_outputPort_3_0= ruleLocalOutputPort )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1376:3: lv_outputPort_3_0= ruleLocalOutputPort
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXExpressionAccess().getOutputPortLocalOutputPortParserRuleCall_1_0_2_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleLocalOutputPort_in_ruleXExpression3098);
                    lv_outputPort_3_0=ruleLocalOutputPort();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXExpressionRule());
                      	        }
                             		set(
                             			current, 
                             			"outputPort",
                              		lv_outputPort_3_0, 
                              		"LocalOutputPort");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpression"


    // $ANTLR start "entryRuleOpOther"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1400:1: entryRuleOpOther returns [String current=null] : iv_ruleOpOther= ruleOpOther EOF ;
    public final String entryRuleOpOther() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpOther = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1401:2: (iv_ruleOpOther= ruleOpOther EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1402:2: iv_ruleOpOther= ruleOpOther EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpOtherRule()); 
            }
            pushFollow(FOLLOW_ruleOpOther_in_entryRuleOpOther3138);
            iv_ruleOpOther=ruleOpOther();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpOther.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpOther3149); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpOther"


    // $ANTLR start "ruleOpOther"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1409:1: ruleOpOther returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '..<' | (kw= '>' kw= '..' ) | kw= '..' | kw= '=>' | (kw= '>' ( ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) ) | kw= '>' ) ) | (kw= '<' ( ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) ) | kw= '<' | kw= '=>' ) ) | kw= '<>' | kw= '?:' ) ;
    public final AntlrDatatypeRuleToken ruleOpOther() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1412:28: ( (kw= '..<' | (kw= '>' kw= '..' ) | kw= '..' | kw= '=>' | (kw= '>' ( ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) ) | kw= '>' ) ) | (kw= '<' ( ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) ) | kw= '<' | kw= '=>' ) ) | kw= '<>' | kw= '?:' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1413:1: (kw= '..<' | (kw= '>' kw= '..' ) | kw= '..' | kw= '=>' | (kw= '>' ( ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) ) | kw= '>' ) ) | (kw= '<' ( ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) ) | kw= '<' | kw= '=>' ) ) | kw= '<>' | kw= '?:' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1413:1: (kw= '..<' | (kw= '>' kw= '..' ) | kw= '..' | kw= '=>' | (kw= '>' ( ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) ) | kw= '>' ) ) | (kw= '<' ( ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) ) | kw= '<' | kw= '=>' ) ) | kw= '<>' | kw= '?:' )
            int alt23=8;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1414:2: kw= '..<'
                    {
                    kw=(Token)match(input,30,FOLLOW_30_in_ruleOpOther3187); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopLessThanSignKeyword_0()); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1420:6: (kw= '>' kw= '..' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1420:6: (kw= '>' kw= '..' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1421:2: kw= '>' kw= '..'
                    {
                    kw=(Token)match(input,31,FOLLOW_31_in_ruleOpOther3207); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_1_0()); 
                          
                    }
                    kw=(Token)match(input,32,FOLLOW_32_in_ruleOpOther3220); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_1_1()); 
                          
                    }

                    }


                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1434:2: kw= '..'
                    {
                    kw=(Token)match(input,32,FOLLOW_32_in_ruleOpOther3240); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_2()); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1441:2: kw= '=>'
                    {
                    kw=(Token)match(input,33,FOLLOW_33_in_ruleOpOther3259); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_3()); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1447:6: (kw= '>' ( ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) ) | kw= '>' ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1447:6: (kw= '>' ( ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) ) | kw= '>' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1448:2: kw= '>' ( ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) ) | kw= '>' )
                    {
                    kw=(Token)match(input,31,FOLLOW_31_in_ruleOpOther3279); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_4_0()); 
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1453:1: ( ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) ) | kw= '>' )
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==31) ) {
                        int LA21_1 = input.LA(2);

                        if ( (LA21_1==EOF||(LA21_1>=RULE_ID && LA21_1<=RULE_DECIMAL)||LA21_1==15||(LA21_1>=24 && LA21_1<=25)||LA21_1==34||LA21_1==38||(LA21_1>=54 && LA21_1<=55)||LA21_1==60||(LA21_1>=66 && LA21_1<=67)||LA21_1==71||LA21_1==73||(LA21_1>=76 && LA21_1<=78)||(LA21_1>=81 && LA21_1<=91)||LA21_1==93) ) {
                            alt21=2;
                        }
                        else if ( (LA21_1==31) && (synpred3_InternalAqua())) {
                            alt21=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 21, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 0, input);

                        throw nvae;
                    }
                    switch (alt21) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1453:2: ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1453:2: ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1453:3: ( ( '>' '>' ) )=> (kw= '>' kw= '>' )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1457:5: (kw= '>' kw= '>' )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1458:2: kw= '>' kw= '>'
                            {
                            kw=(Token)match(input,31,FOLLOW_31_in_ruleOpOther3310); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      current.merge(kw);
                                      newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_4_1_0_0_0()); 
                                  
                            }
                            kw=(Token)match(input,31,FOLLOW_31_in_ruleOpOther3323); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      current.merge(kw);
                                      newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_4_1_0_0_1()); 
                                  
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1471:2: kw= '>'
                            {
                            kw=(Token)match(input,31,FOLLOW_31_in_ruleOpOther3344); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      current.merge(kw);
                                      newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_4_1_1()); 
                                  
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 6 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1477:6: (kw= '<' ( ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) ) | kw= '<' | kw= '=>' ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1477:6: (kw= '<' ( ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) ) | kw= '<' | kw= '=>' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1478:2: kw= '<' ( ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) ) | kw= '<' | kw= '=>' )
                    {
                    kw=(Token)match(input,34,FOLLOW_34_in_ruleOpOther3366); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_5_0()); 
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1483:1: ( ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) ) | kw= '<' | kw= '=>' )
                    int alt22=3;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==34) ) {
                        int LA22_1 = input.LA(2);

                        if ( (synpred4_InternalAqua()) ) {
                            alt22=1;
                        }
                        else if ( (true) ) {
                            alt22=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 22, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA22_0==33) ) {
                        alt22=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 22, 0, input);

                        throw nvae;
                    }
                    switch (alt22) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1483:2: ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1483:2: ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1483:3: ( ( '<' '<' ) )=> (kw= '<' kw= '<' )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1487:5: (kw= '<' kw= '<' )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1488:2: kw= '<' kw= '<'
                            {
                            kw=(Token)match(input,34,FOLLOW_34_in_ruleOpOther3397); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      current.merge(kw);
                                      newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_5_1_0_0_0()); 
                                  
                            }
                            kw=(Token)match(input,34,FOLLOW_34_in_ruleOpOther3410); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      current.merge(kw);
                                      newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_5_1_0_0_1()); 
                                  
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1501:2: kw= '<'
                            {
                            kw=(Token)match(input,34,FOLLOW_34_in_ruleOpOther3431); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      current.merge(kw);
                                      newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_5_1_1()); 
                                  
                            }

                            }
                            break;
                        case 3 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1508:2: kw= '=>'
                            {
                            kw=(Token)match(input,33,FOLLOW_33_in_ruleOpOther3450); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      current.merge(kw);
                                      newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_5_1_2()); 
                                  
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 7 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1515:2: kw= '<>'
                    {
                    kw=(Token)match(input,35,FOLLOW_35_in_ruleOpOther3471); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_6()); 
                          
                    }

                    }
                    break;
                case 8 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1522:2: kw= '?:'
                    {
                    kw=(Token)match(input,36,FOLLOW_36_in_ruleOpOther3490); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_7()); 
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpOther"


    // $ANTLR start "entryRuleDataType"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1535:1: entryRuleDataType returns [EObject current=null] : iv_ruleDataType= ruleDataType EOF ;
    public final EObject entryRuleDataType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDataType = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1536:2: (iv_ruleDataType= ruleDataType EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1537:2: iv_ruleDataType= ruleDataType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDataTypeRule()); 
            }
            pushFollow(FOLLOW_ruleDataType_in_entryRuleDataType3530);
            iv_ruleDataType=ruleDataType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDataType; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDataType3540); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDataType"


    // $ANTLR start "ruleDataType"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1544:1: ruleDataType returns [EObject current=null] : (otherlv_0= 'data' ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '<' ( (lv_typeParameters_3_0= ruleJvmTypeParameter ) ) (otherlv_4= ',' ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) ) )* otherlv_6= '>' )? (otherlv_7= 'extends' ( (lv_extends_8_0= ruleJvmParameterizedTypeReference ) ) )? (otherlv_9= 'implements' ( (lv_implements_10_0= ruleJvmParameterizedTypeReference ) ) (otherlv_11= ',' ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) ) )* )? otherlv_13= '{' ( (lv_members_14_0= ruleMember ) )* otherlv_15= '}' ) ;
    public final EObject ruleDataType() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        EObject lv_typeParameters_3_0 = null;

        EObject lv_typeParameters_5_0 = null;

        EObject lv_extends_8_0 = null;

        EObject lv_implements_10_0 = null;

        EObject lv_implements_12_0 = null;

        EObject lv_members_14_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1547:28: ( (otherlv_0= 'data' ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '<' ( (lv_typeParameters_3_0= ruleJvmTypeParameter ) ) (otherlv_4= ',' ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) ) )* otherlv_6= '>' )? (otherlv_7= 'extends' ( (lv_extends_8_0= ruleJvmParameterizedTypeReference ) ) )? (otherlv_9= 'implements' ( (lv_implements_10_0= ruleJvmParameterizedTypeReference ) ) (otherlv_11= ',' ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) ) )* )? otherlv_13= '{' ( (lv_members_14_0= ruleMember ) )* otherlv_15= '}' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1548:1: (otherlv_0= 'data' ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '<' ( (lv_typeParameters_3_0= ruleJvmTypeParameter ) ) (otherlv_4= ',' ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) ) )* otherlv_6= '>' )? (otherlv_7= 'extends' ( (lv_extends_8_0= ruleJvmParameterizedTypeReference ) ) )? (otherlv_9= 'implements' ( (lv_implements_10_0= ruleJvmParameterizedTypeReference ) ) (otherlv_11= ',' ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) ) )* )? otherlv_13= '{' ( (lv_members_14_0= ruleMember ) )* otherlv_15= '}' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1548:1: (otherlv_0= 'data' ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '<' ( (lv_typeParameters_3_0= ruleJvmTypeParameter ) ) (otherlv_4= ',' ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) ) )* otherlv_6= '>' )? (otherlv_7= 'extends' ( (lv_extends_8_0= ruleJvmParameterizedTypeReference ) ) )? (otherlv_9= 'implements' ( (lv_implements_10_0= ruleJvmParameterizedTypeReference ) ) (otherlv_11= ',' ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) ) )* )? otherlv_13= '{' ( (lv_members_14_0= ruleMember ) )* otherlv_15= '}' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1548:3: otherlv_0= 'data' ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '<' ( (lv_typeParameters_3_0= ruleJvmTypeParameter ) ) (otherlv_4= ',' ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) ) )* otherlv_6= '>' )? (otherlv_7= 'extends' ( (lv_extends_8_0= ruleJvmParameterizedTypeReference ) ) )? (otherlv_9= 'implements' ( (lv_implements_10_0= ruleJvmParameterizedTypeReference ) ) (otherlv_11= ',' ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) ) )* )? otherlv_13= '{' ( (lv_members_14_0= ruleMember ) )* otherlv_15= '}'
            {
            otherlv_0=(Token)match(input,37,FOLLOW_37_in_ruleDataType3577); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getDataTypeAccess().getDataKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1552:1: ( (lv_name_1_0= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1553:1: (lv_name_1_0= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1553:1: (lv_name_1_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1554:3: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleDataType3594); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(lv_name_1_0, grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); 
              		
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getDataTypeRule());
              	        }
                     		setWithLastConsumed(
                     			current, 
                     			"name",
                      		lv_name_1_0, 
                      		"ID");
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1570:2: (otherlv_2= '<' ( (lv_typeParameters_3_0= ruleJvmTypeParameter ) ) (otherlv_4= ',' ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) ) )* otherlv_6= '>' )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==34) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1570:4: otherlv_2= '<' ( (lv_typeParameters_3_0= ruleJvmTypeParameter ) ) (otherlv_4= ',' ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) ) )* otherlv_6= '>'
                    {
                    otherlv_2=(Token)match(input,34,FOLLOW_34_in_ruleDataType3612); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_2, grammarAccess.getDataTypeAccess().getLessThanSignKeyword_2_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1574:1: ( (lv_typeParameters_3_0= ruleJvmTypeParameter ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1575:1: (lv_typeParameters_3_0= ruleJvmTypeParameter )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1575:1: (lv_typeParameters_3_0= ruleJvmTypeParameter )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1576:3: lv_typeParameters_3_0= ruleJvmTypeParameter
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getDataTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmTypeParameter_in_ruleDataType3633);
                    lv_typeParameters_3_0=ruleJvmTypeParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getDataTypeRule());
                      	        }
                             		add(
                             			current, 
                             			"typeParameters",
                              		lv_typeParameters_3_0, 
                              		"JvmTypeParameter");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1592:2: (otherlv_4= ',' ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) ) )*
                    loop24:
                    do {
                        int alt24=2;
                        int LA24_0 = input.LA(1);

                        if ( (LA24_0==26) ) {
                            alt24=1;
                        }


                        switch (alt24) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1592:4: otherlv_4= ',' ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) )
                    	    {
                    	    otherlv_4=(Token)match(input,26,FOLLOW_26_in_ruleDataType3646); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_4, grammarAccess.getDataTypeAccess().getCommaKeyword_2_2_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1596:1: ( (lv_typeParameters_5_0= ruleJvmTypeParameter ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1597:1: (lv_typeParameters_5_0= ruleJvmTypeParameter )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1597:1: (lv_typeParameters_5_0= ruleJvmTypeParameter )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1598:3: lv_typeParameters_5_0= ruleJvmTypeParameter
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getDataTypeAccess().getTypeParametersJvmTypeParameterParserRuleCall_2_2_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleJvmTypeParameter_in_ruleDataType3667);
                    	    lv_typeParameters_5_0=ruleJvmTypeParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getDataTypeRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"typeParameters",
                    	              		lv_typeParameters_5_0, 
                    	              		"JvmTypeParameter");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);

                    otherlv_6=(Token)match(input,31,FOLLOW_31_in_ruleDataType3681); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_6, grammarAccess.getDataTypeAccess().getGreaterThanSignKeyword_2_3());
                          
                    }

                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1618:3: (otherlv_7= 'extends' ( (lv_extends_8_0= ruleJvmParameterizedTypeReference ) ) )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==38) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1618:5: otherlv_7= 'extends' ( (lv_extends_8_0= ruleJvmParameterizedTypeReference ) )
                    {
                    otherlv_7=(Token)match(input,38,FOLLOW_38_in_ruleDataType3696); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_7, grammarAccess.getDataTypeAccess().getExtendsKeyword_3_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1622:1: ( (lv_extends_8_0= ruleJvmParameterizedTypeReference ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1623:1: (lv_extends_8_0= ruleJvmParameterizedTypeReference )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1623:1: (lv_extends_8_0= ruleJvmParameterizedTypeReference )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1624:3: lv_extends_8_0= ruleJvmParameterizedTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getDataTypeAccess().getExtendsJvmParameterizedTypeReferenceParserRuleCall_3_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmParameterizedTypeReference_in_ruleDataType3717);
                    lv_extends_8_0=ruleJvmParameterizedTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getDataTypeRule());
                      	        }
                             		set(
                             			current, 
                             			"extends",
                              		lv_extends_8_0, 
                              		"JvmParameterizedTypeReference");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1640:4: (otherlv_9= 'implements' ( (lv_implements_10_0= ruleJvmParameterizedTypeReference ) ) (otherlv_11= ',' ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) ) )* )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==39) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1640:6: otherlv_9= 'implements' ( (lv_implements_10_0= ruleJvmParameterizedTypeReference ) ) (otherlv_11= ',' ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) ) )*
                    {
                    otherlv_9=(Token)match(input,39,FOLLOW_39_in_ruleDataType3732); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_9, grammarAccess.getDataTypeAccess().getImplementsKeyword_4_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1644:1: ( (lv_implements_10_0= ruleJvmParameterizedTypeReference ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1645:1: (lv_implements_10_0= ruleJvmParameterizedTypeReference )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1645:1: (lv_implements_10_0= ruleJvmParameterizedTypeReference )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1646:3: lv_implements_10_0= ruleJvmParameterizedTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getDataTypeAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_4_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmParameterizedTypeReference_in_ruleDataType3753);
                    lv_implements_10_0=ruleJvmParameterizedTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getDataTypeRule());
                      	        }
                             		add(
                             			current, 
                             			"implements",
                              		lv_implements_10_0, 
                              		"JvmParameterizedTypeReference");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1662:2: (otherlv_11= ',' ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) ) )*
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==26) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1662:4: otherlv_11= ',' ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) )
                    	    {
                    	    otherlv_11=(Token)match(input,26,FOLLOW_26_in_ruleDataType3766); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_11, grammarAccess.getDataTypeAccess().getCommaKeyword_4_2_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1666:1: ( (lv_implements_12_0= ruleJvmParameterizedTypeReference ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1667:1: (lv_implements_12_0= ruleJvmParameterizedTypeReference )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1667:1: (lv_implements_12_0= ruleJvmParameterizedTypeReference )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1668:3: lv_implements_12_0= ruleJvmParameterizedTypeReference
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getDataTypeAccess().getImplementsJvmParameterizedTypeReferenceParserRuleCall_4_2_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleJvmParameterizedTypeReference_in_ruleDataType3787);
                    	    lv_implements_12_0=ruleJvmParameterizedTypeReference();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getDataTypeRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"implements",
                    	              		lv_implements_12_0, 
                    	              		"JvmParameterizedTypeReference");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_13=(Token)match(input,15,FOLLOW_15_in_ruleDataType3803); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_13, grammarAccess.getDataTypeAccess().getLeftCurlyBracketKeyword_5());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1688:1: ( (lv_members_14_0= ruleMember ) )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==RULE_ID||LA29_0==25||LA29_0==29||LA29_0==33) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1689:1: (lv_members_14_0= ruleMember )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1689:1: (lv_members_14_0= ruleMember )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1690:3: lv_members_14_0= ruleMember
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getDataTypeAccess().getMembersMemberParserRuleCall_6_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleMember_in_ruleDataType3824);
            	    lv_members_14_0=ruleMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getDataTypeRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"members",
            	              		lv_members_14_0, 
            	              		"Member");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);

            otherlv_15=(Token)match(input,16,FOLLOW_16_in_ruleDataType3837); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_15, grammarAccess.getDataTypeAccess().getRightCurlyBracketKeyword_7());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDataType"


    // $ANTLR start "entryRuleMember"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1718:1: entryRuleMember returns [EObject current=null] : iv_ruleMember= ruleMember EOF ;
    public final EObject entryRuleMember() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMember = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1719:2: (iv_ruleMember= ruleMember EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1720:2: iv_ruleMember= ruleMember EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMemberRule()); 
            }
            pushFollow(FOLLOW_ruleMember_in_entryRuleMember3873);
            iv_ruleMember=ruleMember();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMember; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleMember3883); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMember"


    // $ANTLR start "ruleMember"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1727:1: ruleMember returns [EObject current=null] : (this_PropertyDeclaration_0= rulePropertyDeclaration | this_MethodDeclaration_1= ruleMethodDeclaration ) ;
    public final EObject ruleMember() throws RecognitionException {
        EObject current = null;

        EObject this_PropertyDeclaration_0 = null;

        EObject this_MethodDeclaration_1 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1730:28: ( (this_PropertyDeclaration_0= rulePropertyDeclaration | this_MethodDeclaration_1= ruleMethodDeclaration ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1731:1: (this_PropertyDeclaration_0= rulePropertyDeclaration | this_MethodDeclaration_1= ruleMethodDeclaration )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1731:1: (this_PropertyDeclaration_0= rulePropertyDeclaration | this_MethodDeclaration_1= ruleMethodDeclaration )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==RULE_ID||LA30_0==25||LA30_0==33) ) {
                alt30=1;
            }
            else if ( (LA30_0==29) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1732:5: this_PropertyDeclaration_0= rulePropertyDeclaration
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getMemberAccess().getPropertyDeclarationParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_rulePropertyDeclaration_in_ruleMember3930);
                    this_PropertyDeclaration_0=rulePropertyDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_PropertyDeclaration_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1742:5: this_MethodDeclaration_1= ruleMethodDeclaration
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getMemberAccess().getMethodDeclarationParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleMethodDeclaration_in_ruleMember3957);
                    this_MethodDeclaration_1=ruleMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_MethodDeclaration_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMember"


    // $ANTLR start "entryRulePropertyDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1758:1: entryRulePropertyDeclaration returns [EObject current=null] : iv_rulePropertyDeclaration= rulePropertyDeclaration EOF ;
    public final EObject entryRulePropertyDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1759:2: (iv_rulePropertyDeclaration= rulePropertyDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1760:2: iv_rulePropertyDeclaration= rulePropertyDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyDeclarationRule()); 
            }
            pushFollow(FOLLOW_rulePropertyDeclaration_in_entryRulePropertyDeclaration3992);
            iv_rulePropertyDeclaration=rulePropertyDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePropertyDeclaration4002); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePropertyDeclaration"


    // $ANTLR start "rulePropertyDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1767:1: rulePropertyDeclaration returns [EObject current=null] : ( ( (lv_type_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '=' ( (lv_initialValue_3_0= ruleXExpression ) ) )? ) ;
    public final EObject rulePropertyDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        EObject lv_type_0_0 = null;

        EObject lv_initialValue_3_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1770:28: ( ( ( (lv_type_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '=' ( (lv_initialValue_3_0= ruleXExpression ) ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1771:1: ( ( (lv_type_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '=' ( (lv_initialValue_3_0= ruleXExpression ) ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1771:1: ( ( (lv_type_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '=' ( (lv_initialValue_3_0= ruleXExpression ) ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1771:2: ( (lv_type_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= RULE_ID ) ) (otherlv_2= '=' ( (lv_initialValue_3_0= ruleXExpression ) ) )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1771:2: ( (lv_type_0_0= ruleJvmTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1772:1: (lv_type_0_0= ruleJvmTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1772:1: (lv_type_0_0= ruleJvmTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1773:3: lv_type_0_0= ruleJvmTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getTypeJvmTypeReferenceParserRuleCall_0_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_rulePropertyDeclaration4048);
            lv_type_0_0=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getPropertyDeclarationRule());
              	        }
                     		set(
                     			current, 
                     			"type",
                      		lv_type_0_0, 
                      		"JvmTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1789:2: ( (lv_name_1_0= RULE_ID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1790:1: (lv_name_1_0= RULE_ID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1790:1: (lv_name_1_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1791:3: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_rulePropertyDeclaration4065); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(lv_name_1_0, grammarAccess.getPropertyDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
              		
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getPropertyDeclarationRule());
              	        }
                     		setWithLastConsumed(
                     			current, 
                     			"name",
                      		lv_name_1_0, 
                      		"ID");
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1807:2: (otherlv_2= '=' ( (lv_initialValue_3_0= ruleXExpression ) ) )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==40) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1807:4: otherlv_2= '=' ( (lv_initialValue_3_0= ruleXExpression ) )
                    {
                    otherlv_2=(Token)match(input,40,FOLLOW_40_in_rulePropertyDeclaration4083); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_2, grammarAccess.getPropertyDeclarationAccess().getEqualsSignKeyword_2_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1811:1: ( (lv_initialValue_3_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1812:1: (lv_initialValue_3_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1812:1: (lv_initialValue_3_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1813:3: lv_initialValue_3_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getInitialValueXExpressionParserRuleCall_2_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_rulePropertyDeclaration4104);
                    lv_initialValue_3_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getPropertyDeclarationRule());
                      	        }
                             		set(
                             			current, 
                             			"initialValue",
                              		lv_initialValue_3_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePropertyDeclaration"


    // $ANTLR start "entryRuleXAssignment"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1837:1: entryRuleXAssignment returns [EObject current=null] : iv_ruleXAssignment= ruleXAssignment EOF ;
    public final EObject entryRuleXAssignment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXAssignment = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1838:2: (iv_ruleXAssignment= ruleXAssignment EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1839:2: iv_ruleXAssignment= ruleXAssignment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXAssignmentRule()); 
            }
            pushFollow(FOLLOW_ruleXAssignment_in_entryRuleXAssignment4142);
            iv_ruleXAssignment=ruleXAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXAssignment; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXAssignment4152); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXAssignment"


    // $ANTLR start "ruleXAssignment"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1846:1: ruleXAssignment returns [EObject current=null] : ( ( () ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ( (lv_value_3_0= ruleXAssignment ) ) ) | (this_XOrExpression_4= ruleXOrExpression ( ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) ) )? ) ) ;
    public final EObject ruleXAssignment() throws RecognitionException {
        EObject current = null;

        EObject lv_value_3_0 = null;

        EObject this_XOrExpression_4 = null;

        EObject lv_rightOperand_7_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1849:28: ( ( ( () ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ( (lv_value_3_0= ruleXAssignment ) ) ) | (this_XOrExpression_4= ruleXOrExpression ( ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) ) )? ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1850:1: ( ( () ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ( (lv_value_3_0= ruleXAssignment ) ) ) | (this_XOrExpression_4= ruleXOrExpression ( ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) ) )? ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1850:1: ( ( () ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ( (lv_value_3_0= ruleXAssignment ) ) ) | (this_XOrExpression_4= ruleXOrExpression ( ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) ) )? ) )
            int alt33=2;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                int LA33_1 = input.LA(2);

                if ( (LA33_1==40) ) {
                    alt33=1;
                }
                else if ( (LA33_1==EOF||(LA33_1>=RULE_ID && LA33_1<=RULE_DECIMAL)||(LA33_1>=15 && LA33_1<=16)||(LA33_1>=20 && LA33_1<=22)||(LA33_1>=24 && LA33_1<=36)||LA33_1==38||(LA33_1>=41 && LA33_1<=68)||(LA33_1>=70 && LA33_1<=94)) ) {
                    alt33=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 1, input);

                    throw nvae;
                }
                }
                break;
            case 38:
                {
                int LA33_2 = input.LA(2);

                if ( (LA33_2==EOF||(LA33_2>=RULE_ID && LA33_2<=RULE_DECIMAL)||(LA33_2>=15 && LA33_2<=16)||(LA33_2>=20 && LA33_2<=22)||(LA33_2>=24 && LA33_2<=36)||LA33_2==38||(LA33_2>=41 && LA33_2<=68)||(LA33_2>=70 && LA33_2<=94)) ) {
                    alt33=2;
                }
                else if ( (LA33_2==40) ) {
                    alt33=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 2, input);

                    throw nvae;
                }
                }
                break;
            case 81:
                {
                int LA33_3 = input.LA(2);

                if ( (LA33_3==EOF||(LA33_3>=RULE_ID && LA33_3<=RULE_DECIMAL)||(LA33_3>=15 && LA33_3<=16)||(LA33_3>=20 && LA33_3<=22)||(LA33_3>=24 && LA33_3<=36)||LA33_3==38||(LA33_3>=41 && LA33_3<=68)||(LA33_3>=70 && LA33_3<=94)) ) {
                    alt33=2;
                }
                else if ( (LA33_3==40) ) {
                    alt33=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 3, input);

                    throw nvae;
                }
                }
                break;
            case 82:
                {
                int LA33_4 = input.LA(2);

                if ( (LA33_4==EOF||(LA33_4>=RULE_ID && LA33_4<=RULE_DECIMAL)||(LA33_4>=15 && LA33_4<=16)||(LA33_4>=20 && LA33_4<=22)||(LA33_4>=24 && LA33_4<=36)||LA33_4==38||(LA33_4>=41 && LA33_4<=68)||(LA33_4>=70 && LA33_4<=94)) ) {
                    alt33=2;
                }
                else if ( (LA33_4==40) ) {
                    alt33=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 4, input);

                    throw nvae;
                }
                }
                break;
            case 83:
                {
                int LA33_5 = input.LA(2);

                if ( (LA33_5==40) ) {
                    alt33=1;
                }
                else if ( (LA33_5==EOF||(LA33_5>=RULE_ID && LA33_5<=RULE_DECIMAL)||(LA33_5>=15 && LA33_5<=16)||(LA33_5>=20 && LA33_5<=22)||(LA33_5>=24 && LA33_5<=36)||LA33_5==38||(LA33_5>=41 && LA33_5<=68)||(LA33_5>=70 && LA33_5<=94)) ) {
                    alt33=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 5, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
            case RULE_HEX:
            case RULE_INT:
            case RULE_DECIMAL:
            case 15:
            case 24:
            case 25:
            case 34:
            case 54:
            case 55:
            case 60:
            case 66:
            case 67:
            case 71:
            case 73:
            case 76:
            case 77:
            case 78:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 93:
                {
                alt33=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }

            switch (alt33) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1850:2: ( () ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ( (lv_value_3_0= ruleXAssignment ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1850:2: ( () ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ( (lv_value_3_0= ruleXAssignment ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1850:3: () ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ( (lv_value_3_0= ruleXAssignment ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1850:3: ()
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1851:5: 
                    {
                    if ( state.backtracking==0 ) {

                              current = forceCreateModelElement(
                                  grammarAccess.getXAssignmentAccess().getXAssignmentAction_0_0(),
                                  current);
                          
                    }

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1856:2: ( ( ruleFeatureCallID ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1857:1: ( ruleFeatureCallID )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1857:1: ( ruleFeatureCallID )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1858:3: ruleFeatureCallID
                    {
                    if ( state.backtracking==0 ) {

                      			if (current==null) {
                      	            current = createModelElement(grammarAccess.getXAssignmentRule());
                      	        }
                              
                    }
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFeatureCallID_in_ruleXAssignment4210);
                    ruleFeatureCallID();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXAssignmentAccess().getOpSingleAssignParserRuleCall_0_2()); 
                          
                    }
                    pushFollow(FOLLOW_ruleOpSingleAssign_in_ruleXAssignment4226);
                    ruleOpSingleAssign();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              afterParserOrEnumRuleCall();
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1879:1: ( (lv_value_3_0= ruleXAssignment ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1880:1: (lv_value_3_0= ruleXAssignment )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1880:1: (lv_value_3_0= ruleXAssignment )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1881:3: lv_value_3_0= ruleXAssignment
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXAssignmentAccess().getValueXAssignmentParserRuleCall_0_3_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXAssignment_in_ruleXAssignment4246);
                    lv_value_3_0=ruleXAssignment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXAssignmentRule());
                      	        }
                             		set(
                             			current, 
                             			"value",
                              		lv_value_3_0, 
                              		"XAssignment");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1898:6: (this_XOrExpression_4= ruleXOrExpression ( ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) ) )? )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1898:6: (this_XOrExpression_4= ruleXOrExpression ( ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) ) )? )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1899:5: this_XOrExpression_4= ruleXOrExpression ( ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) ) )?
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXAssignmentAccess().getXOrExpressionParserRuleCall_1_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXOrExpression_in_ruleXAssignment4276);
                    this_XOrExpression_4=ruleXOrExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XOrExpression_4; 
                              afterParserOrEnumRuleCall();
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1907:1: ( ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) ) )?
                    int alt32=2;
                    alt32 = dfa32.predict(input);
                    switch (alt32) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1907:2: ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1907:2: ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1907:3: ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1912:6: ( () ( ( ruleOpMultiAssign ) ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1912:7: () ( ( ruleOpMultiAssign ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1912:7: ()
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1913:5: 
                            {
                            if ( state.backtracking==0 ) {

                                      current = forceCreateModelElementAndSet(
                                          grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
                                          current);
                                  
                            }

                            }

                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1918:2: ( ( ruleOpMultiAssign ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1919:1: ( ruleOpMultiAssign )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1919:1: ( ruleOpMultiAssign )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1920:3: ruleOpMultiAssign
                            {
                            if ( state.backtracking==0 ) {

                              			if (current==null) {
                              	            current = createModelElement(grammarAccess.getXAssignmentRule());
                              	        }
                                      
                            }
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleOpMultiAssign_in_ruleXAssignment4329);
                            ruleOpMultiAssign();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                               
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }


                            }


                            }

                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1933:4: ( (lv_rightOperand_7_0= ruleXAssignment ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1934:1: (lv_rightOperand_7_0= ruleXAssignment )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1934:1: (lv_rightOperand_7_0= ruleXAssignment )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1935:3: lv_rightOperand_7_0= ruleXAssignment
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXAssignmentAccess().getRightOperandXAssignmentParserRuleCall_1_1_1_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleXAssignment_in_ruleXAssignment4352);
                            lv_rightOperand_7_0=ruleXAssignment();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXAssignmentRule());
                              	        }
                                     		set(
                                     			current, 
                                     			"rightOperand",
                                      		lv_rightOperand_7_0, 
                                      		"XAssignment");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXAssignment"


    // $ANTLR start "entryRuleOpSingleAssign"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1959:1: entryRuleOpSingleAssign returns [String current=null] : iv_ruleOpSingleAssign= ruleOpSingleAssign EOF ;
    public final String entryRuleOpSingleAssign() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpSingleAssign = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1960:2: (iv_ruleOpSingleAssign= ruleOpSingleAssign EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1961:2: iv_ruleOpSingleAssign= ruleOpSingleAssign EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpSingleAssignRule()); 
            }
            pushFollow(FOLLOW_ruleOpSingleAssign_in_entryRuleOpSingleAssign4392);
            iv_ruleOpSingleAssign=ruleOpSingleAssign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpSingleAssign.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpSingleAssign4403); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpSingleAssign"


    // $ANTLR start "ruleOpSingleAssign"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1968:1: ruleOpSingleAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= '=' ;
    public final AntlrDatatypeRuleToken ruleOpSingleAssign() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1971:28: (kw= '=' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1973:2: kw= '='
            {
            kw=(Token)match(input,40,FOLLOW_40_in_ruleOpSingleAssign4440); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                      current.merge(kw);
                      newLeafNode(kw, grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); 
                  
            }

            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpSingleAssign"


    // $ANTLR start "entryRuleOpMultiAssign"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1986:1: entryRuleOpMultiAssign returns [String current=null] : iv_ruleOpMultiAssign= ruleOpMultiAssign EOF ;
    public final String entryRuleOpMultiAssign() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpMultiAssign = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1987:2: (iv_ruleOpMultiAssign= ruleOpMultiAssign EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1988:2: iv_ruleOpMultiAssign= ruleOpMultiAssign EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpMultiAssignRule()); 
            }
            pushFollow(FOLLOW_ruleOpMultiAssign_in_entryRuleOpMultiAssign4480);
            iv_ruleOpMultiAssign=ruleOpMultiAssign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpMultiAssign.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpMultiAssign4491); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpMultiAssign"


    // $ANTLR start "ruleOpMultiAssign"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1995:1: ruleOpMultiAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '+=' | kw= '-=' | kw= '*=' | kw= '/=' | kw= '%=' | (kw= '<' kw= '<' kw= '=' ) | (kw= '>' (kw= '>' )? kw= '>=' ) ) ;
    public final AntlrDatatypeRuleToken ruleOpMultiAssign() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1998:28: ( (kw= '+=' | kw= '-=' | kw= '*=' | kw= '/=' | kw= '%=' | (kw= '<' kw= '<' kw= '=' ) | (kw= '>' (kw= '>' )? kw= '>=' ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1999:1: (kw= '+=' | kw= '-=' | kw= '*=' | kw= '/=' | kw= '%=' | (kw= '<' kw= '<' kw= '=' ) | (kw= '>' (kw= '>' )? kw= '>=' ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1999:1: (kw= '+=' | kw= '-=' | kw= '*=' | kw= '/=' | kw= '%=' | (kw= '<' kw= '<' kw= '=' ) | (kw= '>' (kw= '>' )? kw= '>=' ) )
            int alt35=7;
            switch ( input.LA(1) ) {
            case 41:
                {
                alt35=1;
                }
                break;
            case 42:
                {
                alt35=2;
                }
                break;
            case 43:
                {
                alt35=3;
                }
                break;
            case 44:
                {
                alt35=4;
                }
                break;
            case 45:
                {
                alt35=5;
                }
                break;
            case 34:
                {
                alt35=6;
                }
                break;
            case 31:
                {
                alt35=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2000:2: kw= '+='
                    {
                    kw=(Token)match(input,41,FOLLOW_41_in_ruleOpMultiAssign4529); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2007:2: kw= '-='
                    {
                    kw=(Token)match(input,42,FOLLOW_42_in_ruleOpMultiAssign4548); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2014:2: kw= '*='
                    {
                    kw=(Token)match(input,43,FOLLOW_43_in_ruleOpMultiAssign4567); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2021:2: kw= '/='
                    {
                    kw=(Token)match(input,44,FOLLOW_44_in_ruleOpMultiAssign4586); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2028:2: kw= '%='
                    {
                    kw=(Token)match(input,45,FOLLOW_45_in_ruleOpMultiAssign4605); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2034:6: (kw= '<' kw= '<' kw= '=' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2034:6: (kw= '<' kw= '<' kw= '=' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2035:2: kw= '<' kw= '<' kw= '='
                    {
                    kw=(Token)match(input,34,FOLLOW_34_in_ruleOpMultiAssign4625); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_0()); 
                          
                    }
                    kw=(Token)match(input,34,FOLLOW_34_in_ruleOpMultiAssign4638); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_1()); 
                          
                    }
                    kw=(Token)match(input,40,FOLLOW_40_in_ruleOpMultiAssign4651); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getEqualsSignKeyword_5_2()); 
                          
                    }

                    }


                    }
                    break;
                case 7 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2053:6: (kw= '>' (kw= '>' )? kw= '>=' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2053:6: (kw= '>' (kw= '>' )? kw= '>=' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2054:2: kw= '>' (kw= '>' )? kw= '>='
                    {
                    kw=(Token)match(input,31,FOLLOW_31_in_ruleOpMultiAssign4672); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_0()); 
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2059:1: (kw= '>' )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==31) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2060:2: kw= '>'
                            {
                            kw=(Token)match(input,31,FOLLOW_31_in_ruleOpMultiAssign4686); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      current.merge(kw);
                                      newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_1()); 
                                  
                            }

                            }
                            break;

                    }

                    kw=(Token)match(input,46,FOLLOW_46_in_ruleOpMultiAssign4701); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignEqualsSignKeyword_6_2()); 
                          
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpMultiAssign"


    // $ANTLR start "entryRuleXOrExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2079:1: entryRuleXOrExpression returns [EObject current=null] : iv_ruleXOrExpression= ruleXOrExpression EOF ;
    public final EObject entryRuleXOrExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXOrExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2080:2: (iv_ruleXOrExpression= ruleXOrExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2081:2: iv_ruleXOrExpression= ruleXOrExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXOrExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXOrExpression_in_entryRuleXOrExpression4742);
            iv_ruleXOrExpression=ruleXOrExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXOrExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXOrExpression4752); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXOrExpression"


    // $ANTLR start "ruleXOrExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2088:1: ruleXOrExpression returns [EObject current=null] : (this_XAndExpression_0= ruleXAndExpression ( ( ( ( () ( ( ruleOpOr ) ) ) )=> ( () ( ( ruleOpOr ) ) ) ) ( (lv_rightOperand_3_0= ruleXAndExpression ) ) )* ) ;
    public final EObject ruleXOrExpression() throws RecognitionException {
        EObject current = null;

        EObject this_XAndExpression_0 = null;

        EObject lv_rightOperand_3_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2091:28: ( (this_XAndExpression_0= ruleXAndExpression ( ( ( ( () ( ( ruleOpOr ) ) ) )=> ( () ( ( ruleOpOr ) ) ) ) ( (lv_rightOperand_3_0= ruleXAndExpression ) ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2092:1: (this_XAndExpression_0= ruleXAndExpression ( ( ( ( () ( ( ruleOpOr ) ) ) )=> ( () ( ( ruleOpOr ) ) ) ) ( (lv_rightOperand_3_0= ruleXAndExpression ) ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2092:1: (this_XAndExpression_0= ruleXAndExpression ( ( ( ( () ( ( ruleOpOr ) ) ) )=> ( () ( ( ruleOpOr ) ) ) ) ( (lv_rightOperand_3_0= ruleXAndExpression ) ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2093:5: this_XAndExpression_0= ruleXAndExpression ( ( ( ( () ( ( ruleOpOr ) ) ) )=> ( () ( ( ruleOpOr ) ) ) ) ( (lv_rightOperand_3_0= ruleXAndExpression ) ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXOrExpressionAccess().getXAndExpressionParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXAndExpression_in_ruleXOrExpression4799);
            this_XAndExpression_0=ruleXAndExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XAndExpression_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2101:1: ( ( ( ( () ( ( ruleOpOr ) ) ) )=> ( () ( ( ruleOpOr ) ) ) ) ( (lv_rightOperand_3_0= ruleXAndExpression ) ) )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==47) ) {
                    int LA36_2 = input.LA(2);

                    if ( (synpred6_InternalAqua()) ) {
                        alt36=1;
                    }


                }


                switch (alt36) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2101:2: ( ( ( () ( ( ruleOpOr ) ) ) )=> ( () ( ( ruleOpOr ) ) ) ) ( (lv_rightOperand_3_0= ruleXAndExpression ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2101:2: ( ( ( () ( ( ruleOpOr ) ) ) )=> ( () ( ( ruleOpOr ) ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2101:3: ( ( () ( ( ruleOpOr ) ) ) )=> ( () ( ( ruleOpOr ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2106:6: ( () ( ( ruleOpOr ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2106:7: () ( ( ruleOpOr ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2106:7: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2107:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2112:2: ( ( ruleOpOr ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2113:1: ( ruleOpOr )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2113:1: ( ruleOpOr )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2114:3: ruleOpOr
            	    {
            	    if ( state.backtracking==0 ) {

            	      			if (current==null) {
            	      	            current = createModelElement(grammarAccess.getXOrExpressionRule());
            	      	        }
            	              
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXOrExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleOpOr_in_ruleXOrExpression4852);
            	    ruleOpOr();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2127:4: ( (lv_rightOperand_3_0= ruleXAndExpression ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2128:1: (lv_rightOperand_3_0= ruleXAndExpression )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2128:1: (lv_rightOperand_3_0= ruleXAndExpression )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2129:3: lv_rightOperand_3_0= ruleXAndExpression
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXOrExpressionAccess().getRightOperandXAndExpressionParserRuleCall_1_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXAndExpression_in_ruleXOrExpression4875);
            	    lv_rightOperand_3_0=ruleXAndExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXOrExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"rightOperand",
            	              		lv_rightOperand_3_0, 
            	              		"XAndExpression");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXOrExpression"


    // $ANTLR start "entryRuleOpOr"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2153:1: entryRuleOpOr returns [String current=null] : iv_ruleOpOr= ruleOpOr EOF ;
    public final String entryRuleOpOr() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpOr = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2154:2: (iv_ruleOpOr= ruleOpOr EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2155:2: iv_ruleOpOr= ruleOpOr EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpOrRule()); 
            }
            pushFollow(FOLLOW_ruleOpOr_in_entryRuleOpOr4914);
            iv_ruleOpOr=ruleOpOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpOr.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpOr4925); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpOr"


    // $ANTLR start "ruleOpOr"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2162:1: ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= '||' ;
    public final AntlrDatatypeRuleToken ruleOpOr() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2165:28: (kw= '||' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2167:2: kw= '||'
            {
            kw=(Token)match(input,47,FOLLOW_47_in_ruleOpOr4962); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                      current.merge(kw);
                      newLeafNode(kw, grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); 
                  
            }

            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpOr"


    // $ANTLR start "entryRuleXAndExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2180:1: entryRuleXAndExpression returns [EObject current=null] : iv_ruleXAndExpression= ruleXAndExpression EOF ;
    public final EObject entryRuleXAndExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXAndExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2181:2: (iv_ruleXAndExpression= ruleXAndExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2182:2: iv_ruleXAndExpression= ruleXAndExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXAndExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXAndExpression_in_entryRuleXAndExpression5001);
            iv_ruleXAndExpression=ruleXAndExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXAndExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXAndExpression5011); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXAndExpression"


    // $ANTLR start "ruleXAndExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2189:1: ruleXAndExpression returns [EObject current=null] : (this_XEqualityExpression_0= ruleXEqualityExpression ( ( ( ( () ( ( ruleOpAnd ) ) ) )=> ( () ( ( ruleOpAnd ) ) ) ) ( (lv_rightOperand_3_0= ruleXEqualityExpression ) ) )* ) ;
    public final EObject ruleXAndExpression() throws RecognitionException {
        EObject current = null;

        EObject this_XEqualityExpression_0 = null;

        EObject lv_rightOperand_3_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2192:28: ( (this_XEqualityExpression_0= ruleXEqualityExpression ( ( ( ( () ( ( ruleOpAnd ) ) ) )=> ( () ( ( ruleOpAnd ) ) ) ) ( (lv_rightOperand_3_0= ruleXEqualityExpression ) ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2193:1: (this_XEqualityExpression_0= ruleXEqualityExpression ( ( ( ( () ( ( ruleOpAnd ) ) ) )=> ( () ( ( ruleOpAnd ) ) ) ) ( (lv_rightOperand_3_0= ruleXEqualityExpression ) ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2193:1: (this_XEqualityExpression_0= ruleXEqualityExpression ( ( ( ( () ( ( ruleOpAnd ) ) ) )=> ( () ( ( ruleOpAnd ) ) ) ) ( (lv_rightOperand_3_0= ruleXEqualityExpression ) ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2194:5: this_XEqualityExpression_0= ruleXEqualityExpression ( ( ( ( () ( ( ruleOpAnd ) ) ) )=> ( () ( ( ruleOpAnd ) ) ) ) ( (lv_rightOperand_3_0= ruleXEqualityExpression ) ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXAndExpressionAccess().getXEqualityExpressionParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXEqualityExpression_in_ruleXAndExpression5058);
            this_XEqualityExpression_0=ruleXEqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XEqualityExpression_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2202:1: ( ( ( ( () ( ( ruleOpAnd ) ) ) )=> ( () ( ( ruleOpAnd ) ) ) ) ( (lv_rightOperand_3_0= ruleXEqualityExpression ) ) )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==48) ) {
                    int LA37_2 = input.LA(2);

                    if ( (synpred7_InternalAqua()) ) {
                        alt37=1;
                    }


                }


                switch (alt37) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2202:2: ( ( ( () ( ( ruleOpAnd ) ) ) )=> ( () ( ( ruleOpAnd ) ) ) ) ( (lv_rightOperand_3_0= ruleXEqualityExpression ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2202:2: ( ( ( () ( ( ruleOpAnd ) ) ) )=> ( () ( ( ruleOpAnd ) ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2202:3: ( ( () ( ( ruleOpAnd ) ) ) )=> ( () ( ( ruleOpAnd ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2207:6: ( () ( ( ruleOpAnd ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2207:7: () ( ( ruleOpAnd ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2207:7: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2208:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2213:2: ( ( ruleOpAnd ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2214:1: ( ruleOpAnd )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2214:1: ( ruleOpAnd )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2215:3: ruleOpAnd
            	    {
            	    if ( state.backtracking==0 ) {

            	      			if (current==null) {
            	      	            current = createModelElement(grammarAccess.getXAndExpressionRule());
            	      	        }
            	              
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXAndExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleOpAnd_in_ruleXAndExpression5111);
            	    ruleOpAnd();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2228:4: ( (lv_rightOperand_3_0= ruleXEqualityExpression ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2229:1: (lv_rightOperand_3_0= ruleXEqualityExpression )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2229:1: (lv_rightOperand_3_0= ruleXEqualityExpression )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2230:3: lv_rightOperand_3_0= ruleXEqualityExpression
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXAndExpressionAccess().getRightOperandXEqualityExpressionParserRuleCall_1_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXEqualityExpression_in_ruleXAndExpression5134);
            	    lv_rightOperand_3_0=ruleXEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXAndExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"rightOperand",
            	              		lv_rightOperand_3_0, 
            	              		"XEqualityExpression");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXAndExpression"


    // $ANTLR start "entryRuleOpAnd"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2254:1: entryRuleOpAnd returns [String current=null] : iv_ruleOpAnd= ruleOpAnd EOF ;
    public final String entryRuleOpAnd() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpAnd = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2255:2: (iv_ruleOpAnd= ruleOpAnd EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2256:2: iv_ruleOpAnd= ruleOpAnd EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpAndRule()); 
            }
            pushFollow(FOLLOW_ruleOpAnd_in_entryRuleOpAnd5173);
            iv_ruleOpAnd=ruleOpAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpAnd.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpAnd5184); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpAnd"


    // $ANTLR start "ruleOpAnd"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2263:1: ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= '&&' ;
    public final AntlrDatatypeRuleToken ruleOpAnd() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2266:28: (kw= '&&' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2268:2: kw= '&&'
            {
            kw=(Token)match(input,48,FOLLOW_48_in_ruleOpAnd5221); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                      current.merge(kw);
                      newLeafNode(kw, grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); 
                  
            }

            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpAnd"


    // $ANTLR start "entryRuleXEqualityExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2281:1: entryRuleXEqualityExpression returns [EObject current=null] : iv_ruleXEqualityExpression= ruleXEqualityExpression EOF ;
    public final EObject entryRuleXEqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXEqualityExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2282:2: (iv_ruleXEqualityExpression= ruleXEqualityExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2283:2: iv_ruleXEqualityExpression= ruleXEqualityExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXEqualityExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXEqualityExpression_in_entryRuleXEqualityExpression5260);
            iv_ruleXEqualityExpression=ruleXEqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXEqualityExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXEqualityExpression5270); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXEqualityExpression"


    // $ANTLR start "ruleXEqualityExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2290:1: ruleXEqualityExpression returns [EObject current=null] : (this_XRelationalExpression_0= ruleXRelationalExpression ( ( ( ( () ( ( ruleOpEquality ) ) ) )=> ( () ( ( ruleOpEquality ) ) ) ) ( (lv_rightOperand_3_0= ruleXRelationalExpression ) ) )* ) ;
    public final EObject ruleXEqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject this_XRelationalExpression_0 = null;

        EObject lv_rightOperand_3_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2293:28: ( (this_XRelationalExpression_0= ruleXRelationalExpression ( ( ( ( () ( ( ruleOpEquality ) ) ) )=> ( () ( ( ruleOpEquality ) ) ) ) ( (lv_rightOperand_3_0= ruleXRelationalExpression ) ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2294:1: (this_XRelationalExpression_0= ruleXRelationalExpression ( ( ( ( () ( ( ruleOpEquality ) ) ) )=> ( () ( ( ruleOpEquality ) ) ) ) ( (lv_rightOperand_3_0= ruleXRelationalExpression ) ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2294:1: (this_XRelationalExpression_0= ruleXRelationalExpression ( ( ( ( () ( ( ruleOpEquality ) ) ) )=> ( () ( ( ruleOpEquality ) ) ) ) ( (lv_rightOperand_3_0= ruleXRelationalExpression ) ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2295:5: this_XRelationalExpression_0= ruleXRelationalExpression ( ( ( ( () ( ( ruleOpEquality ) ) ) )=> ( () ( ( ruleOpEquality ) ) ) ) ( (lv_rightOperand_3_0= ruleXRelationalExpression ) ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getXRelationalExpressionParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXRelationalExpression_in_ruleXEqualityExpression5317);
            this_XRelationalExpression_0=ruleXRelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XRelationalExpression_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2303:1: ( ( ( ( () ( ( ruleOpEquality ) ) ) )=> ( () ( ( ruleOpEquality ) ) ) ) ( (lv_rightOperand_3_0= ruleXRelationalExpression ) ) )*
            loop38:
            do {
                int alt38=2;
                switch ( input.LA(1) ) {
                case 49:
                    {
                    int LA38_2 = input.LA(2);

                    if ( (synpred8_InternalAqua()) ) {
                        alt38=1;
                    }


                    }
                    break;
                case 50:
                    {
                    int LA38_3 = input.LA(2);

                    if ( (synpred8_InternalAqua()) ) {
                        alt38=1;
                    }


                    }
                    break;
                case 51:
                    {
                    int LA38_4 = input.LA(2);

                    if ( (synpred8_InternalAqua()) ) {
                        alt38=1;
                    }


                    }
                    break;
                case 52:
                    {
                    int LA38_5 = input.LA(2);

                    if ( (synpred8_InternalAqua()) ) {
                        alt38=1;
                    }


                    }
                    break;

                }

                switch (alt38) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2303:2: ( ( ( () ( ( ruleOpEquality ) ) ) )=> ( () ( ( ruleOpEquality ) ) ) ) ( (lv_rightOperand_3_0= ruleXRelationalExpression ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2303:2: ( ( ( () ( ( ruleOpEquality ) ) ) )=> ( () ( ( ruleOpEquality ) ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2303:3: ( ( () ( ( ruleOpEquality ) ) ) )=> ( () ( ( ruleOpEquality ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2308:6: ( () ( ( ruleOpEquality ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2308:7: () ( ( ruleOpEquality ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2308:7: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2309:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2314:2: ( ( ruleOpEquality ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2315:1: ( ruleOpEquality )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2315:1: ( ruleOpEquality )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2316:3: ruleOpEquality
            	    {
            	    if ( state.backtracking==0 ) {

            	      			if (current==null) {
            	      	            current = createModelElement(grammarAccess.getXEqualityExpressionRule());
            	      	        }
            	              
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleOpEquality_in_ruleXEqualityExpression5370);
            	    ruleOpEquality();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2329:4: ( (lv_rightOperand_3_0= ruleXRelationalExpression ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2330:1: (lv_rightOperand_3_0= ruleXRelationalExpression )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2330:1: (lv_rightOperand_3_0= ruleXRelationalExpression )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2331:3: lv_rightOperand_3_0= ruleXRelationalExpression
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getRightOperandXRelationalExpressionParserRuleCall_1_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXRelationalExpression_in_ruleXEqualityExpression5393);
            	    lv_rightOperand_3_0=ruleXRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXEqualityExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"rightOperand",
            	              		lv_rightOperand_3_0, 
            	              		"XRelationalExpression");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXEqualityExpression"


    // $ANTLR start "entryRuleOpEquality"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2355:1: entryRuleOpEquality returns [String current=null] : iv_ruleOpEquality= ruleOpEquality EOF ;
    public final String entryRuleOpEquality() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpEquality = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2356:2: (iv_ruleOpEquality= ruleOpEquality EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2357:2: iv_ruleOpEquality= ruleOpEquality EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpEqualityRule()); 
            }
            pushFollow(FOLLOW_ruleOpEquality_in_entryRuleOpEquality5432);
            iv_ruleOpEquality=ruleOpEquality();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpEquality.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpEquality5443); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpEquality"


    // $ANTLR start "ruleOpEquality"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2364:1: ruleOpEquality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '==' | kw= '!=' | kw= '===' | kw= '!==' ) ;
    public final AntlrDatatypeRuleToken ruleOpEquality() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2367:28: ( (kw= '==' | kw= '!=' | kw= '===' | kw= '!==' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2368:1: (kw= '==' | kw= '!=' | kw= '===' | kw= '!==' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2368:1: (kw= '==' | kw= '!=' | kw= '===' | kw= '!==' )
            int alt39=4;
            switch ( input.LA(1) ) {
            case 49:
                {
                alt39=1;
                }
                break;
            case 50:
                {
                alt39=2;
                }
                break;
            case 51:
                {
                alt39=3;
                }
                break;
            case 52:
                {
                alt39=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2369:2: kw= '=='
                    {
                    kw=(Token)match(input,49,FOLLOW_49_in_ruleOpEquality5481); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2376:2: kw= '!='
                    {
                    kw=(Token)match(input,50,FOLLOW_50_in_ruleOpEquality5500); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2383:2: kw= '==='
                    {
                    kw=(Token)match(input,51,FOLLOW_51_in_ruleOpEquality5519); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignEqualsSignKeyword_2()); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2390:2: kw= '!=='
                    {
                    kw=(Token)match(input,52,FOLLOW_52_in_ruleOpEquality5538); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignEqualsSignKeyword_3()); 
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpEquality"


    // $ANTLR start "entryRuleXRelationalExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2403:1: entryRuleXRelationalExpression returns [EObject current=null] : iv_ruleXRelationalExpression= ruleXRelationalExpression EOF ;
    public final EObject entryRuleXRelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXRelationalExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2404:2: (iv_ruleXRelationalExpression= ruleXRelationalExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2405:2: iv_ruleXRelationalExpression= ruleXRelationalExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXRelationalExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXRelationalExpression_in_entryRuleXRelationalExpression5578);
            iv_ruleXRelationalExpression=ruleXRelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXRelationalExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXRelationalExpression5588); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXRelationalExpression"


    // $ANTLR start "ruleXRelationalExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2412:1: ruleXRelationalExpression returns [EObject current=null] : (this_XOtherOperatorExpression_0= ruleXOtherOperatorExpression ( ( ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) ) | ( ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) ) ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) ) ) )* ) ;
    public final EObject ruleXRelationalExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_XOtherOperatorExpression_0 = null;

        EObject lv_type_3_0 = null;

        EObject lv_rightOperand_6_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2415:28: ( (this_XOtherOperatorExpression_0= ruleXOtherOperatorExpression ( ( ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) ) | ( ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) ) ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) ) ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2416:1: (this_XOtherOperatorExpression_0= ruleXOtherOperatorExpression ( ( ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) ) | ( ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) ) ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) ) ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2416:1: (this_XOtherOperatorExpression_0= ruleXOtherOperatorExpression ( ( ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) ) | ( ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) ) ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) ) ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2417:5: this_XOtherOperatorExpression_0= ruleXOtherOperatorExpression ( ( ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) ) | ( ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) ) ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) ) ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getXOtherOperatorExpressionParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXOtherOperatorExpression_in_ruleXRelationalExpression5635);
            this_XOtherOperatorExpression_0=ruleXOtherOperatorExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XOtherOperatorExpression_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:1: ( ( ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) ) | ( ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) ) ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) ) ) )*
            loop40:
            do {
                int alt40=3;
                switch ( input.LA(1) ) {
                case 34:
                    {
                    int LA40_2 = input.LA(2);

                    if ( (synpred10_InternalAqua()) ) {
                        alt40=2;
                    }


                    }
                    break;
                case 31:
                    {
                    int LA40_3 = input.LA(2);

                    if ( (synpred10_InternalAqua()) ) {
                        alt40=2;
                    }


                    }
                    break;
                case 53:
                    {
                    int LA40_4 = input.LA(2);

                    if ( (synpred9_InternalAqua()) ) {
                        alt40=1;
                    }


                    }
                    break;
                case 46:
                    {
                    int LA40_5 = input.LA(2);

                    if ( (synpred10_InternalAqua()) ) {
                        alt40=2;
                    }


                    }
                    break;

                }

                switch (alt40) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:2: ( ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:2: ( ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:3: ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:3: ( ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:4: ( ( () 'instanceof' ) )=> ( () otherlv_2= 'instanceof' )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2427:5: ( () otherlv_2= 'instanceof' )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2427:6: () otherlv_2= 'instanceof'
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2427:6: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2428:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    otherlv_2=(Token)match(input,53,FOLLOW_53_in_ruleXRelationalExpression5671); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	          	newLeafNode(otherlv_2, grammarAccess.getXRelationalExpressionAccess().getInstanceofKeyword_1_0_0_0_1());
            	          
            	    }

            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2437:3: ( (lv_type_3_0= ruleJvmTypeReference ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2438:1: (lv_type_3_0= ruleJvmTypeReference )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2438:1: (lv_type_3_0= ruleJvmTypeReference )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2439:3: lv_type_3_0= ruleJvmTypeReference
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_0_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleXRelationalExpression5694);
            	    lv_type_3_0=ruleJvmTypeReference();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXRelationalExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"type",
            	              		lv_type_3_0, 
            	              		"JvmTypeReference");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:6: ( ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) ) ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:6: ( ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) ) ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:7: ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) ) ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:7: ( ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:8: ( ( () ( ( ruleOpCompare ) ) ) )=> ( () ( ( ruleOpCompare ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2461:6: ( () ( ( ruleOpCompare ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2461:7: () ( ( ruleOpCompare ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2461:7: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2462:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2467:2: ( ( ruleOpCompare ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2468:1: ( ruleOpCompare )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2468:1: ( ruleOpCompare )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2469:3: ruleOpCompare
            	    {
            	    if ( state.backtracking==0 ) {

            	      			if (current==null) {
            	      	            current = createModelElement(grammarAccess.getXRelationalExpressionRule());
            	      	        }
            	              
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleOpCompare_in_ruleXRelationalExpression5755);
            	    ruleOpCompare();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2482:4: ( (lv_rightOperand_6_0= ruleXOtherOperatorExpression ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2483:1: (lv_rightOperand_6_0= ruleXOtherOperatorExpression )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2483:1: (lv_rightOperand_6_0= ruleXOtherOperatorExpression )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2484:3: lv_rightOperand_6_0= ruleXOtherOperatorExpression
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXOtherOperatorExpression_in_ruleXRelationalExpression5778);
            	    lv_rightOperand_6_0=ruleXOtherOperatorExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXRelationalExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"rightOperand",
            	              		lv_rightOperand_6_0, 
            	              		"XOtherOperatorExpression");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXRelationalExpression"


    // $ANTLR start "entryRuleOpCompare"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2508:1: entryRuleOpCompare returns [String current=null] : iv_ruleOpCompare= ruleOpCompare EOF ;
    public final String entryRuleOpCompare() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpCompare = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2509:2: (iv_ruleOpCompare= ruleOpCompare EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2510:2: iv_ruleOpCompare= ruleOpCompare EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpCompareRule()); 
            }
            pushFollow(FOLLOW_ruleOpCompare_in_entryRuleOpCompare5818);
            iv_ruleOpCompare=ruleOpCompare();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpCompare.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpCompare5829); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpCompare"


    // $ANTLR start "ruleOpCompare"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2517:1: ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '>=' | (kw= '<' kw= '=' ) | kw= '>' | kw= '<' ) ;
    public final AntlrDatatypeRuleToken ruleOpCompare() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2520:28: ( (kw= '>=' | (kw= '<' kw= '=' ) | kw= '>' | kw= '<' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2521:1: (kw= '>=' | (kw= '<' kw= '=' ) | kw= '>' | kw= '<' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2521:1: (kw= '>=' | (kw= '<' kw= '=' ) | kw= '>' | kw= '<' )
            int alt41=4;
            switch ( input.LA(1) ) {
            case 46:
                {
                alt41=1;
                }
                break;
            case 34:
                {
                int LA41_2 = input.LA(2);

                if ( (LA41_2==EOF||(LA41_2>=RULE_ID && LA41_2<=RULE_DECIMAL)||LA41_2==15||(LA41_2>=24 && LA41_2<=25)||LA41_2==34||LA41_2==38||(LA41_2>=54 && LA41_2<=55)||LA41_2==60||(LA41_2>=66 && LA41_2<=67)||LA41_2==71||LA41_2==73||(LA41_2>=76 && LA41_2<=78)||(LA41_2>=81 && LA41_2<=91)||LA41_2==93) ) {
                    alt41=4;
                }
                else if ( (LA41_2==40) ) {
                    alt41=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 2, input);

                    throw nvae;
                }
                }
                break;
            case 31:
                {
                alt41=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }

            switch (alt41) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2522:2: kw= '>='
                    {
                    kw=(Token)match(input,46,FOLLOW_46_in_ruleOpCompare5867); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2528:6: (kw= '<' kw= '=' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2528:6: (kw= '<' kw= '=' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2529:2: kw= '<' kw= '='
                    {
                    kw=(Token)match(input,34,FOLLOW_34_in_ruleOpCompare5887); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); 
                          
                    }
                    kw=(Token)match(input,40,FOLLOW_40_in_ruleOpCompare5900); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); 
                          
                    }

                    }


                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2542:2: kw= '>'
                    {
                    kw=(Token)match(input,31,FOLLOW_31_in_ruleOpCompare5920); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2549:2: kw= '<'
                    {
                    kw=(Token)match(input,34,FOLLOW_34_in_ruleOpCompare5939); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); 
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpCompare"


    // $ANTLR start "entryRuleXOtherOperatorExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2562:1: entryRuleXOtherOperatorExpression returns [EObject current=null] : iv_ruleXOtherOperatorExpression= ruleXOtherOperatorExpression EOF ;
    public final EObject entryRuleXOtherOperatorExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXOtherOperatorExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2563:2: (iv_ruleXOtherOperatorExpression= ruleXOtherOperatorExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2564:2: iv_ruleXOtherOperatorExpression= ruleXOtherOperatorExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXOtherOperatorExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXOtherOperatorExpression_in_entryRuleXOtherOperatorExpression5979);
            iv_ruleXOtherOperatorExpression=ruleXOtherOperatorExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXOtherOperatorExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXOtherOperatorExpression5989); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXOtherOperatorExpression"


    // $ANTLR start "ruleXOtherOperatorExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2571:1: ruleXOtherOperatorExpression returns [EObject current=null] : (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* ) ;
    public final EObject ruleXOtherOperatorExpression() throws RecognitionException {
        EObject current = null;

        EObject this_XAdditiveExpression_0 = null;

        EObject lv_rightOperand_3_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2574:28: ( (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2575:1: (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2575:1: (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2576:5: this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXAdditiveExpression_in_ruleXOtherOperatorExpression6036);
            this_XAdditiveExpression_0=ruleXAdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XAdditiveExpression_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2584:1: ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )*
            loop42:
            do {
                int alt42=2;
                alt42 = dfa42.predict(input);
                switch (alt42) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2584:2: ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2584:2: ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2584:3: ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2589:6: ( () ( ( ruleOpOther ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2589:7: () ( ( ruleOpOther ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2589:7: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2590:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2595:2: ( ( ruleOpOther ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2596:1: ( ruleOpOther )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2596:1: ( ruleOpOther )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2597:3: ruleOpOther
            	    {
            	    if ( state.backtracking==0 ) {

            	      			if (current==null) {
            	      	            current = createModelElement(grammarAccess.getXOtherOperatorExpressionRule());
            	      	        }
            	              
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleOpOther_in_ruleXOtherOperatorExpression6089);
            	    ruleOpOther();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2610:4: ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2611:1: (lv_rightOperand_3_0= ruleXAdditiveExpression )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2611:1: (lv_rightOperand_3_0= ruleXAdditiveExpression )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2612:3: lv_rightOperand_3_0= ruleXAdditiveExpression
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXAdditiveExpression_in_ruleXOtherOperatorExpression6112);
            	    lv_rightOperand_3_0=ruleXAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXOtherOperatorExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"rightOperand",
            	              		lv_rightOperand_3_0, 
            	              		"XAdditiveExpression");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXOtherOperatorExpression"


    // $ANTLR start "entryRuleXAdditiveExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2636:1: entryRuleXAdditiveExpression returns [EObject current=null] : iv_ruleXAdditiveExpression= ruleXAdditiveExpression EOF ;
    public final EObject entryRuleXAdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXAdditiveExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2637:2: (iv_ruleXAdditiveExpression= ruleXAdditiveExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2638:2: iv_ruleXAdditiveExpression= ruleXAdditiveExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXAdditiveExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXAdditiveExpression_in_entryRuleXAdditiveExpression6150);
            iv_ruleXAdditiveExpression=ruleXAdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXAdditiveExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXAdditiveExpression6160); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXAdditiveExpression"


    // $ANTLR start "ruleXAdditiveExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2645:1: ruleXAdditiveExpression returns [EObject current=null] : (this_XMultiplicativeExpression_0= ruleXMultiplicativeExpression ( ( ( ( () ( ( ruleOpAdd ) ) ) )=> ( () ( ( ruleOpAdd ) ) ) ) ( (lv_rightOperand_3_0= ruleXMultiplicativeExpression ) ) )* ) ;
    public final EObject ruleXAdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject this_XMultiplicativeExpression_0 = null;

        EObject lv_rightOperand_3_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2648:28: ( (this_XMultiplicativeExpression_0= ruleXMultiplicativeExpression ( ( ( ( () ( ( ruleOpAdd ) ) ) )=> ( () ( ( ruleOpAdd ) ) ) ) ( (lv_rightOperand_3_0= ruleXMultiplicativeExpression ) ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2649:1: (this_XMultiplicativeExpression_0= ruleXMultiplicativeExpression ( ( ( ( () ( ( ruleOpAdd ) ) ) )=> ( () ( ( ruleOpAdd ) ) ) ) ( (lv_rightOperand_3_0= ruleXMultiplicativeExpression ) ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2649:1: (this_XMultiplicativeExpression_0= ruleXMultiplicativeExpression ( ( ( ( () ( ( ruleOpAdd ) ) ) )=> ( () ( ( ruleOpAdd ) ) ) ) ( (lv_rightOperand_3_0= ruleXMultiplicativeExpression ) ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2650:5: this_XMultiplicativeExpression_0= ruleXMultiplicativeExpression ( ( ( ( () ( ( ruleOpAdd ) ) ) )=> ( () ( ( ruleOpAdd ) ) ) ) ( (lv_rightOperand_3_0= ruleXMultiplicativeExpression ) ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getXMultiplicativeExpressionParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXMultiplicativeExpression_in_ruleXAdditiveExpression6207);
            this_XMultiplicativeExpression_0=ruleXMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XMultiplicativeExpression_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2658:1: ( ( ( ( () ( ( ruleOpAdd ) ) ) )=> ( () ( ( ruleOpAdd ) ) ) ) ( (lv_rightOperand_3_0= ruleXMultiplicativeExpression ) ) )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==54) ) {
                    int LA43_2 = input.LA(2);

                    if ( (synpred12_InternalAqua()) ) {
                        alt43=1;
                    }


                }
                else if ( (LA43_0==55) ) {
                    int LA43_3 = input.LA(2);

                    if ( (synpred12_InternalAqua()) ) {
                        alt43=1;
                    }


                }


                switch (alt43) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2658:2: ( ( ( () ( ( ruleOpAdd ) ) ) )=> ( () ( ( ruleOpAdd ) ) ) ) ( (lv_rightOperand_3_0= ruleXMultiplicativeExpression ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2658:2: ( ( ( () ( ( ruleOpAdd ) ) ) )=> ( () ( ( ruleOpAdd ) ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2658:3: ( ( () ( ( ruleOpAdd ) ) ) )=> ( () ( ( ruleOpAdd ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2663:6: ( () ( ( ruleOpAdd ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2663:7: () ( ( ruleOpAdd ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2663:7: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2664:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2669:2: ( ( ruleOpAdd ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2670:1: ( ruleOpAdd )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2670:1: ( ruleOpAdd )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2671:3: ruleOpAdd
            	    {
            	    if ( state.backtracking==0 ) {

            	      			if (current==null) {
            	      	            current = createModelElement(grammarAccess.getXAdditiveExpressionRule());
            	      	        }
            	              
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleOpAdd_in_ruleXAdditiveExpression6260);
            	    ruleOpAdd();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2684:4: ( (lv_rightOperand_3_0= ruleXMultiplicativeExpression ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2685:1: (lv_rightOperand_3_0= ruleXMultiplicativeExpression )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2685:1: (lv_rightOperand_3_0= ruleXMultiplicativeExpression )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2686:3: lv_rightOperand_3_0= ruleXMultiplicativeExpression
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXMultiplicativeExpression_in_ruleXAdditiveExpression6283);
            	    lv_rightOperand_3_0=ruleXMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXAdditiveExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"rightOperand",
            	              		lv_rightOperand_3_0, 
            	              		"XMultiplicativeExpression");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXAdditiveExpression"


    // $ANTLR start "entryRuleOpAdd"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2710:1: entryRuleOpAdd returns [String current=null] : iv_ruleOpAdd= ruleOpAdd EOF ;
    public final String entryRuleOpAdd() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpAdd = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2711:2: (iv_ruleOpAdd= ruleOpAdd EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2712:2: iv_ruleOpAdd= ruleOpAdd EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpAddRule()); 
            }
            pushFollow(FOLLOW_ruleOpAdd_in_entryRuleOpAdd6322);
            iv_ruleOpAdd=ruleOpAdd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpAdd.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpAdd6333); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpAdd"


    // $ANTLR start "ruleOpAdd"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2719:1: ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '+' | kw= '-' ) ;
    public final AntlrDatatypeRuleToken ruleOpAdd() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2722:28: ( (kw= '+' | kw= '-' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2723:1: (kw= '+' | kw= '-' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2723:1: (kw= '+' | kw= '-' )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==54) ) {
                alt44=1;
            }
            else if ( (LA44_0==55) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2724:2: kw= '+'
                    {
                    kw=(Token)match(input,54,FOLLOW_54_in_ruleOpAdd6371); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2731:2: kw= '-'
                    {
                    kw=(Token)match(input,55,FOLLOW_55_in_ruleOpAdd6390); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); 
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpAdd"


    // $ANTLR start "entryRuleXMultiplicativeExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2744:1: entryRuleXMultiplicativeExpression returns [EObject current=null] : iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF ;
    public final EObject entryRuleXMultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXMultiplicativeExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2745:2: (iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2746:2: iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXMultiplicativeExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXMultiplicativeExpression_in_entryRuleXMultiplicativeExpression6430);
            iv_ruleXMultiplicativeExpression=ruleXMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXMultiplicativeExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXMultiplicativeExpression6440); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXMultiplicativeExpression"


    // $ANTLR start "ruleXMultiplicativeExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2753:1: ruleXMultiplicativeExpression returns [EObject current=null] : (this_XUnaryOperation_0= ruleXUnaryOperation ( ( ( ( () ( ( ruleOpMulti ) ) ) )=> ( () ( ( ruleOpMulti ) ) ) ) ( (lv_rightOperand_3_0= ruleXUnaryOperation ) ) )* ) ;
    public final EObject ruleXMultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject this_XUnaryOperation_0 = null;

        EObject lv_rightOperand_3_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2756:28: ( (this_XUnaryOperation_0= ruleXUnaryOperation ( ( ( ( () ( ( ruleOpMulti ) ) ) )=> ( () ( ( ruleOpMulti ) ) ) ) ( (lv_rightOperand_3_0= ruleXUnaryOperation ) ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2757:1: (this_XUnaryOperation_0= ruleXUnaryOperation ( ( ( ( () ( ( ruleOpMulti ) ) ) )=> ( () ( ( ruleOpMulti ) ) ) ) ( (lv_rightOperand_3_0= ruleXUnaryOperation ) ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2757:1: (this_XUnaryOperation_0= ruleXUnaryOperation ( ( ( ( () ( ( ruleOpMulti ) ) ) )=> ( () ( ( ruleOpMulti ) ) ) ) ( (lv_rightOperand_3_0= ruleXUnaryOperation ) ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2758:5: this_XUnaryOperation_0= ruleXUnaryOperation ( ( ( ( () ( ( ruleOpMulti ) ) ) )=> ( () ( ( ruleOpMulti ) ) ) ) ( (lv_rightOperand_3_0= ruleXUnaryOperation ) ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getXUnaryOperationParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXUnaryOperation_in_ruleXMultiplicativeExpression6487);
            this_XUnaryOperation_0=ruleXUnaryOperation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XUnaryOperation_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2766:1: ( ( ( ( () ( ( ruleOpMulti ) ) ) )=> ( () ( ( ruleOpMulti ) ) ) ) ( (lv_rightOperand_3_0= ruleXUnaryOperation ) ) )*
            loop45:
            do {
                int alt45=2;
                switch ( input.LA(1) ) {
                case 56:
                    {
                    int LA45_2 = input.LA(2);

                    if ( (synpred13_InternalAqua()) ) {
                        alt45=1;
                    }


                    }
                    break;
                case 57:
                    {
                    int LA45_3 = input.LA(2);

                    if ( (synpred13_InternalAqua()) ) {
                        alt45=1;
                    }


                    }
                    break;
                case 58:
                    {
                    int LA45_4 = input.LA(2);

                    if ( (synpred13_InternalAqua()) ) {
                        alt45=1;
                    }


                    }
                    break;
                case 59:
                    {
                    int LA45_5 = input.LA(2);

                    if ( (synpred13_InternalAqua()) ) {
                        alt45=1;
                    }


                    }
                    break;

                }

                switch (alt45) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2766:2: ( ( ( () ( ( ruleOpMulti ) ) ) )=> ( () ( ( ruleOpMulti ) ) ) ) ( (lv_rightOperand_3_0= ruleXUnaryOperation ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2766:2: ( ( ( () ( ( ruleOpMulti ) ) ) )=> ( () ( ( ruleOpMulti ) ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2766:3: ( ( () ( ( ruleOpMulti ) ) ) )=> ( () ( ( ruleOpMulti ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2771:6: ( () ( ( ruleOpMulti ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2771:7: () ( ( ruleOpMulti ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2771:7: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2772:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2777:2: ( ( ruleOpMulti ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2778:1: ( ruleOpMulti )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2778:1: ( ruleOpMulti )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2779:3: ruleOpMulti
            	    {
            	    if ( state.backtracking==0 ) {

            	      			if (current==null) {
            	      	            current = createModelElement(grammarAccess.getXMultiplicativeExpressionRule());
            	      	        }
            	              
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleOpMulti_in_ruleXMultiplicativeExpression6540);
            	    ruleOpMulti();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2792:4: ( (lv_rightOperand_3_0= ruleXUnaryOperation ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2793:1: (lv_rightOperand_3_0= ruleXUnaryOperation )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2793:1: (lv_rightOperand_3_0= ruleXUnaryOperation )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2794:3: lv_rightOperand_3_0= ruleXUnaryOperation
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getRightOperandXUnaryOperationParserRuleCall_1_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXUnaryOperation_in_ruleXMultiplicativeExpression6563);
            	    lv_rightOperand_3_0=ruleXUnaryOperation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXMultiplicativeExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"rightOperand",
            	              		lv_rightOperand_3_0, 
            	              		"XUnaryOperation");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXMultiplicativeExpression"


    // $ANTLR start "entryRuleOpMulti"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2818:1: entryRuleOpMulti returns [String current=null] : iv_ruleOpMulti= ruleOpMulti EOF ;
    public final String entryRuleOpMulti() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpMulti = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2819:2: (iv_ruleOpMulti= ruleOpMulti EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2820:2: iv_ruleOpMulti= ruleOpMulti EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpMultiRule()); 
            }
            pushFollow(FOLLOW_ruleOpMulti_in_entryRuleOpMulti6602);
            iv_ruleOpMulti=ruleOpMulti();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpMulti.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpMulti6613); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpMulti"


    // $ANTLR start "ruleOpMulti"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2827:1: ruleOpMulti returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '*' | kw= '**' | kw= '/' | kw= '%' ) ;
    public final AntlrDatatypeRuleToken ruleOpMulti() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2830:28: ( (kw= '*' | kw= '**' | kw= '/' | kw= '%' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2831:1: (kw= '*' | kw= '**' | kw= '/' | kw= '%' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2831:1: (kw= '*' | kw= '**' | kw= '/' | kw= '%' )
            int alt46=4;
            switch ( input.LA(1) ) {
            case 56:
                {
                alt46=1;
                }
                break;
            case 57:
                {
                alt46=2;
                }
                break;
            case 58:
                {
                alt46=3;
                }
                break;
            case 59:
                {
                alt46=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }

            switch (alt46) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2832:2: kw= '*'
                    {
                    kw=(Token)match(input,56,FOLLOW_56_in_ruleOpMulti6651); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2839:2: kw= '**'
                    {
                    kw=(Token)match(input,57,FOLLOW_57_in_ruleOpMulti6670); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskAsteriskKeyword_1()); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2846:2: kw= '/'
                    {
                    kw=(Token)match(input,58,FOLLOW_58_in_ruleOpMulti6689); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAccess().getSolidusKeyword_2()); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2853:2: kw= '%'
                    {
                    kw=(Token)match(input,59,FOLLOW_59_in_ruleOpMulti6708); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpMultiAccess().getPercentSignKeyword_3()); 
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpMulti"


    // $ANTLR start "entryRuleXUnaryOperation"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2866:1: entryRuleXUnaryOperation returns [EObject current=null] : iv_ruleXUnaryOperation= ruleXUnaryOperation EOF ;
    public final EObject entryRuleXUnaryOperation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXUnaryOperation = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2867:2: (iv_ruleXUnaryOperation= ruleXUnaryOperation EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2868:2: iv_ruleXUnaryOperation= ruleXUnaryOperation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXUnaryOperationRule()); 
            }
            pushFollow(FOLLOW_ruleXUnaryOperation_in_entryRuleXUnaryOperation6748);
            iv_ruleXUnaryOperation=ruleXUnaryOperation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXUnaryOperation; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXUnaryOperation6758); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXUnaryOperation"


    // $ANTLR start "ruleXUnaryOperation"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2875:1: ruleXUnaryOperation returns [EObject current=null] : ( ( () ( ( ruleOpUnary ) ) ( (lv_operand_2_0= ruleXUnaryOperation ) ) ) | this_XCastedExpression_3= ruleXCastedExpression ) ;
    public final EObject ruleXUnaryOperation() throws RecognitionException {
        EObject current = null;

        EObject lv_operand_2_0 = null;

        EObject this_XCastedExpression_3 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2878:28: ( ( ( () ( ( ruleOpUnary ) ) ( (lv_operand_2_0= ruleXUnaryOperation ) ) ) | this_XCastedExpression_3= ruleXCastedExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2879:1: ( ( () ( ( ruleOpUnary ) ) ( (lv_operand_2_0= ruleXUnaryOperation ) ) ) | this_XCastedExpression_3= ruleXCastedExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2879:1: ( ( () ( ( ruleOpUnary ) ) ( (lv_operand_2_0= ruleXUnaryOperation ) ) ) | this_XCastedExpression_3= ruleXCastedExpression )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( ((LA47_0>=54 && LA47_0<=55)||LA47_0==60) ) {
                alt47=1;
            }
            else if ( ((LA47_0>=RULE_ID && LA47_0<=RULE_DECIMAL)||LA47_0==15||(LA47_0>=24 && LA47_0<=25)||LA47_0==34||LA47_0==38||(LA47_0>=66 && LA47_0<=67)||LA47_0==71||LA47_0==73||(LA47_0>=76 && LA47_0<=78)||(LA47_0>=81 && LA47_0<=91)||LA47_0==93) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2879:2: ( () ( ( ruleOpUnary ) ) ( (lv_operand_2_0= ruleXUnaryOperation ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2879:2: ( () ( ( ruleOpUnary ) ) ( (lv_operand_2_0= ruleXUnaryOperation ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2879:3: () ( ( ruleOpUnary ) ) ( (lv_operand_2_0= ruleXUnaryOperation ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2879:3: ()
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2880:5: 
                    {
                    if ( state.backtracking==0 ) {

                              current = forceCreateModelElement(
                                  grammarAccess.getXUnaryOperationAccess().getXUnaryOperationAction_0_0(),
                                  current);
                          
                    }

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2885:2: ( ( ruleOpUnary ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2886:1: ( ruleOpUnary )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2886:1: ( ruleOpUnary )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2887:3: ruleOpUnary
                    {
                    if ( state.backtracking==0 ) {

                      			if (current==null) {
                      	            current = createModelElement(grammarAccess.getXUnaryOperationRule());
                      	        }
                              
                    }
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleOpUnary_in_ruleXUnaryOperation6816);
                    ruleOpUnary();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2900:2: ( (lv_operand_2_0= ruleXUnaryOperation ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2901:1: (lv_operand_2_0= ruleXUnaryOperation )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2901:1: (lv_operand_2_0= ruleXUnaryOperation )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2902:3: lv_operand_2_0= ruleXUnaryOperation
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getOperandXUnaryOperationParserRuleCall_0_2_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXUnaryOperation_in_ruleXUnaryOperation6837);
                    lv_operand_2_0=ruleXUnaryOperation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXUnaryOperationRule());
                      	        }
                             		set(
                             			current, 
                             			"operand",
                              		lv_operand_2_0, 
                              		"XUnaryOperation");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2920:5: this_XCastedExpression_3= ruleXCastedExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXUnaryOperationAccess().getXCastedExpressionParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXCastedExpression_in_ruleXUnaryOperation6866);
                    this_XCastedExpression_3=ruleXCastedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XCastedExpression_3; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXUnaryOperation"


    // $ANTLR start "entryRuleOpUnary"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2936:1: entryRuleOpUnary returns [String current=null] : iv_ruleOpUnary= ruleOpUnary EOF ;
    public final String entryRuleOpUnary() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpUnary = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2937:2: (iv_ruleOpUnary= ruleOpUnary EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2938:2: iv_ruleOpUnary= ruleOpUnary EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpUnaryRule()); 
            }
            pushFollow(FOLLOW_ruleOpUnary_in_entryRuleOpUnary6902);
            iv_ruleOpUnary=ruleOpUnary();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpUnary.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpUnary6913); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpUnary"


    // $ANTLR start "ruleOpUnary"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2945:1: ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '!' | kw= '-' | kw= '+' ) ;
    public final AntlrDatatypeRuleToken ruleOpUnary() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2948:28: ( (kw= '!' | kw= '-' | kw= '+' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2949:1: (kw= '!' | kw= '-' | kw= '+' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2949:1: (kw= '!' | kw= '-' | kw= '+' )
            int alt48=3;
            switch ( input.LA(1) ) {
            case 60:
                {
                alt48=1;
                }
                break;
            case 55:
                {
                alt48=2;
                }
                break;
            case 54:
                {
                alt48=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }

            switch (alt48) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2950:2: kw= '!'
                    {
                    kw=(Token)match(input,60,FOLLOW_60_in_ruleOpUnary6951); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2957:2: kw= '-'
                    {
                    kw=(Token)match(input,55,FOLLOW_55_in_ruleOpUnary6970); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2964:2: kw= '+'
                    {
                    kw=(Token)match(input,54,FOLLOW_54_in_ruleOpUnary6989); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); 
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpUnary"


    // $ANTLR start "entryRuleXCastedExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2977:1: entryRuleXCastedExpression returns [EObject current=null] : iv_ruleXCastedExpression= ruleXCastedExpression EOF ;
    public final EObject entryRuleXCastedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXCastedExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2978:2: (iv_ruleXCastedExpression= ruleXCastedExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2979:2: iv_ruleXCastedExpression= ruleXCastedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXCastedExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXCastedExpression_in_entryRuleXCastedExpression7029);
            iv_ruleXCastedExpression=ruleXCastedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXCastedExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXCastedExpression7039); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXCastedExpression"


    // $ANTLR start "ruleXCastedExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2986:1: ruleXCastedExpression returns [EObject current=null] : (this_XPostfixOperation_0= ruleXPostfixOperation ( ( ( ( () 'as' ) )=> ( () otherlv_2= 'as' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) )* ) ;
    public final EObject ruleXCastedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_XPostfixOperation_0 = null;

        EObject lv_type_3_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2989:28: ( (this_XPostfixOperation_0= ruleXPostfixOperation ( ( ( ( () 'as' ) )=> ( () otherlv_2= 'as' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2990:1: (this_XPostfixOperation_0= ruleXPostfixOperation ( ( ( ( () 'as' ) )=> ( () otherlv_2= 'as' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2990:1: (this_XPostfixOperation_0= ruleXPostfixOperation ( ( ( ( () 'as' ) )=> ( () otherlv_2= 'as' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2991:5: this_XPostfixOperation_0= ruleXPostfixOperation ( ( ( ( () 'as' ) )=> ( () otherlv_2= 'as' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXCastedExpressionAccess().getXPostfixOperationParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXPostfixOperation_in_ruleXCastedExpression7086);
            this_XPostfixOperation_0=ruleXPostfixOperation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XPostfixOperation_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2999:1: ( ( ( ( () 'as' ) )=> ( () otherlv_2= 'as' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) ) )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==61) ) {
                    int LA49_2 = input.LA(2);

                    if ( (synpred14_InternalAqua()) ) {
                        alt49=1;
                    }


                }


                switch (alt49) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2999:2: ( ( ( () 'as' ) )=> ( () otherlv_2= 'as' ) ) ( (lv_type_3_0= ruleJvmTypeReference ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2999:2: ( ( ( () 'as' ) )=> ( () otherlv_2= 'as' ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2999:3: ( ( () 'as' ) )=> ( () otherlv_2= 'as' )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3001:5: ( () otherlv_2= 'as' )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3001:6: () otherlv_2= 'as'
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3001:6: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3002:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    otherlv_2=(Token)match(input,61,FOLLOW_61_in_ruleXCastedExpression7121); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	          	newLeafNode(otherlv_2, grammarAccess.getXCastedExpressionAccess().getAsKeyword_1_0_0_1());
            	          
            	    }

            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3011:3: ( (lv_type_3_0= ruleJvmTypeReference ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3012:1: (lv_type_3_0= ruleJvmTypeReference )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3012:1: (lv_type_3_0= ruleJvmTypeReference )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3013:3: lv_type_3_0= ruleJvmTypeReference
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXCastedExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleXCastedExpression7144);
            	    lv_type_3_0=ruleJvmTypeReference();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXCastedExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"type",
            	              		lv_type_3_0, 
            	              		"JvmTypeReference");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXCastedExpression"


    // $ANTLR start "entryRuleXPostfixOperation"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3037:1: entryRuleXPostfixOperation returns [EObject current=null] : iv_ruleXPostfixOperation= ruleXPostfixOperation EOF ;
    public final EObject entryRuleXPostfixOperation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXPostfixOperation = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3038:2: (iv_ruleXPostfixOperation= ruleXPostfixOperation EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3039:2: iv_ruleXPostfixOperation= ruleXPostfixOperation EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXPostfixOperationRule()); 
            }
            pushFollow(FOLLOW_ruleXPostfixOperation_in_entryRuleXPostfixOperation7182);
            iv_ruleXPostfixOperation=ruleXPostfixOperation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXPostfixOperation; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXPostfixOperation7192); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXPostfixOperation"


    // $ANTLR start "ruleXPostfixOperation"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3046:1: ruleXPostfixOperation returns [EObject current=null] : (this_XMemberFeatureCall_0= ruleXMemberFeatureCall ( ( ( () ( ( ruleOpPostfix ) ) ) )=> ( () ( ( ruleOpPostfix ) ) ) )? ) ;
    public final EObject ruleXPostfixOperation() throws RecognitionException {
        EObject current = null;

        EObject this_XMemberFeatureCall_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3049:28: ( (this_XMemberFeatureCall_0= ruleXMemberFeatureCall ( ( ( () ( ( ruleOpPostfix ) ) ) )=> ( () ( ( ruleOpPostfix ) ) ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3050:1: (this_XMemberFeatureCall_0= ruleXMemberFeatureCall ( ( ( () ( ( ruleOpPostfix ) ) ) )=> ( () ( ( ruleOpPostfix ) ) ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3050:1: (this_XMemberFeatureCall_0= ruleXMemberFeatureCall ( ( ( () ( ( ruleOpPostfix ) ) ) )=> ( () ( ( ruleOpPostfix ) ) ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3051:5: this_XMemberFeatureCall_0= ruleXMemberFeatureCall ( ( ( () ( ( ruleOpPostfix ) ) ) )=> ( () ( ( ruleOpPostfix ) ) ) )?
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXPostfixOperationAccess().getXMemberFeatureCallParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXMemberFeatureCall_in_ruleXPostfixOperation7239);
            this_XMemberFeatureCall_0=ruleXMemberFeatureCall();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XMemberFeatureCall_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3059:1: ( ( ( () ( ( ruleOpPostfix ) ) ) )=> ( () ( ( ruleOpPostfix ) ) ) )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==62) ) {
                int LA50_1 = input.LA(2);

                if ( (synpred15_InternalAqua()) ) {
                    alt50=1;
                }
            }
            else if ( (LA50_0==63) ) {
                int LA50_2 = input.LA(2);

                if ( (synpred15_InternalAqua()) ) {
                    alt50=1;
                }
            }
            switch (alt50) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3059:2: ( ( () ( ( ruleOpPostfix ) ) ) )=> ( () ( ( ruleOpPostfix ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3064:6: ( () ( ( ruleOpPostfix ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3064:7: () ( ( ruleOpPostfix ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3064:7: ()
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3065:5: 
                    {
                    if ( state.backtracking==0 ) {

                              current = forceCreateModelElementAndSet(
                                  grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0(),
                                  current);
                          
                    }

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3070:2: ( ( ruleOpPostfix ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3071:1: ( ruleOpPostfix )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3071:1: ( ruleOpPostfix )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3072:3: ruleOpPostfix
                    {
                    if ( state.backtracking==0 ) {

                      			if (current==null) {
                      	            current = createModelElement(grammarAccess.getXPostfixOperationRule());
                      	        }
                              
                    }
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXPostfixOperationAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleOpPostfix_in_ruleXPostfixOperation7291);
                    ruleOpPostfix();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXPostfixOperation"


    // $ANTLR start "entryRuleOpPostfix"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3093:1: entryRuleOpPostfix returns [String current=null] : iv_ruleOpPostfix= ruleOpPostfix EOF ;
    public final String entryRuleOpPostfix() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOpPostfix = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3094:2: (iv_ruleOpPostfix= ruleOpPostfix EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3095:2: iv_ruleOpPostfix= ruleOpPostfix EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpPostfixRule()); 
            }
            pushFollow(FOLLOW_ruleOpPostfix_in_entryRuleOpPostfix7331);
            iv_ruleOpPostfix=ruleOpPostfix();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpPostfix.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOpPostfix7342); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpPostfix"


    // $ANTLR start "ruleOpPostfix"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3102:1: ruleOpPostfix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '++' | kw= '--' ) ;
    public final AntlrDatatypeRuleToken ruleOpPostfix() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3105:28: ( (kw= '++' | kw= '--' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3106:1: (kw= '++' | kw= '--' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3106:1: (kw= '++' | kw= '--' )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==62) ) {
                alt51=1;
            }
            else if ( (LA51_0==63) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3107:2: kw= '++'
                    {
                    kw=(Token)match(input,62,FOLLOW_62_in_ruleOpPostfix7380); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpPostfixAccess().getPlusSignPlusSignKeyword_0()); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3114:2: kw= '--'
                    {
                    kw=(Token)match(input,63,FOLLOW_63_in_ruleOpPostfix7399); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getOpPostfixAccess().getHyphenMinusHyphenMinusKeyword_1()); 
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpPostfix"


    // $ANTLR start "entryRuleXMemberFeatureCall"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3127:1: entryRuleXMemberFeatureCall returns [EObject current=null] : iv_ruleXMemberFeatureCall= ruleXMemberFeatureCall EOF ;
    public final EObject entryRuleXMemberFeatureCall() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXMemberFeatureCall = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3128:2: (iv_ruleXMemberFeatureCall= ruleXMemberFeatureCall EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3129:2: iv_ruleXMemberFeatureCall= ruleXMemberFeatureCall EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXMemberFeatureCallRule()); 
            }
            pushFollow(FOLLOW_ruleXMemberFeatureCall_in_entryRuleXMemberFeatureCall7439);
            iv_ruleXMemberFeatureCall=ruleXMemberFeatureCall();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXMemberFeatureCall; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXMemberFeatureCall7449); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXMemberFeatureCall"


    // $ANTLR start "ruleXMemberFeatureCall"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3136:1: ruleXMemberFeatureCall returns [EObject current=null] : (this_XPrimaryExpression_0= ruleXPrimaryExpression ( ( ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) ) ( (lv_value_6_0= ruleXAssignment ) ) ) | ( ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) ) (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )? ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )? ) )* ) ;
    public final EObject ruleXMemberFeatureCall() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token lv_explicitStatic_3_0=null;
        Token otherlv_8=null;
        Token lv_nullSafe_9_0=null;
        Token lv_explicitStatic_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_explicitOperationCall_17_0=null;
        Token otherlv_20=null;
        Token otherlv_22=null;
        EObject this_XPrimaryExpression_0 = null;

        EObject lv_value_6_0 = null;

        EObject lv_typeArguments_12_0 = null;

        EObject lv_typeArguments_14_0 = null;

        EObject lv_memberCallArguments_18_0 = null;

        EObject lv_memberCallArguments_19_0 = null;

        EObject lv_memberCallArguments_21_0 = null;

        EObject lv_memberCallArguments_23_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3139:28: ( (this_XPrimaryExpression_0= ruleXPrimaryExpression ( ( ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) ) ( (lv_value_6_0= ruleXAssignment ) ) ) | ( ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) ) (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )? ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )? ) )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3140:1: (this_XPrimaryExpression_0= ruleXPrimaryExpression ( ( ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) ) ( (lv_value_6_0= ruleXAssignment ) ) ) | ( ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) ) (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )? ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )? ) )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3140:1: (this_XPrimaryExpression_0= ruleXPrimaryExpression ( ( ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) ) ( (lv_value_6_0= ruleXAssignment ) ) ) | ( ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) ) (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )? ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )? ) )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3141:5: this_XPrimaryExpression_0= ruleXPrimaryExpression ( ( ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) ) ( (lv_value_6_0= ruleXAssignment ) ) ) | ( ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) ) (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )? ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )? ) )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getXPrimaryExpressionParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleXPrimaryExpression_in_ruleXMemberFeatureCall7496);
            this_XPrimaryExpression_0=ruleXPrimaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XPrimaryExpression_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:1: ( ( ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) ) ( (lv_value_6_0= ruleXAssignment ) ) ) | ( ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) ) (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )? ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )? ) )*
            loop60:
            do {
                int alt60=3;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    int LA60_2 = input.LA(2);

                    if ( (synpred16_InternalAqua()) ) {
                        alt60=1;
                    }
                    else if ( (synpred17_InternalAqua()) ) {
                        alt60=2;
                    }


                    }
                    break;
                case 64:
                    {
                    int LA60_3 = input.LA(2);

                    if ( (synpred16_InternalAqua()) ) {
                        alt60=1;
                    }
                    else if ( (synpred17_InternalAqua()) ) {
                        alt60=2;
                    }


                    }
                    break;
                case 65:
                    {
                    int LA60_4 = input.LA(2);

                    if ( (synpred17_InternalAqua()) ) {
                        alt60=2;
                    }


                    }
                    break;

                }

                switch (alt60) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:2: ( ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) ) ( (lv_value_6_0= ruleXAssignment ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:2: ( ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) ) ( (lv_value_6_0= ruleXAssignment ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:3: ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) ) ( (lv_value_6_0= ruleXAssignment ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:3: ( ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:4: ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )=> ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3162:25: ( () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3162:26: () (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3162:26: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3163:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3168:2: (otherlv_2= '.' | ( (lv_explicitStatic_3_0= '::' ) ) )
            	    int alt52=2;
            	    int LA52_0 = input.LA(1);

            	    if ( (LA52_0==21) ) {
            	        alt52=1;
            	    }
            	    else if ( (LA52_0==64) ) {
            	        alt52=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 52, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt52) {
            	        case 1 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3168:4: otherlv_2= '.'
            	            {
            	            otherlv_2=(Token)match(input,21,FOLLOW_21_in_ruleXMemberFeatureCall7568); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                  	newLeafNode(otherlv_2, grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1_0());
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3173:6: ( (lv_explicitStatic_3_0= '::' ) )
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3173:6: ( (lv_explicitStatic_3_0= '::' ) )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3174:1: (lv_explicitStatic_3_0= '::' )
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3174:1: (lv_explicitStatic_3_0= '::' )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3175:3: lv_explicitStatic_3_0= '::'
            	            {
            	            lv_explicitStatic_3_0=(Token)match(input,64,FOLLOW_64_in_ruleXMemberFeatureCall7592); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                      newLeafNode(lv_explicitStatic_3_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0());
            	                  
            	            }
            	            if ( state.backtracking==0 ) {

            	              	        if (current==null) {
            	              	            current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
            	              	        }
            	                     		setWithLastConsumed(current, "explicitStatic", true, "::");
            	              	    
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3188:3: ( ( ruleFeatureCallID ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3189:1: ( ruleFeatureCallID )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3189:1: ( ruleFeatureCallID )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3190:3: ruleFeatureCallID
            	    {
            	    if ( state.backtracking==0 ) {

            	      			if (current==null) {
            	      	            current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
            	      	        }
            	              
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleFeatureCallID_in_ruleXMemberFeatureCall7629);
            	    ruleFeatureCallID();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }

            	    if ( state.backtracking==0 ) {
            	       
            	              newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruleOpSingleAssign_in_ruleXMemberFeatureCall7645);
            	    ruleOpSingleAssign();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	              afterParserOrEnumRuleCall();
            	          
            	    }

            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3211:3: ( (lv_value_6_0= ruleXAssignment ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3212:1: (lv_value_6_0= ruleXAssignment )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3212:1: (lv_value_6_0= ruleXAssignment )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3213:3: lv_value_6_0= ruleXAssignment
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getValueXAssignmentParserRuleCall_1_0_1_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXAssignment_in_ruleXMemberFeatureCall7667);
            	    lv_value_6_0=ruleXAssignment();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			"value",
            	              		lv_value_6_0, 
            	              		"XAssignment");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:6: ( ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) ) (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )? ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )? )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:6: ( ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) ) (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )? ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )? )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:7: ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) ) (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )? ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )?
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:7: ( ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:8: ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )=> ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3246:7: ( () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3246:8: () (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3246:8: ()
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3247:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0(),
            	                  current);
            	          
            	    }

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3252:2: (otherlv_8= '.' | ( (lv_nullSafe_9_0= '?.' ) ) | ( (lv_explicitStatic_10_0= '::' ) ) )
            	    int alt53=3;
            	    switch ( input.LA(1) ) {
            	    case 21:
            	        {
            	        alt53=1;
            	        }
            	        break;
            	    case 65:
            	        {
            	        alt53=2;
            	        }
            	        break;
            	    case 64:
            	        {
            	        alt53=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 53, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt53) {
            	        case 1 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3252:4: otherlv_8= '.'
            	            {
            	            otherlv_8=(Token)match(input,21,FOLLOW_21_in_ruleXMemberFeatureCall7753); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                  	newLeafNode(otherlv_8, grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1_0());
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3257:6: ( (lv_nullSafe_9_0= '?.' ) )
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3257:6: ( (lv_nullSafe_9_0= '?.' ) )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3258:1: (lv_nullSafe_9_0= '?.' )
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3258:1: (lv_nullSafe_9_0= '?.' )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3259:3: lv_nullSafe_9_0= '?.'
            	            {
            	            lv_nullSafe_9_0=(Token)match(input,65,FOLLOW_65_in_ruleXMemberFeatureCall7777); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                      newLeafNode(lv_nullSafe_9_0, grammarAccess.getXMemberFeatureCallAccess().getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0());
            	                  
            	            }
            	            if ( state.backtracking==0 ) {

            	              	        if (current==null) {
            	              	            current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
            	              	        }
            	                     		setWithLastConsumed(current, "nullSafe", true, "?.");
            	              	    
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 3 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3273:6: ( (lv_explicitStatic_10_0= '::' ) )
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3273:6: ( (lv_explicitStatic_10_0= '::' ) )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3274:1: (lv_explicitStatic_10_0= '::' )
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3274:1: (lv_explicitStatic_10_0= '::' )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3275:3: lv_explicitStatic_10_0= '::'
            	            {
            	            lv_explicitStatic_10_0=(Token)match(input,64,FOLLOW_64_in_ruleXMemberFeatureCall7814); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                      newLeafNode(lv_explicitStatic_10_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0());
            	                  
            	            }
            	            if ( state.backtracking==0 ) {

            	              	        if (current==null) {
            	              	            current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
            	              	        }
            	                     		setWithLastConsumed(current, "explicitStatic", true, "::");
            	              	    
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3288:5: (otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>' )?
            	    int alt55=2;
            	    int LA55_0 = input.LA(1);

            	    if ( (LA55_0==34) ) {
            	        alt55=1;
            	    }
            	    switch (alt55) {
            	        case 1 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3288:7: otherlv_11= '<' ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) ) (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )* otherlv_15= '>'
            	            {
            	            otherlv_11=(Token)match(input,34,FOLLOW_34_in_ruleXMemberFeatureCall7843); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                  	newLeafNode(otherlv_11, grammarAccess.getXMemberFeatureCallAccess().getLessThanSignKeyword_1_1_1_0());
            	                  
            	            }
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3292:1: ( (lv_typeArguments_12_0= ruleJvmArgumentTypeReference ) )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3293:1: (lv_typeArguments_12_0= ruleJvmArgumentTypeReference )
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3293:1: (lv_typeArguments_12_0= ruleJvmArgumentTypeReference )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3294:3: lv_typeArguments_12_0= ruleJvmArgumentTypeReference
            	            {
            	            if ( state.backtracking==0 ) {
            	               
            	              	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0()); 
            	              	    
            	            }
            	            pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleXMemberFeatureCall7864);
            	            lv_typeArguments_12_0=ruleJvmArgumentTypeReference();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              	        if (current==null) {
            	              	            current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
            	              	        }
            	                     		add(
            	                     			current, 
            	                     			"typeArguments",
            	                      		lv_typeArguments_12_0, 
            	                      		"JvmArgumentTypeReference");
            	              	        afterParserOrEnumRuleCall();
            	              	    
            	            }

            	            }


            	            }

            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3310:2: (otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) ) )*
            	            loop54:
            	            do {
            	                int alt54=2;
            	                int LA54_0 = input.LA(1);

            	                if ( (LA54_0==26) ) {
            	                    alt54=1;
            	                }


            	                switch (alt54) {
            	            	case 1 :
            	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3310:4: otherlv_13= ',' ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) )
            	            	    {
            	            	    otherlv_13=(Token)match(input,26,FOLLOW_26_in_ruleXMemberFeatureCall7877); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	          	newLeafNode(otherlv_13, grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_1_2_0());
            	            	          
            	            	    }
            	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3314:1: ( (lv_typeArguments_14_0= ruleJvmArgumentTypeReference ) )
            	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3315:1: (lv_typeArguments_14_0= ruleJvmArgumentTypeReference )
            	            	    {
            	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3315:1: (lv_typeArguments_14_0= ruleJvmArgumentTypeReference )
            	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3316:3: lv_typeArguments_14_0= ruleJvmArgumentTypeReference
            	            	    {
            	            	    if ( state.backtracking==0 ) {
            	            	       
            	            	      	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0()); 
            	            	      	    
            	            	    }
            	            	    pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleXMemberFeatureCall7898);
            	            	    lv_typeArguments_14_0=ruleJvmArgumentTypeReference();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      	        if (current==null) {
            	            	      	            current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
            	            	      	        }
            	            	             		add(
            	            	             			current, 
            	            	             			"typeArguments",
            	            	              		lv_typeArguments_14_0, 
            	            	              		"JvmArgumentTypeReference");
            	            	      	        afterParserOrEnumRuleCall();
            	            	      	    
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop54;
            	                }
            	            } while (true);

            	            otherlv_15=(Token)match(input,31,FOLLOW_31_in_ruleXMemberFeatureCall7912); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                  	newLeafNode(otherlv_15, grammarAccess.getXMemberFeatureCallAccess().getGreaterThanSignKeyword_1_1_1_3());
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3336:3: ( ( ruleIdOrSuper ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3337:1: ( ruleIdOrSuper )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3337:1: ( ruleIdOrSuper )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3338:3: ruleIdOrSuper
            	    {
            	    if ( state.backtracking==0 ) {

            	      			if (current==null) {
            	      	            current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
            	      	        }
            	              
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_2_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleIdOrSuper_in_ruleXMemberFeatureCall7937);
            	    ruleIdOrSuper();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	       
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3351:2: ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )?
            	    int alt58=2;
            	    alt58 = dfa58.predict(input);
            	    switch (alt58) {
            	        case 1 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3351:3: ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')'
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3351:3: ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3351:4: ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' )
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3358:1: (lv_explicitOperationCall_17_0= '(' )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3359:3: lv_explicitOperationCall_17_0= '('
            	            {
            	            lv_explicitOperationCall_17_0=(Token)match(input,25,FOLLOW_25_in_ruleXMemberFeatureCall7971); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                      newLeafNode(lv_explicitOperationCall_17_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0());
            	                  
            	            }
            	            if ( state.backtracking==0 ) {

            	              	        if (current==null) {
            	              	            current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
            	              	        }
            	                     		setWithLastConsumed(current, "explicitOperationCall", true, "(");
            	              	    
            	            }

            	            }


            	            }

            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3372:2: ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )?
            	            int alt57=3;
            	            alt57 = dfa57.predict(input);
            	            switch (alt57) {
            	                case 1 :
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3372:3: ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) )
            	                    {
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3372:3: ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) )
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3372:4: ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure )
            	                    {
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3389:1: (lv_memberCallArguments_18_0= ruleXShortClosure )
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3390:3: lv_memberCallArguments_18_0= ruleXShortClosure
            	                    {
            	                    if ( state.backtracking==0 ) {
            	                       
            	                      	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0()); 
            	                      	    
            	                    }
            	                    pushFollow(FOLLOW_ruleXShortClosure_in_ruleXMemberFeatureCall8056);
            	                    lv_memberCallArguments_18_0=ruleXShortClosure();

            	                    state._fsp--;
            	                    if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      	        if (current==null) {
            	                      	            current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
            	                      	        }
            	                             		add(
            	                             			current, 
            	                             			"memberCallArguments",
            	                              		lv_memberCallArguments_18_0, 
            	                              		"XShortClosure");
            	                      	        afterParserOrEnumRuleCall();
            	                      	    
            	                    }

            	                    }


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3407:6: ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* )
            	                    {
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3407:6: ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* )
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3407:7: ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )*
            	                    {
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3407:7: ( (lv_memberCallArguments_19_0= ruleXExpression ) )
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3408:1: (lv_memberCallArguments_19_0= ruleXExpression )
            	                    {
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3408:1: (lv_memberCallArguments_19_0= ruleXExpression )
            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3409:3: lv_memberCallArguments_19_0= ruleXExpression
            	                    {
            	                    if ( state.backtracking==0 ) {
            	                       
            	                      	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0()); 
            	                      	    
            	                    }
            	                    pushFollow(FOLLOW_ruleXExpression_in_ruleXMemberFeatureCall8084);
            	                    lv_memberCallArguments_19_0=ruleXExpression();

            	                    state._fsp--;
            	                    if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      	        if (current==null) {
            	                      	            current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
            	                      	        }
            	                             		add(
            	                             			current, 
            	                             			"memberCallArguments",
            	                              		lv_memberCallArguments_19_0, 
            	                              		"XExpression");
            	                      	        afterParserOrEnumRuleCall();
            	                      	    
            	                    }

            	                    }


            	                    }

            	                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3425:2: (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )*
            	                    loop56:
            	                    do {
            	                        int alt56=2;
            	                        int LA56_0 = input.LA(1);

            	                        if ( (LA56_0==26) ) {
            	                            alt56=1;
            	                        }


            	                        switch (alt56) {
            	                    	case 1 :
            	                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3425:4: otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) )
            	                    	    {
            	                    	    otherlv_20=(Token)match(input,26,FOLLOW_26_in_ruleXMemberFeatureCall8097); if (state.failed) return current;
            	                    	    if ( state.backtracking==0 ) {

            	                    	          	newLeafNode(otherlv_20, grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_3_1_1_1_0());
            	                    	          
            	                    	    }
            	                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3429:1: ( (lv_memberCallArguments_21_0= ruleXExpression ) )
            	                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3430:1: (lv_memberCallArguments_21_0= ruleXExpression )
            	                    	    {
            	                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3430:1: (lv_memberCallArguments_21_0= ruleXExpression )
            	                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3431:3: lv_memberCallArguments_21_0= ruleXExpression
            	                    	    {
            	                    	    if ( state.backtracking==0 ) {
            	                    	       
            	                    	      	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0()); 
            	                    	      	    
            	                    	    }
            	                    	    pushFollow(FOLLOW_ruleXExpression_in_ruleXMemberFeatureCall8118);
            	                    	    lv_memberCallArguments_21_0=ruleXExpression();

            	                    	    state._fsp--;
            	                    	    if (state.failed) return current;
            	                    	    if ( state.backtracking==0 ) {

            	                    	      	        if (current==null) {
            	                    	      	            current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
            	                    	      	        }
            	                    	             		add(
            	                    	             			current, 
            	                    	             			"memberCallArguments",
            	                    	              		lv_memberCallArguments_21_0, 
            	                    	              		"XExpression");
            	                    	      	        afterParserOrEnumRuleCall();
            	                    	      	    
            	                    	    }

            	                    	    }


            	                    	    }


            	                    	    }
            	                    	    break;

            	                    	default :
            	                    	    break loop56;
            	                        }
            	                    } while (true);


            	                    }


            	                    }
            	                    break;

            	            }

            	            otherlv_22=(Token)match(input,27,FOLLOW_27_in_ruleXMemberFeatureCall8135); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                  	newLeafNode(otherlv_22, grammarAccess.getXMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_3_2());
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3451:3: ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )?
            	    int alt59=2;
            	    alt59 = dfa59.predict(input);
            	    switch (alt59) {
            	        case 1 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3451:4: ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure )
            	            {
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3454:1: (lv_memberCallArguments_23_0= ruleXClosure )
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3455:3: lv_memberCallArguments_23_0= ruleXClosure
            	            {
            	            if ( state.backtracking==0 ) {
            	               
            	              	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXClosureParserRuleCall_1_1_4_0()); 
            	              	    
            	            }
            	            pushFollow(FOLLOW_ruleXClosure_in_ruleXMemberFeatureCall8170);
            	            lv_memberCallArguments_23_0=ruleXClosure();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              	        if (current==null) {
            	              	            current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
            	              	        }
            	                     		add(
            	                     			current, 
            	                     			"memberCallArguments",
            	                      		lv_memberCallArguments_23_0, 
            	                      		"XClosure");
            	              	        afterParserOrEnumRuleCall();
            	              	    
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXMemberFeatureCall"


    // $ANTLR start "entryRuleXPrimaryExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3479:1: entryRuleXPrimaryExpression returns [EObject current=null] : iv_ruleXPrimaryExpression= ruleXPrimaryExpression EOF ;
    public final EObject entryRuleXPrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXPrimaryExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3480:2: (iv_ruleXPrimaryExpression= ruleXPrimaryExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3481:2: iv_ruleXPrimaryExpression= ruleXPrimaryExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXPrimaryExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXPrimaryExpression_in_entryRuleXPrimaryExpression8210);
            iv_ruleXPrimaryExpression=ruleXPrimaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXPrimaryExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXPrimaryExpression8220); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXPrimaryExpression"


    // $ANTLR start "ruleXPrimaryExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3488:1: ruleXPrimaryExpression returns [EObject current=null] : (this_XConstructorCall_0= ruleXConstructorCall | this_XBlockExpression_1= ruleXBlockExpression | this_XSwitchExpression_2= ruleXSwitchExpression | ( ( ( () 'synchronized' '(' ) )=>this_XSynchronizedExpression_3= ruleXSynchronizedExpression ) | this_XFeatureCall_4= ruleXFeatureCall | this_XLiteral_5= ruleXLiteral | this_XIfExpression_6= ruleXIfExpression | ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=>this_XForLoopExpression_7= ruleXForLoopExpression ) | this_XBasicForLoopExpression_8= ruleXBasicForLoopExpression | this_XWhileExpression_9= ruleXWhileExpression | this_XDoWhileExpression_10= ruleXDoWhileExpression | this_XThrowExpression_11= ruleXThrowExpression | this_XReturnExpression_12= ruleXReturnExpression | this_XTryCatchFinallyExpression_13= ruleXTryCatchFinallyExpression | this_XParenthesizedExpression_14= ruleXParenthesizedExpression ) ;
    public final EObject ruleXPrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject this_XConstructorCall_0 = null;

        EObject this_XBlockExpression_1 = null;

        EObject this_XSwitchExpression_2 = null;

        EObject this_XSynchronizedExpression_3 = null;

        EObject this_XFeatureCall_4 = null;

        EObject this_XLiteral_5 = null;

        EObject this_XIfExpression_6 = null;

        EObject this_XForLoopExpression_7 = null;

        EObject this_XBasicForLoopExpression_8 = null;

        EObject this_XWhileExpression_9 = null;

        EObject this_XDoWhileExpression_10 = null;

        EObject this_XThrowExpression_11 = null;

        EObject this_XReturnExpression_12 = null;

        EObject this_XTryCatchFinallyExpression_13 = null;

        EObject this_XParenthesizedExpression_14 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3491:28: ( (this_XConstructorCall_0= ruleXConstructorCall | this_XBlockExpression_1= ruleXBlockExpression | this_XSwitchExpression_2= ruleXSwitchExpression | ( ( ( () 'synchronized' '(' ) )=>this_XSynchronizedExpression_3= ruleXSynchronizedExpression ) | this_XFeatureCall_4= ruleXFeatureCall | this_XLiteral_5= ruleXLiteral | this_XIfExpression_6= ruleXIfExpression | ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=>this_XForLoopExpression_7= ruleXForLoopExpression ) | this_XBasicForLoopExpression_8= ruleXBasicForLoopExpression | this_XWhileExpression_9= ruleXWhileExpression | this_XDoWhileExpression_10= ruleXDoWhileExpression | this_XThrowExpression_11= ruleXThrowExpression | this_XReturnExpression_12= ruleXReturnExpression | this_XTryCatchFinallyExpression_13= ruleXTryCatchFinallyExpression | this_XParenthesizedExpression_14= ruleXParenthesizedExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3492:1: (this_XConstructorCall_0= ruleXConstructorCall | this_XBlockExpression_1= ruleXBlockExpression | this_XSwitchExpression_2= ruleXSwitchExpression | ( ( ( () 'synchronized' '(' ) )=>this_XSynchronizedExpression_3= ruleXSynchronizedExpression ) | this_XFeatureCall_4= ruleXFeatureCall | this_XLiteral_5= ruleXLiteral | this_XIfExpression_6= ruleXIfExpression | ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=>this_XForLoopExpression_7= ruleXForLoopExpression ) | this_XBasicForLoopExpression_8= ruleXBasicForLoopExpression | this_XWhileExpression_9= ruleXWhileExpression | this_XDoWhileExpression_10= ruleXDoWhileExpression | this_XThrowExpression_11= ruleXThrowExpression | this_XReturnExpression_12= ruleXReturnExpression | this_XTryCatchFinallyExpression_13= ruleXTryCatchFinallyExpression | this_XParenthesizedExpression_14= ruleXParenthesizedExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3492:1: (this_XConstructorCall_0= ruleXConstructorCall | this_XBlockExpression_1= ruleXBlockExpression | this_XSwitchExpression_2= ruleXSwitchExpression | ( ( ( () 'synchronized' '(' ) )=>this_XSynchronizedExpression_3= ruleXSynchronizedExpression ) | this_XFeatureCall_4= ruleXFeatureCall | this_XLiteral_5= ruleXLiteral | this_XIfExpression_6= ruleXIfExpression | ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=>this_XForLoopExpression_7= ruleXForLoopExpression ) | this_XBasicForLoopExpression_8= ruleXBasicForLoopExpression | this_XWhileExpression_9= ruleXWhileExpression | this_XDoWhileExpression_10= ruleXDoWhileExpression | this_XThrowExpression_11= ruleXThrowExpression | this_XReturnExpression_12= ruleXReturnExpression | this_XTryCatchFinallyExpression_13= ruleXTryCatchFinallyExpression | this_XParenthesizedExpression_14= ruleXParenthesizedExpression )
            int alt61=15;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3493:5: this_XConstructorCall_0= ruleXConstructorCall
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXConstructorCallParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXConstructorCall_in_ruleXPrimaryExpression8267);
                    this_XConstructorCall_0=ruleXConstructorCall();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XConstructorCall_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3503:5: this_XBlockExpression_1= ruleXBlockExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXBlockExpressionParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXBlockExpression_in_ruleXPrimaryExpression8294);
                    this_XBlockExpression_1=ruleXBlockExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XBlockExpression_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3513:5: this_XSwitchExpression_2= ruleXSwitchExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSwitchExpressionParserRuleCall_2()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXSwitchExpression_in_ruleXPrimaryExpression8321);
                    this_XSwitchExpression_2=ruleXSwitchExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XSwitchExpression_2; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3522:6: ( ( ( () 'synchronized' '(' ) )=>this_XSynchronizedExpression_3= ruleXSynchronizedExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3522:6: ( ( ( () 'synchronized' '(' ) )=>this_XSynchronizedExpression_3= ruleXSynchronizedExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3522:7: ( ( () 'synchronized' '(' ) )=>this_XSynchronizedExpression_3= ruleXSynchronizedExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSynchronizedExpressionParserRuleCall_3()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXSynchronizedExpression_in_ruleXPrimaryExpression8365);
                    this_XSynchronizedExpression_3=ruleXSynchronizedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XSynchronizedExpression_3; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }


                    }
                    break;
                case 5 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3536:5: this_XFeatureCall_4= ruleXFeatureCall
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXFeatureCallParserRuleCall_4()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXFeatureCall_in_ruleXPrimaryExpression8393);
                    this_XFeatureCall_4=ruleXFeatureCall();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XFeatureCall_4; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 6 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3546:5: this_XLiteral_5= ruleXLiteral
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXLiteralParserRuleCall_5()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXLiteral_in_ruleXPrimaryExpression8420);
                    this_XLiteral_5=ruleXLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XLiteral_5; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 7 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3556:5: this_XIfExpression_6= ruleXIfExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXIfExpressionParserRuleCall_6()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXIfExpression_in_ruleXPrimaryExpression8447);
                    this_XIfExpression_6=ruleXIfExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XIfExpression_6; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 8 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3565:6: ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=>this_XForLoopExpression_7= ruleXForLoopExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3565:6: ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=>this_XForLoopExpression_7= ruleXForLoopExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3565:7: ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=>this_XForLoopExpression_7= ruleXForLoopExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXForLoopExpressionParserRuleCall_7()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXForLoopExpression_in_ruleXPrimaryExpression8504);
                    this_XForLoopExpression_7=ruleXForLoopExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XForLoopExpression_7; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }


                    }
                    break;
                case 9 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3584:5: this_XBasicForLoopExpression_8= ruleXBasicForLoopExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXBasicForLoopExpressionParserRuleCall_8()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXBasicForLoopExpression_in_ruleXPrimaryExpression8532);
                    this_XBasicForLoopExpression_8=ruleXBasicForLoopExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XBasicForLoopExpression_8; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 10 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3594:5: this_XWhileExpression_9= ruleXWhileExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXWhileExpressionParserRuleCall_9()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXWhileExpression_in_ruleXPrimaryExpression8559);
                    this_XWhileExpression_9=ruleXWhileExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XWhileExpression_9; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 11 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3604:5: this_XDoWhileExpression_10= ruleXDoWhileExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXDoWhileExpressionParserRuleCall_10()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXDoWhileExpression_in_ruleXPrimaryExpression8586);
                    this_XDoWhileExpression_10=ruleXDoWhileExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XDoWhileExpression_10; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 12 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3614:5: this_XThrowExpression_11= ruleXThrowExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXThrowExpressionParserRuleCall_11()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXThrowExpression_in_ruleXPrimaryExpression8613);
                    this_XThrowExpression_11=ruleXThrowExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XThrowExpression_11; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 13 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3624:5: this_XReturnExpression_12= ruleXReturnExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXReturnExpressionParserRuleCall_12()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXReturnExpression_in_ruleXPrimaryExpression8640);
                    this_XReturnExpression_12=ruleXReturnExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XReturnExpression_12; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 14 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3634:5: this_XTryCatchFinallyExpression_13= ruleXTryCatchFinallyExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXTryCatchFinallyExpressionParserRuleCall_13()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXTryCatchFinallyExpression_in_ruleXPrimaryExpression8667);
                    this_XTryCatchFinallyExpression_13=ruleXTryCatchFinallyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XTryCatchFinallyExpression_13; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 15 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3644:5: this_XParenthesizedExpression_14= ruleXParenthesizedExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXParenthesizedExpressionParserRuleCall_14()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXParenthesizedExpression_in_ruleXPrimaryExpression8694);
                    this_XParenthesizedExpression_14=ruleXParenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XParenthesizedExpression_14; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXPrimaryExpression"


    // $ANTLR start "entryRuleXLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3660:1: entryRuleXLiteral returns [EObject current=null] : iv_ruleXLiteral= ruleXLiteral EOF ;
    public final EObject entryRuleXLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXLiteral = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3661:2: (iv_ruleXLiteral= ruleXLiteral EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3662:2: iv_ruleXLiteral= ruleXLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXLiteralRule()); 
            }
            pushFollow(FOLLOW_ruleXLiteral_in_entryRuleXLiteral8729);
            iv_ruleXLiteral=ruleXLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXLiteral; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXLiteral8739); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXLiteral"


    // $ANTLR start "ruleXLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3669:1: ruleXLiteral returns [EObject current=null] : (this_XCollectionLiteral_0= ruleXCollectionLiteral | ( ( ( () '[' ) )=>this_XClosure_1= ruleXClosure ) | this_XBooleanLiteral_2= ruleXBooleanLiteral | this_XNumberLiteral_3= ruleXNumberLiteral | this_XNullLiteral_4= ruleXNullLiteral | this_XStringLiteral_5= ruleXStringLiteral | this_XTypeLiteral_6= ruleXTypeLiteral ) ;
    public final EObject ruleXLiteral() throws RecognitionException {
        EObject current = null;

        EObject this_XCollectionLiteral_0 = null;

        EObject this_XClosure_1 = null;

        EObject this_XBooleanLiteral_2 = null;

        EObject this_XNumberLiteral_3 = null;

        EObject this_XNullLiteral_4 = null;

        EObject this_XStringLiteral_5 = null;

        EObject this_XTypeLiteral_6 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3672:28: ( (this_XCollectionLiteral_0= ruleXCollectionLiteral | ( ( ( () '[' ) )=>this_XClosure_1= ruleXClosure ) | this_XBooleanLiteral_2= ruleXBooleanLiteral | this_XNumberLiteral_3= ruleXNumberLiteral | this_XNullLiteral_4= ruleXNullLiteral | this_XStringLiteral_5= ruleXStringLiteral | this_XTypeLiteral_6= ruleXTypeLiteral ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3673:1: (this_XCollectionLiteral_0= ruleXCollectionLiteral | ( ( ( () '[' ) )=>this_XClosure_1= ruleXClosure ) | this_XBooleanLiteral_2= ruleXBooleanLiteral | this_XNumberLiteral_3= ruleXNumberLiteral | this_XNullLiteral_4= ruleXNullLiteral | this_XStringLiteral_5= ruleXStringLiteral | this_XTypeLiteral_6= ruleXTypeLiteral )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3673:1: (this_XCollectionLiteral_0= ruleXCollectionLiteral | ( ( ( () '[' ) )=>this_XClosure_1= ruleXClosure ) | this_XBooleanLiteral_2= ruleXBooleanLiteral | this_XNumberLiteral_3= ruleXNumberLiteral | this_XNullLiteral_4= ruleXNullLiteral | this_XStringLiteral_5= ruleXStringLiteral | this_XTypeLiteral_6= ruleXTypeLiteral )
            int alt62=7;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==66) ) {
                alt62=1;
            }
            else if ( (LA62_0==67) && (synpred23_InternalAqua())) {
                alt62=2;
            }
            else if ( ((LA62_0>=85 && LA62_0<=86)) ) {
                alt62=3;
            }
            else if ( ((LA62_0>=RULE_HEX && LA62_0<=RULE_DECIMAL)) ) {
                alt62=4;
            }
            else if ( (LA62_0==87) ) {
                alt62=5;
            }
            else if ( (LA62_0==RULE_STRING) ) {
                alt62=6;
            }
            else if ( (LA62_0==88) ) {
                alt62=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3674:5: this_XCollectionLiteral_0= ruleXCollectionLiteral
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXLiteralAccess().getXCollectionLiteralParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXCollectionLiteral_in_ruleXLiteral8786);
                    this_XCollectionLiteral_0=ruleXCollectionLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XCollectionLiteral_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3683:6: ( ( ( () '[' ) )=>this_XClosure_1= ruleXClosure )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3683:6: ( ( ( () '[' ) )=>this_XClosure_1= ruleXClosure )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3683:7: ( ( () '[' ) )=>this_XClosure_1= ruleXClosure
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXLiteralAccess().getXClosureParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXClosure_in_ruleXLiteral8826);
                    this_XClosure_1=ruleXClosure();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XClosure_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }


                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3696:5: this_XBooleanLiteral_2= ruleXBooleanLiteral
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXLiteralAccess().getXBooleanLiteralParserRuleCall_2()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXBooleanLiteral_in_ruleXLiteral8854);
                    this_XBooleanLiteral_2=ruleXBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XBooleanLiteral_2; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3706:5: this_XNumberLiteral_3= ruleXNumberLiteral
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXLiteralAccess().getXNumberLiteralParserRuleCall_3()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXNumberLiteral_in_ruleXLiteral8881);
                    this_XNumberLiteral_3=ruleXNumberLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XNumberLiteral_3; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3716:5: this_XNullLiteral_4= ruleXNullLiteral
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXLiteralAccess().getXNullLiteralParserRuleCall_4()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXNullLiteral_in_ruleXLiteral8908);
                    this_XNullLiteral_4=ruleXNullLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XNullLiteral_4; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 6 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3726:5: this_XStringLiteral_5= ruleXStringLiteral
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXLiteralAccess().getXStringLiteralParserRuleCall_5()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXStringLiteral_in_ruleXLiteral8935);
                    this_XStringLiteral_5=ruleXStringLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XStringLiteral_5; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 7 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3736:5: this_XTypeLiteral_6= ruleXTypeLiteral
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXLiteralAccess().getXTypeLiteralParserRuleCall_6()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXTypeLiteral_in_ruleXLiteral8962);
                    this_XTypeLiteral_6=ruleXTypeLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XTypeLiteral_6; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXLiteral"


    // $ANTLR start "entryRuleXCollectionLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3752:1: entryRuleXCollectionLiteral returns [EObject current=null] : iv_ruleXCollectionLiteral= ruleXCollectionLiteral EOF ;
    public final EObject entryRuleXCollectionLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXCollectionLiteral = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3753:2: (iv_ruleXCollectionLiteral= ruleXCollectionLiteral EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3754:2: iv_ruleXCollectionLiteral= ruleXCollectionLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXCollectionLiteralRule()); 
            }
            pushFollow(FOLLOW_ruleXCollectionLiteral_in_entryRuleXCollectionLiteral8997);
            iv_ruleXCollectionLiteral=ruleXCollectionLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXCollectionLiteral; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXCollectionLiteral9007); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXCollectionLiteral"


    // $ANTLR start "ruleXCollectionLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3761:1: ruleXCollectionLiteral returns [EObject current=null] : (this_XSetLiteral_0= ruleXSetLiteral | this_XListLiteral_1= ruleXListLiteral ) ;
    public final EObject ruleXCollectionLiteral() throws RecognitionException {
        EObject current = null;

        EObject this_XSetLiteral_0 = null;

        EObject this_XListLiteral_1 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3764:28: ( (this_XSetLiteral_0= ruleXSetLiteral | this_XListLiteral_1= ruleXListLiteral ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3765:1: (this_XSetLiteral_0= ruleXSetLiteral | this_XListLiteral_1= ruleXListLiteral )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3765:1: (this_XSetLiteral_0= ruleXSetLiteral | this_XListLiteral_1= ruleXListLiteral )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==66) ) {
                int LA63_1 = input.LA(2);

                if ( (LA63_1==67) ) {
                    alt63=2;
                }
                else if ( (LA63_1==15) ) {
                    alt63=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3766:5: this_XSetLiteral_0= ruleXSetLiteral
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXCollectionLiteralAccess().getXSetLiteralParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXSetLiteral_in_ruleXCollectionLiteral9054);
                    this_XSetLiteral_0=ruleXSetLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XSetLiteral_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3776:5: this_XListLiteral_1= ruleXListLiteral
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXCollectionLiteralAccess().getXListLiteralParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXListLiteral_in_ruleXCollectionLiteral9081);
                    this_XListLiteral_1=ruleXListLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XListLiteral_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXCollectionLiteral"


    // $ANTLR start "entryRuleXSetLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3792:1: entryRuleXSetLiteral returns [EObject current=null] : iv_ruleXSetLiteral= ruleXSetLiteral EOF ;
    public final EObject entryRuleXSetLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXSetLiteral = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3793:2: (iv_ruleXSetLiteral= ruleXSetLiteral EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3794:2: iv_ruleXSetLiteral= ruleXSetLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXSetLiteralRule()); 
            }
            pushFollow(FOLLOW_ruleXSetLiteral_in_entryRuleXSetLiteral9116);
            iv_ruleXSetLiteral=ruleXSetLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXSetLiteral; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXSetLiteral9126); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXSetLiteral"


    // $ANTLR start "ruleXSetLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3801:1: ruleXSetLiteral returns [EObject current=null] : ( () otherlv_1= '#' otherlv_2= '{' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= '}' ) ;
    public final EObject ruleXSetLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3804:28: ( ( () otherlv_1= '#' otherlv_2= '{' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= '}' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3805:1: ( () otherlv_1= '#' otherlv_2= '{' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= '}' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3805:1: ( () otherlv_1= '#' otherlv_2= '{' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= '}' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3805:2: () otherlv_1= '#' otherlv_2= '{' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= '}'
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3805:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3806:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXSetLiteralAccess().getXSetLiteralAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,66,FOLLOW_66_in_ruleXSetLiteral9172); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXSetLiteralAccess().getNumberSignKeyword_1());
                  
            }
            otherlv_2=(Token)match(input,15,FOLLOW_15_in_ruleXSetLiteral9184); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_2, grammarAccess.getXSetLiteralAccess().getLeftCurlyBracketKeyword_2());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3819:1: ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0>=RULE_ID && LA65_0<=RULE_DECIMAL)||LA65_0==15||(LA65_0>=24 && LA65_0<=25)||LA65_0==34||LA65_0==38||(LA65_0>=54 && LA65_0<=55)||LA65_0==60||(LA65_0>=66 && LA65_0<=67)||LA65_0==71||LA65_0==73||(LA65_0>=76 && LA65_0<=78)||(LA65_0>=81 && LA65_0<=91)||LA65_0==93) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3819:2: ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3819:2: ( (lv_elements_3_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3820:1: (lv_elements_3_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3820:1: (lv_elements_3_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3821:3: lv_elements_3_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXSetLiteral9206);
                    lv_elements_3_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXSetLiteralRule());
                      	        }
                             		add(
                             			current, 
                             			"elements",
                              		lv_elements_3_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3837:2: (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )*
                    loop64:
                    do {
                        int alt64=2;
                        int LA64_0 = input.LA(1);

                        if ( (LA64_0==26) ) {
                            alt64=1;
                        }


                        switch (alt64) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3837:4: otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) )
                    	    {
                    	    otherlv_4=(Token)match(input,26,FOLLOW_26_in_ruleXSetLiteral9219); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_4, grammarAccess.getXSetLiteralAccess().getCommaKeyword_3_1_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3841:1: ( (lv_elements_5_0= ruleXExpression ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3842:1: (lv_elements_5_0= ruleXExpression )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3842:1: (lv_elements_5_0= ruleXExpression )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3843:3: lv_elements_5_0= ruleXExpression
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleXExpression_in_ruleXSetLiteral9240);
                    	    lv_elements_5_0=ruleXExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getXSetLiteralRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"elements",
                    	              		lv_elements_5_0, 
                    	              		"XExpression");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,16,FOLLOW_16_in_ruleXSetLiteral9256); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_6, grammarAccess.getXSetLiteralAccess().getRightCurlyBracketKeyword_4());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXSetLiteral"


    // $ANTLR start "entryRuleXListLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3871:1: entryRuleXListLiteral returns [EObject current=null] : iv_ruleXListLiteral= ruleXListLiteral EOF ;
    public final EObject entryRuleXListLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXListLiteral = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3872:2: (iv_ruleXListLiteral= ruleXListLiteral EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3873:2: iv_ruleXListLiteral= ruleXListLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXListLiteralRule()); 
            }
            pushFollow(FOLLOW_ruleXListLiteral_in_entryRuleXListLiteral9292);
            iv_ruleXListLiteral=ruleXListLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXListLiteral; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXListLiteral9302); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXListLiteral"


    // $ANTLR start "ruleXListLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3880:1: ruleXListLiteral returns [EObject current=null] : ( () otherlv_1= '#' otherlv_2= '[' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= ']' ) ;
    public final EObject ruleXListLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3883:28: ( ( () otherlv_1= '#' otherlv_2= '[' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= ']' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3884:1: ( () otherlv_1= '#' otherlv_2= '[' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= ']' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3884:1: ( () otherlv_1= '#' otherlv_2= '[' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= ']' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3884:2: () otherlv_1= '#' otherlv_2= '[' ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )? otherlv_6= ']'
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3884:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3885:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXListLiteralAccess().getXListLiteralAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,66,FOLLOW_66_in_ruleXListLiteral9348); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXListLiteralAccess().getNumberSignKeyword_1());
                  
            }
            otherlv_2=(Token)match(input,67,FOLLOW_67_in_ruleXListLiteral9360); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_2, grammarAccess.getXListLiteralAccess().getLeftSquareBracketKeyword_2());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3898:1: ( ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )* )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( ((LA67_0>=RULE_ID && LA67_0<=RULE_DECIMAL)||LA67_0==15||(LA67_0>=24 && LA67_0<=25)||LA67_0==34||LA67_0==38||(LA67_0>=54 && LA67_0<=55)||LA67_0==60||(LA67_0>=66 && LA67_0<=67)||LA67_0==71||LA67_0==73||(LA67_0>=76 && LA67_0<=78)||(LA67_0>=81 && LA67_0<=91)||LA67_0==93) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3898:2: ( (lv_elements_3_0= ruleXExpression ) ) (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3898:2: ( (lv_elements_3_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3899:1: (lv_elements_3_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3899:1: (lv_elements_3_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3900:3: lv_elements_3_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXListLiteral9382);
                    lv_elements_3_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXListLiteralRule());
                      	        }
                             		add(
                             			current, 
                             			"elements",
                              		lv_elements_3_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3916:2: (otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) ) )*
                    loop66:
                    do {
                        int alt66=2;
                        int LA66_0 = input.LA(1);

                        if ( (LA66_0==26) ) {
                            alt66=1;
                        }


                        switch (alt66) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3916:4: otherlv_4= ',' ( (lv_elements_5_0= ruleXExpression ) )
                    	    {
                    	    otherlv_4=(Token)match(input,26,FOLLOW_26_in_ruleXListLiteral9395); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_4, grammarAccess.getXListLiteralAccess().getCommaKeyword_3_1_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3920:1: ( (lv_elements_5_0= ruleXExpression ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3921:1: (lv_elements_5_0= ruleXExpression )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3921:1: (lv_elements_5_0= ruleXExpression )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3922:3: lv_elements_5_0= ruleXExpression
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleXExpression_in_ruleXListLiteral9416);
                    	    lv_elements_5_0=ruleXExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getXListLiteralRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"elements",
                    	              		lv_elements_5_0, 
                    	              		"XExpression");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop66;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,68,FOLLOW_68_in_ruleXListLiteral9432); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_6, grammarAccess.getXListLiteralAccess().getRightSquareBracketKeyword_4());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXListLiteral"


    // $ANTLR start "entryRuleXClosure"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3950:1: entryRuleXClosure returns [EObject current=null] : iv_ruleXClosure= ruleXClosure EOF ;
    public final EObject entryRuleXClosure() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXClosure = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3951:2: (iv_ruleXClosure= ruleXClosure EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3952:2: iv_ruleXClosure= ruleXClosure EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXClosureRule()); 
            }
            pushFollow(FOLLOW_ruleXClosure_in_entryRuleXClosure9468);
            iv_ruleXClosure=ruleXClosure();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXClosure; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXClosure9478); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXClosure"


    // $ANTLR start "ruleXClosure"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3959:1: ruleXClosure returns [EObject current=null] : ( ( ( ( () '[' ) )=> ( () otherlv_1= '[' ) ) ( ( ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) ) ) )? ( (lv_expression_6_0= ruleXExpressionInClosure ) ) otherlv_7= ']' ) ;
    public final EObject ruleXClosure() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token lv_explicitSyntax_5_0=null;
        Token otherlv_7=null;
        EObject lv_declaredFormalParameters_2_0 = null;

        EObject lv_declaredFormalParameters_4_0 = null;

        EObject lv_expression_6_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3962:28: ( ( ( ( ( () '[' ) )=> ( () otherlv_1= '[' ) ) ( ( ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) ) ) )? ( (lv_expression_6_0= ruleXExpressionInClosure ) ) otherlv_7= ']' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3963:1: ( ( ( ( () '[' ) )=> ( () otherlv_1= '[' ) ) ( ( ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) ) ) )? ( (lv_expression_6_0= ruleXExpressionInClosure ) ) otherlv_7= ']' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3963:1: ( ( ( ( () '[' ) )=> ( () otherlv_1= '[' ) ) ( ( ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) ) ) )? ( (lv_expression_6_0= ruleXExpressionInClosure ) ) otherlv_7= ']' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3963:2: ( ( ( () '[' ) )=> ( () otherlv_1= '[' ) ) ( ( ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) ) ) )? ( (lv_expression_6_0= ruleXExpressionInClosure ) ) otherlv_7= ']'
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3963:2: ( ( ( () '[' ) )=> ( () otherlv_1= '[' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3963:3: ( ( () '[' ) )=> ( () otherlv_1= '[' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3965:5: ( () otherlv_1= '[' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3965:6: () otherlv_1= '['
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3965:6: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3966:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXClosureAccess().getXClosureAction_0_0_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,67,FOLLOW_67_in_ruleXClosure9538); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXClosureAccess().getLeftSquareBracketKeyword_0_0_1());
                  
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3975:3: ( ( ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) ) ) )?
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3975:4: ( ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3990:6: ( ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3990:7: ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3990:7: ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==RULE_ID||LA69_0==25||LA69_0==33) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3990:8: ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )*
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3990:8: ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3991:1: (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3991:1: (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3992:3: lv_declaredFormalParameters_2_0= ruleJvmFormalParameter
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleJvmFormalParameter_in_ruleXClosure9611);
                            lv_declaredFormalParameters_2_0=ruleJvmFormalParameter();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXClosureRule());
                              	        }
                                     		add(
                                     			current, 
                                     			"declaredFormalParameters",
                                      		lv_declaredFormalParameters_2_0, 
                                      		"JvmFormalParameter");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }

                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4008:2: (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )*
                            loop68:
                            do {
                                int alt68=2;
                                int LA68_0 = input.LA(1);

                                if ( (LA68_0==26) ) {
                                    alt68=1;
                                }


                                switch (alt68) {
                            	case 1 :
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4008:4: otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) )
                            	    {
                            	    otherlv_3=(Token)match(input,26,FOLLOW_26_in_ruleXClosure9624); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	          	newLeafNode(otherlv_3, grammarAccess.getXClosureAccess().getCommaKeyword_1_0_0_1_0());
                            	          
                            	    }
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4012:1: ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) )
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4013:1: (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter )
                            	    {
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4013:1: (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter )
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4014:3: lv_declaredFormalParameters_4_0= ruleJvmFormalParameter
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	       
                            	      	        newCompositeNode(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0()); 
                            	      	    
                            	    }
                            	    pushFollow(FOLLOW_ruleJvmFormalParameter_in_ruleXClosure9645);
                            	    lv_declaredFormalParameters_4_0=ruleJvmFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      	        if (current==null) {
                            	      	            current = createModelElementForParent(grammarAccess.getXClosureRule());
                            	      	        }
                            	             		add(
                            	             			current, 
                            	             			"declaredFormalParameters",
                            	              		lv_declaredFormalParameters_4_0, 
                            	              		"JvmFormalParameter");
                            	      	        afterParserOrEnumRuleCall();
                            	      	    
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop68;
                                }
                            } while (true);


                            }
                            break;

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4030:6: ( (lv_explicitSyntax_5_0= '|' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4031:1: (lv_explicitSyntax_5_0= '|' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4031:1: (lv_explicitSyntax_5_0= '|' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4032:3: lv_explicitSyntax_5_0= '|'
                    {
                    lv_explicitSyntax_5_0=(Token)match(input,69,FOLLOW_69_in_ruleXClosure9667); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              newLeafNode(lv_explicitSyntax_5_0, grammarAccess.getXClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0());
                          
                    }
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElement(grammarAccess.getXClosureRule());
                      	        }
                             		setWithLastConsumed(current, "explicitSyntax", true, "|");
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4045:5: ( (lv_expression_6_0= ruleXExpressionInClosure ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4046:1: (lv_expression_6_0= ruleXExpressionInClosure )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4046:1: (lv_expression_6_0= ruleXExpressionInClosure )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4047:3: lv_expression_6_0= ruleXExpressionInClosure
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXClosureAccess().getExpressionXExpressionInClosureParserRuleCall_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpressionInClosure_in_ruleXClosure9704);
            lv_expression_6_0=ruleXExpressionInClosure();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXClosureRule());
              	        }
                     		set(
                     			current, 
                     			"expression",
                      		lv_expression_6_0, 
                      		"XExpressionInClosure");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_7=(Token)match(input,68,FOLLOW_68_in_ruleXClosure9716); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_7, grammarAccess.getXClosureAccess().getRightSquareBracketKeyword_3());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXClosure"


    // $ANTLR start "entryRuleXExpressionInClosure"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4075:1: entryRuleXExpressionInClosure returns [EObject current=null] : iv_ruleXExpressionInClosure= ruleXExpressionInClosure EOF ;
    public final EObject entryRuleXExpressionInClosure() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpressionInClosure = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4076:2: (iv_ruleXExpressionInClosure= ruleXExpressionInClosure EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4077:2: iv_ruleXExpressionInClosure= ruleXExpressionInClosure EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpressionInClosureRule()); 
            }
            pushFollow(FOLLOW_ruleXExpressionInClosure_in_entryRuleXExpressionInClosure9752);
            iv_ruleXExpressionInClosure=ruleXExpressionInClosure();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpressionInClosure; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXExpressionInClosure9762); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpressionInClosure"


    // $ANTLR start "ruleXExpressionInClosure"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4084:1: ruleXExpressionInClosure returns [EObject current=null] : ( () ( ( (lv_expressions_1_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_2= ';' )? )* ) ;
    public final EObject ruleXExpressionInClosure() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject lv_expressions_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4087:28: ( ( () ( ( (lv_expressions_1_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_2= ';' )? )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4088:1: ( () ( ( (lv_expressions_1_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_2= ';' )? )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4088:1: ( () ( ( (lv_expressions_1_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_2= ';' )? )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4088:2: () ( ( (lv_expressions_1_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_2= ';' )? )*
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4088:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4089:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXExpressionInClosureAccess().getXBlockExpressionAction_0(),
                          current);
                  
            }

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4094:2: ( ( (lv_expressions_1_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_2= ';' )? )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( ((LA72_0>=RULE_ID && LA72_0<=RULE_DECIMAL)||LA72_0==15||(LA72_0>=24 && LA72_0<=25)||LA72_0==34||LA72_0==38||(LA72_0>=54 && LA72_0<=55)||LA72_0==60||(LA72_0>=66 && LA72_0<=67)||LA72_0==71||LA72_0==73||(LA72_0>=76 && LA72_0<=91)||LA72_0==93) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4094:3: ( (lv_expressions_1_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_2= ';' )?
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4094:3: ( (lv_expressions_1_0= ruleXExpressionOrVarDeclaration ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4095:1: (lv_expressions_1_0= ruleXExpressionOrVarDeclaration )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4095:1: (lv_expressions_1_0= ruleXExpressionOrVarDeclaration )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4096:3: lv_expressions_1_0= ruleXExpressionOrVarDeclaration
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXExpressionInClosureAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_1_0_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXExpressionOrVarDeclaration_in_ruleXExpressionInClosure9818);
            	    lv_expressions_1_0=ruleXExpressionOrVarDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXExpressionInClosureRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"expressions",
            	              		lv_expressions_1_0, 
            	              		"XExpressionOrVarDeclaration");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4112:2: (otherlv_2= ';' )?
            	    int alt71=2;
            	    int LA71_0 = input.LA(1);

            	    if ( (LA71_0==70) ) {
            	        alt71=1;
            	    }
            	    switch (alt71) {
            	        case 1 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4112:4: otherlv_2= ';'
            	            {
            	            otherlv_2=(Token)match(input,70,FOLLOW_70_in_ruleXExpressionInClosure9831); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                  	newLeafNode(otherlv_2, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
            	                  
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpressionInClosure"


    // $ANTLR start "entryRuleXShortClosure"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4124:1: entryRuleXShortClosure returns [EObject current=null] : iv_ruleXShortClosure= ruleXShortClosure EOF ;
    public final EObject entryRuleXShortClosure() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXShortClosure = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4125:2: (iv_ruleXShortClosure= ruleXShortClosure EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4126:2: iv_ruleXShortClosure= ruleXShortClosure EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXShortClosureRule()); 
            }
            pushFollow(FOLLOW_ruleXShortClosure_in_entryRuleXShortClosure9871);
            iv_ruleXShortClosure=ruleXShortClosure();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXShortClosure; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXShortClosure9881); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXShortClosure"


    // $ANTLR start "ruleXShortClosure"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4133:1: ruleXShortClosure returns [EObject current=null] : ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( () ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_4_0= '|' ) ) ) ) ( (lv_expression_5_0= ruleXExpression ) ) ) ;
    public final EObject ruleXShortClosure() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token lv_explicitSyntax_4_0=null;
        EObject lv_declaredFormalParameters_1_0 = null;

        EObject lv_declaredFormalParameters_3_0 = null;

        EObject lv_expression_5_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4136:28: ( ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( () ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_4_0= '|' ) ) ) ) ( (lv_expression_5_0= ruleXExpression ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4137:1: ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( () ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_4_0= '|' ) ) ) ) ( (lv_expression_5_0= ruleXExpression ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4137:1: ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( () ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_4_0= '|' ) ) ) ) ( (lv_expression_5_0= ruleXExpression ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4137:2: ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( () ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_4_0= '|' ) ) ) ) ( (lv_expression_5_0= ruleXExpression ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4137:2: ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( () ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_4_0= '|' ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4137:3: ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( () ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_4_0= '|' ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4153:6: ( () ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_4_0= '|' ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4153:7: () ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_4_0= '|' ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4153:7: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4154:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXShortClosureAccess().getXClosureAction_0_0_0(),
                          current);
                  
            }

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4159:2: ( ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )* )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==RULE_ID||LA74_0==25||LA74_0==33) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4159:3: ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) ) (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4159:3: ( (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4160:1: (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4160:1: (lv_declaredFormalParameters_1_0= ruleJvmFormalParameter )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4161:3: lv_declaredFormalParameters_1_0= ruleJvmFormalParameter
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmFormalParameter_in_ruleXShortClosure9989);
                    lv_declaredFormalParameters_1_0=ruleJvmFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXShortClosureRule());
                      	        }
                             		add(
                             			current, 
                             			"declaredFormalParameters",
                              		lv_declaredFormalParameters_1_0, 
                              		"JvmFormalParameter");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4177:2: (otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) ) )*
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( (LA73_0==26) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4177:4: otherlv_2= ',' ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) )
                    	    {
                    	    otherlv_2=(Token)match(input,26,FOLLOW_26_in_ruleXShortClosure10002); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_2, grammarAccess.getXShortClosureAccess().getCommaKeyword_0_0_1_1_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4181:1: ( (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4182:1: (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4182:1: (lv_declaredFormalParameters_3_0= ruleJvmFormalParameter )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4183:3: lv_declaredFormalParameters_3_0= ruleJvmFormalParameter
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleJvmFormalParameter_in_ruleXShortClosure10023);
                    	    lv_declaredFormalParameters_3_0=ruleJvmFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getXShortClosureRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"declaredFormalParameters",
                    	              		lv_declaredFormalParameters_3_0, 
                    	              		"JvmFormalParameter");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop73;
                        }
                    } while (true);


                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4199:6: ( (lv_explicitSyntax_4_0= '|' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4200:1: (lv_explicitSyntax_4_0= '|' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4200:1: (lv_explicitSyntax_4_0= '|' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4201:3: lv_explicitSyntax_4_0= '|'
            {
            lv_explicitSyntax_4_0=(Token)match(input,69,FOLLOW_69_in_ruleXShortClosure10045); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                      newLeafNode(lv_explicitSyntax_4_0, grammarAccess.getXShortClosureAccess().getExplicitSyntaxVerticalLineKeyword_0_0_2_0());
                  
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getXShortClosureRule());
              	        }
                     		setWithLastConsumed(current, "explicitSyntax", true, "|");
              	    
            }

            }


            }


            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4214:4: ( (lv_expression_5_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4215:1: (lv_expression_5_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4215:1: (lv_expression_5_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4216:3: lv_expression_5_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXShortClosureAccess().getExpressionXExpressionParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXShortClosure10081);
            lv_expression_5_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXShortClosureRule());
              	        }
                     		set(
                     			current, 
                     			"expression",
                      		lv_expression_5_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXShortClosure"


    // $ANTLR start "entryRuleXParenthesizedExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4240:1: entryRuleXParenthesizedExpression returns [EObject current=null] : iv_ruleXParenthesizedExpression= ruleXParenthesizedExpression EOF ;
    public final EObject entryRuleXParenthesizedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXParenthesizedExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4241:2: (iv_ruleXParenthesizedExpression= ruleXParenthesizedExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4242:2: iv_ruleXParenthesizedExpression= ruleXParenthesizedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXParenthesizedExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXParenthesizedExpression_in_entryRuleXParenthesizedExpression10117);
            iv_ruleXParenthesizedExpression=ruleXParenthesizedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXParenthesizedExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXParenthesizedExpression10127); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXParenthesizedExpression"


    // $ANTLR start "ruleXParenthesizedExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4249:1: ruleXParenthesizedExpression returns [EObject current=null] : (otherlv_0= '(' this_XExpression_1= ruleXExpression otherlv_2= ')' ) ;
    public final EObject ruleXParenthesizedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_XExpression_1 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4252:28: ( (otherlv_0= '(' this_XExpression_1= ruleXExpression otherlv_2= ')' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4253:1: (otherlv_0= '(' this_XExpression_1= ruleXExpression otherlv_2= ')' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4253:1: (otherlv_0= '(' this_XExpression_1= ruleXExpression otherlv_2= ')' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4253:3: otherlv_0= '(' this_XExpression_1= ruleXExpression otherlv_2= ')'
            {
            otherlv_0=(Token)match(input,25,FOLLOW_25_in_ruleXParenthesizedExpression10164); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
                  
            }
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getXParenthesizedExpressionAccess().getXExpressionParserRuleCall_1()); 
                  
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXParenthesizedExpression10186);
            this_XExpression_1=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_XExpression_1; 
                      afterParserOrEnumRuleCall();
                  
            }
            otherlv_2=(Token)match(input,27,FOLLOW_27_in_ruleXParenthesizedExpression10197); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_2, grammarAccess.getXParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXParenthesizedExpression"


    // $ANTLR start "entryRuleXIfExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4278:1: entryRuleXIfExpression returns [EObject current=null] : iv_ruleXIfExpression= ruleXIfExpression EOF ;
    public final EObject entryRuleXIfExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXIfExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4279:2: (iv_ruleXIfExpression= ruleXIfExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4280:2: iv_ruleXIfExpression= ruleXIfExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXIfExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXIfExpression_in_entryRuleXIfExpression10233);
            iv_ruleXIfExpression=ruleXIfExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXIfExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXIfExpression10243); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXIfExpression"


    // $ANTLR start "ruleXIfExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4287:1: ruleXIfExpression returns [EObject current=null] : ( () otherlv_1= 'if' otherlv_2= '(' ( (lv_if_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_then_5_0= ruleXExpression ) ) ( ( ( 'else' )=>otherlv_6= 'else' ) ( (lv_else_7_0= ruleXExpression ) ) )? ) ;
    public final EObject ruleXIfExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_if_3_0 = null;

        EObject lv_then_5_0 = null;

        EObject lv_else_7_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4290:28: ( ( () otherlv_1= 'if' otherlv_2= '(' ( (lv_if_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_then_5_0= ruleXExpression ) ) ( ( ( 'else' )=>otherlv_6= 'else' ) ( (lv_else_7_0= ruleXExpression ) ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4291:1: ( () otherlv_1= 'if' otherlv_2= '(' ( (lv_if_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_then_5_0= ruleXExpression ) ) ( ( ( 'else' )=>otherlv_6= 'else' ) ( (lv_else_7_0= ruleXExpression ) ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4291:1: ( () otherlv_1= 'if' otherlv_2= '(' ( (lv_if_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_then_5_0= ruleXExpression ) ) ( ( ( 'else' )=>otherlv_6= 'else' ) ( (lv_else_7_0= ruleXExpression ) ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4291:2: () otherlv_1= 'if' otherlv_2= '(' ( (lv_if_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_then_5_0= ruleXExpression ) ) ( ( ( 'else' )=>otherlv_6= 'else' ) ( (lv_else_7_0= ruleXExpression ) ) )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4291:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4292:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXIfExpressionAccess().getXIfExpressionAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,71,FOLLOW_71_in_ruleXIfExpression10289); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXIfExpressionAccess().getIfKeyword_1());
                  
            }
            otherlv_2=(Token)match(input,25,FOLLOW_25_in_ruleXIfExpression10301); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_2, grammarAccess.getXIfExpressionAccess().getLeftParenthesisKeyword_2());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4305:1: ( (lv_if_3_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4306:1: (lv_if_3_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4306:1: (lv_if_3_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4307:3: lv_if_3_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getIfXExpressionParserRuleCall_3_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXIfExpression10322);
            lv_if_3_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"if",
                      		lv_if_3_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_4=(Token)match(input,27,FOLLOW_27_in_ruleXIfExpression10334); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_4, grammarAccess.getXIfExpressionAccess().getRightParenthesisKeyword_4());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4327:1: ( (lv_then_5_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4328:1: (lv_then_5_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4328:1: (lv_then_5_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4329:3: lv_then_5_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getThenXExpressionParserRuleCall_5_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXIfExpression10355);
            lv_then_5_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"then",
                      		lv_then_5_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4345:2: ( ( ( 'else' )=>otherlv_6= 'else' ) ( (lv_else_7_0= ruleXExpression ) ) )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==72) ) {
                int LA75_1 = input.LA(2);

                if ( (synpred27_InternalAqua()) ) {
                    alt75=1;
                }
            }
            switch (alt75) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4345:3: ( ( 'else' )=>otherlv_6= 'else' ) ( (lv_else_7_0= ruleXExpression ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4345:3: ( ( 'else' )=>otherlv_6= 'else' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4345:4: ( 'else' )=>otherlv_6= 'else'
                    {
                    otherlv_6=(Token)match(input,72,FOLLOW_72_in_ruleXIfExpression10376); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_6, grammarAccess.getXIfExpressionAccess().getElseKeyword_6_0());
                          
                    }

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4350:2: ( (lv_else_7_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4351:1: (lv_else_7_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4351:1: (lv_else_7_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4352:3: lv_else_7_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getElseXExpressionParserRuleCall_6_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXIfExpression10398);
                    lv_else_7_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
                      	        }
                             		set(
                             			current, 
                             			"else",
                              		lv_else_7_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXIfExpression"


    // $ANTLR start "entryRuleXSwitchExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4376:1: entryRuleXSwitchExpression returns [EObject current=null] : iv_ruleXSwitchExpression= ruleXSwitchExpression EOF ;
    public final EObject entryRuleXSwitchExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXSwitchExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4377:2: (iv_ruleXSwitchExpression= ruleXSwitchExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4378:2: iv_ruleXSwitchExpression= ruleXSwitchExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXSwitchExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXSwitchExpression_in_entryRuleXSwitchExpression10436);
            iv_ruleXSwitchExpression=ruleXSwitchExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXSwitchExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXSwitchExpression10446); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXSwitchExpression"


    // $ANTLR start "ruleXSwitchExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4385:1: ruleXSwitchExpression returns [EObject current=null] : ( () otherlv_1= 'switch' ( ( ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')' ) | ( ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) ) ) ) otherlv_10= '{' ( (lv_cases_11_0= ruleXCasePart ) )* (otherlv_12= 'default' otherlv_13= ':' ( (lv_default_14_0= ruleXExpression ) ) )? otherlv_15= '}' ) ;
    public final EObject ruleXSwitchExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        EObject lv_declaredParam_3_0 = null;

        EObject lv_switch_5_0 = null;

        EObject lv_declaredParam_7_0 = null;

        EObject lv_switch_9_0 = null;

        EObject lv_cases_11_0 = null;

        EObject lv_default_14_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4388:28: ( ( () otherlv_1= 'switch' ( ( ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')' ) | ( ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) ) ) ) otherlv_10= '{' ( (lv_cases_11_0= ruleXCasePart ) )* (otherlv_12= 'default' otherlv_13= ':' ( (lv_default_14_0= ruleXExpression ) ) )? otherlv_15= '}' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4389:1: ( () otherlv_1= 'switch' ( ( ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')' ) | ( ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) ) ) ) otherlv_10= '{' ( (lv_cases_11_0= ruleXCasePart ) )* (otherlv_12= 'default' otherlv_13= ':' ( (lv_default_14_0= ruleXExpression ) ) )? otherlv_15= '}' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4389:1: ( () otherlv_1= 'switch' ( ( ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')' ) | ( ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) ) ) ) otherlv_10= '{' ( (lv_cases_11_0= ruleXCasePart ) )* (otherlv_12= 'default' otherlv_13= ':' ( (lv_default_14_0= ruleXExpression ) ) )? otherlv_15= '}' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4389:2: () otherlv_1= 'switch' ( ( ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')' ) | ( ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) ) ) ) otherlv_10= '{' ( (lv_cases_11_0= ruleXCasePart ) )* (otherlv_12= 'default' otherlv_13= ':' ( (lv_default_14_0= ruleXExpression ) ) )? otherlv_15= '}'
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4389:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4390:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXSwitchExpressionAccess().getXSwitchExpressionAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,73,FOLLOW_73_in_ruleXSwitchExpression10492); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXSwitchExpressionAccess().getSwitchKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:1: ( ( ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')' ) | ( ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) ) ) )
            int alt77=2;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:2: ( ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:2: ( ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:3: ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')'
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:3: ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:4: ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4405:5: (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4405:7: otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':'
                    {
                    otherlv_2=(Token)match(input,25,FOLLOW_25_in_ruleXSwitchExpression10530); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_2, grammarAccess.getXSwitchExpressionAccess().getLeftParenthesisKeyword_2_0_0_0_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4409:1: ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4410:1: (lv_declaredParam_3_0= ruleJvmFormalParameter )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4410:1: (lv_declaredParam_3_0= ruleJvmFormalParameter )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4411:3: lv_declaredParam_3_0= ruleJvmFormalParameter
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmFormalParameter_in_ruleXSwitchExpression10551);
                    lv_declaredParam_3_0=ruleJvmFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
                      	        }
                             		set(
                             			current, 
                             			"declaredParam",
                              		lv_declaredParam_3_0, 
                              		"JvmFormalParameter");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,22,FOLLOW_22_in_ruleXSwitchExpression10563); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_4, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_0_0_0_2());
                          
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4431:3: ( (lv_switch_5_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4432:1: (lv_switch_5_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4432:1: (lv_switch_5_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4433:3: lv_switch_5_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_0_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXSwitchExpression10586);
                    lv_switch_5_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
                      	        }
                             		set(
                             			current, 
                             			"switch",
                              		lv_switch_5_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    otherlv_6=(Token)match(input,27,FOLLOW_27_in_ruleXSwitchExpression10598); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_6, grammarAccess.getXSwitchExpressionAccess().getRightParenthesisKeyword_2_0_2());
                          
                    }

                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:6: ( ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:6: ( ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:7: ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:7: ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )?
                    int alt76=2;
                    alt76 = dfa76.predict(input);
                    switch (alt76) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:8: ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4459:5: ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4459:6: ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':'
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4459:6: ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4460:1: (lv_declaredParam_7_0= ruleJvmFormalParameter )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4460:1: (lv_declaredParam_7_0= ruleJvmFormalParameter )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4461:3: lv_declaredParam_7_0= ruleJvmFormalParameter
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleJvmFormalParameter_in_ruleXSwitchExpression10647);
                            lv_declaredParam_7_0=ruleJvmFormalParameter();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
                              	        }
                                     		set(
                                     			current, 
                                     			"declaredParam",
                                      		lv_declaredParam_7_0, 
                                      		"JvmFormalParameter");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }

                            otherlv_8=(Token)match(input,22,FOLLOW_22_in_ruleXSwitchExpression10659); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                  	newLeafNode(otherlv_8, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_1_0_0_1());
                                  
                            }

                            }


                            }
                            break;

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4481:4: ( (lv_switch_9_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4482:1: (lv_switch_9_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4482:1: (lv_switch_9_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4483:3: lv_switch_9_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_1_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXSwitchExpression10683);
                    lv_switch_9_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
                      	        }
                             		set(
                             			current, 
                             			"switch",
                              		lv_switch_9_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;

            }

            otherlv_10=(Token)match(input,15,FOLLOW_15_in_ruleXSwitchExpression10697); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_10, grammarAccess.getXSwitchExpressionAccess().getLeftCurlyBracketKeyword_3());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4503:1: ( (lv_cases_11_0= ruleXCasePart ) )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==RULE_ID||LA78_0==22||(LA78_0>=25 && LA78_0<=26)||LA78_0==33||LA78_0==75) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4504:1: (lv_cases_11_0= ruleXCasePart )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4504:1: (lv_cases_11_0= ruleXCasePart )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4505:3: lv_cases_11_0= ruleXCasePart
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getCasesXCasePartParserRuleCall_4_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXCasePart_in_ruleXSwitchExpression10718);
            	    lv_cases_11_0=ruleXCasePart();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"cases",
            	              		lv_cases_11_0, 
            	              		"XCasePart");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4521:3: (otherlv_12= 'default' otherlv_13= ':' ( (lv_default_14_0= ruleXExpression ) ) )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==74) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4521:5: otherlv_12= 'default' otherlv_13= ':' ( (lv_default_14_0= ruleXExpression ) )
                    {
                    otherlv_12=(Token)match(input,74,FOLLOW_74_in_ruleXSwitchExpression10732); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_12, grammarAccess.getXSwitchExpressionAccess().getDefaultKeyword_5_0());
                          
                    }
                    otherlv_13=(Token)match(input,22,FOLLOW_22_in_ruleXSwitchExpression10744); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_13, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_5_1());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4529:1: ( (lv_default_14_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4530:1: (lv_default_14_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4530:1: (lv_default_14_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4531:3: lv_default_14_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDefaultXExpressionParserRuleCall_5_2_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXSwitchExpression10765);
                    lv_default_14_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
                      	        }
                             		set(
                             			current, 
                             			"default",
                              		lv_default_14_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_15=(Token)match(input,16,FOLLOW_16_in_ruleXSwitchExpression10779); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_15, grammarAccess.getXSwitchExpressionAccess().getRightCurlyBracketKeyword_6());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXSwitchExpression"


    // $ANTLR start "entryRuleXCasePart"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4559:1: entryRuleXCasePart returns [EObject current=null] : iv_ruleXCasePart= ruleXCasePart EOF ;
    public final EObject entryRuleXCasePart() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXCasePart = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4560:2: (iv_ruleXCasePart= ruleXCasePart EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4561:2: iv_ruleXCasePart= ruleXCasePart EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXCasePartRule()); 
            }
            pushFollow(FOLLOW_ruleXCasePart_in_entryRuleXCasePart10815);
            iv_ruleXCasePart=ruleXCasePart();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXCasePart; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXCasePart10825); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXCasePart"


    // $ANTLR start "ruleXCasePart"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4568:1: ruleXCasePart returns [EObject current=null] : ( () ( (lv_typeGuard_1_0= ruleJvmTypeReference ) )? (otherlv_2= 'case' ( (lv_case_3_0= ruleXExpression ) ) )? ( (otherlv_4= ':' ( (lv_then_5_0= ruleXExpression ) ) ) | ( (lv_fallThrough_6_0= ',' ) ) ) ) ;
    public final EObject ruleXCasePart() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token lv_fallThrough_6_0=null;
        EObject lv_typeGuard_1_0 = null;

        EObject lv_case_3_0 = null;

        EObject lv_then_5_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4571:28: ( ( () ( (lv_typeGuard_1_0= ruleJvmTypeReference ) )? (otherlv_2= 'case' ( (lv_case_3_0= ruleXExpression ) ) )? ( (otherlv_4= ':' ( (lv_then_5_0= ruleXExpression ) ) ) | ( (lv_fallThrough_6_0= ',' ) ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4572:1: ( () ( (lv_typeGuard_1_0= ruleJvmTypeReference ) )? (otherlv_2= 'case' ( (lv_case_3_0= ruleXExpression ) ) )? ( (otherlv_4= ':' ( (lv_then_5_0= ruleXExpression ) ) ) | ( (lv_fallThrough_6_0= ',' ) ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4572:1: ( () ( (lv_typeGuard_1_0= ruleJvmTypeReference ) )? (otherlv_2= 'case' ( (lv_case_3_0= ruleXExpression ) ) )? ( (otherlv_4= ':' ( (lv_then_5_0= ruleXExpression ) ) ) | ( (lv_fallThrough_6_0= ',' ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4572:2: () ( (lv_typeGuard_1_0= ruleJvmTypeReference ) )? (otherlv_2= 'case' ( (lv_case_3_0= ruleXExpression ) ) )? ( (otherlv_4= ':' ( (lv_then_5_0= ruleXExpression ) ) ) | ( (lv_fallThrough_6_0= ',' ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4572:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4573:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXCasePartAccess().getXCasePartAction_0(),
                          current);
                  
            }

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4578:2: ( (lv_typeGuard_1_0= ruleJvmTypeReference ) )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==RULE_ID||LA80_0==25||LA80_0==33) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4579:1: (lv_typeGuard_1_0= ruleJvmTypeReference )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4579:1: (lv_typeGuard_1_0= ruleJvmTypeReference )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4580:3: lv_typeGuard_1_0= ruleJvmTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXCasePartAccess().getTypeGuardJvmTypeReferenceParserRuleCall_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleXCasePart10880);
                    lv_typeGuard_1_0=ruleJvmTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXCasePartRule());
                      	        }
                             		set(
                             			current, 
                             			"typeGuard",
                              		lv_typeGuard_1_0, 
                              		"JvmTypeReference");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4596:3: (otherlv_2= 'case' ( (lv_case_3_0= ruleXExpression ) ) )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==75) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4596:5: otherlv_2= 'case' ( (lv_case_3_0= ruleXExpression ) )
                    {
                    otherlv_2=(Token)match(input,75,FOLLOW_75_in_ruleXCasePart10894); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_2, grammarAccess.getXCasePartAccess().getCaseKeyword_2_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4600:1: ( (lv_case_3_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4601:1: (lv_case_3_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4601:1: (lv_case_3_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4602:3: lv_case_3_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXCasePartAccess().getCaseXExpressionParserRuleCall_2_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXCasePart10915);
                    lv_case_3_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXCasePartRule());
                      	        }
                             		set(
                             			current, 
                             			"case",
                              		lv_case_3_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4618:4: ( (otherlv_4= ':' ( (lv_then_5_0= ruleXExpression ) ) ) | ( (lv_fallThrough_6_0= ',' ) ) )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==22) ) {
                alt82=1;
            }
            else if ( (LA82_0==26) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4618:5: (otherlv_4= ':' ( (lv_then_5_0= ruleXExpression ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4618:5: (otherlv_4= ':' ( (lv_then_5_0= ruleXExpression ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4618:7: otherlv_4= ':' ( (lv_then_5_0= ruleXExpression ) )
                    {
                    otherlv_4=(Token)match(input,22,FOLLOW_22_in_ruleXCasePart10931); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_4, grammarAccess.getXCasePartAccess().getColonKeyword_3_0_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4622:1: ( (lv_then_5_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4623:1: (lv_then_5_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4623:1: (lv_then_5_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4624:3: lv_then_5_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXCasePartAccess().getThenXExpressionParserRuleCall_3_0_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXCasePart10952);
                    lv_then_5_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXCasePartRule());
                      	        }
                             		set(
                             			current, 
                             			"then",
                              		lv_then_5_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4641:6: ( (lv_fallThrough_6_0= ',' ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4641:6: ( (lv_fallThrough_6_0= ',' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4642:1: (lv_fallThrough_6_0= ',' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4642:1: (lv_fallThrough_6_0= ',' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4643:3: lv_fallThrough_6_0= ','
                    {
                    lv_fallThrough_6_0=(Token)match(input,26,FOLLOW_26_in_ruleXCasePart10977); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              newLeafNode(lv_fallThrough_6_0, grammarAccess.getXCasePartAccess().getFallThroughCommaKeyword_3_1_0());
                          
                    }
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElement(grammarAccess.getXCasePartRule());
                      	        }
                             		setWithLastConsumed(current, "fallThrough", true, ",");
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXCasePart"


    // $ANTLR start "entryRuleXForLoopExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4664:1: entryRuleXForLoopExpression returns [EObject current=null] : iv_ruleXForLoopExpression= ruleXForLoopExpression EOF ;
    public final EObject entryRuleXForLoopExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXForLoopExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4665:2: (iv_ruleXForLoopExpression= ruleXForLoopExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4666:2: iv_ruleXForLoopExpression= ruleXForLoopExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXForLoopExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXForLoopExpression_in_entryRuleXForLoopExpression11027);
            iv_ruleXForLoopExpression=ruleXForLoopExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXForLoopExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXForLoopExpression11037); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXForLoopExpression"


    // $ANTLR start "ruleXForLoopExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4673:1: ruleXForLoopExpression returns [EObject current=null] : ( ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( () otherlv_1= 'for' otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_forExpression_5_0= ruleXExpression ) ) otherlv_6= ')' ( (lv_eachExpression_7_0= ruleXExpression ) ) ) ;
    public final EObject ruleXForLoopExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredParam_3_0 = null;

        EObject lv_forExpression_5_0 = null;

        EObject lv_eachExpression_7_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4676:28: ( ( ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( () otherlv_1= 'for' otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_forExpression_5_0= ruleXExpression ) ) otherlv_6= ')' ( (lv_eachExpression_7_0= ruleXExpression ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4677:1: ( ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( () otherlv_1= 'for' otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_forExpression_5_0= ruleXExpression ) ) otherlv_6= ')' ( (lv_eachExpression_7_0= ruleXExpression ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4677:1: ( ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( () otherlv_1= 'for' otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_forExpression_5_0= ruleXExpression ) ) otherlv_6= ')' ( (lv_eachExpression_7_0= ruleXExpression ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4677:2: ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( () otherlv_1= 'for' otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_forExpression_5_0= ruleXExpression ) ) otherlv_6= ')' ( (lv_eachExpression_7_0= ruleXExpression ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4677:2: ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( () otherlv_1= 'for' otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4677:3: ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( () otherlv_1= 'for' otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4685:5: ( () otherlv_1= 'for' otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4685:6: () otherlv_1= 'for' otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':'
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4685:6: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4686:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXForLoopExpressionAccess().getXForLoopExpressionAction_0_0_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,76,FOLLOW_76_in_ruleXForLoopExpression11114); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXForLoopExpressionAccess().getForKeyword_0_0_1());
                  
            }
            otherlv_2=(Token)match(input,25,FOLLOW_25_in_ruleXForLoopExpression11126); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_2, grammarAccess.getXForLoopExpressionAccess().getLeftParenthesisKeyword_0_0_2());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4699:1: ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4700:1: (lv_declaredParam_3_0= ruleJvmFormalParameter )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4700:1: (lv_declaredParam_3_0= ruleJvmFormalParameter )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4701:3: lv_declaredParam_3_0= ruleJvmFormalParameter
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmFormalParameter_in_ruleXForLoopExpression11147);
            lv_declaredParam_3_0=ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"declaredParam",
                      		lv_declaredParam_3_0, 
                      		"JvmFormalParameter");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_4=(Token)match(input,22,FOLLOW_22_in_ruleXForLoopExpression11159); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_4, grammarAccess.getXForLoopExpressionAccess().getColonKeyword_0_0_4());
                  
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4721:3: ( (lv_forExpression_5_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4722:1: (lv_forExpression_5_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4722:1: (lv_forExpression_5_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4723:3: lv_forExpression_5_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getForExpressionXExpressionParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXForLoopExpression11182);
            lv_forExpression_5_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"forExpression",
                      		lv_forExpression_5_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_6=(Token)match(input,27,FOLLOW_27_in_ruleXForLoopExpression11194); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_6, grammarAccess.getXForLoopExpressionAccess().getRightParenthesisKeyword_2());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4743:1: ( (lv_eachExpression_7_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4744:1: (lv_eachExpression_7_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4744:1: (lv_eachExpression_7_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4745:3: lv_eachExpression_7_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_3_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXForLoopExpression11215);
            lv_eachExpression_7_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"eachExpression",
                      		lv_eachExpression_7_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXForLoopExpression"


    // $ANTLR start "entryRuleXBasicForLoopExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4769:1: entryRuleXBasicForLoopExpression returns [EObject current=null] : iv_ruleXBasicForLoopExpression= ruleXBasicForLoopExpression EOF ;
    public final EObject entryRuleXBasicForLoopExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXBasicForLoopExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4770:2: (iv_ruleXBasicForLoopExpression= ruleXBasicForLoopExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4771:2: iv_ruleXBasicForLoopExpression= ruleXBasicForLoopExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXBasicForLoopExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXBasicForLoopExpression_in_entryRuleXBasicForLoopExpression11251);
            iv_ruleXBasicForLoopExpression=ruleXBasicForLoopExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXBasicForLoopExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXBasicForLoopExpression11261); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXBasicForLoopExpression"


    // $ANTLR start "ruleXBasicForLoopExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4778:1: ruleXBasicForLoopExpression returns [EObject current=null] : ( () otherlv_1= 'for' otherlv_2= '(' ( ( (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_4= ',' ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) ) )* )? otherlv_6= ';' ( (lv_expression_7_0= ruleXExpression ) )? otherlv_8= ';' ( ( (lv_updateExpressions_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_updateExpressions_11_0= ruleXExpression ) ) )* )? otherlv_12= ')' ( (lv_eachExpression_13_0= ruleXExpression ) ) ) ;
    public final EObject ruleXBasicForLoopExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        EObject lv_initExpressions_3_0 = null;

        EObject lv_initExpressions_5_0 = null;

        EObject lv_expression_7_0 = null;

        EObject lv_updateExpressions_9_0 = null;

        EObject lv_updateExpressions_11_0 = null;

        EObject lv_eachExpression_13_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4781:28: ( ( () otherlv_1= 'for' otherlv_2= '(' ( ( (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_4= ',' ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) ) )* )? otherlv_6= ';' ( (lv_expression_7_0= ruleXExpression ) )? otherlv_8= ';' ( ( (lv_updateExpressions_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_updateExpressions_11_0= ruleXExpression ) ) )* )? otherlv_12= ')' ( (lv_eachExpression_13_0= ruleXExpression ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4782:1: ( () otherlv_1= 'for' otherlv_2= '(' ( ( (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_4= ',' ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) ) )* )? otherlv_6= ';' ( (lv_expression_7_0= ruleXExpression ) )? otherlv_8= ';' ( ( (lv_updateExpressions_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_updateExpressions_11_0= ruleXExpression ) ) )* )? otherlv_12= ')' ( (lv_eachExpression_13_0= ruleXExpression ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4782:1: ( () otherlv_1= 'for' otherlv_2= '(' ( ( (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_4= ',' ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) ) )* )? otherlv_6= ';' ( (lv_expression_7_0= ruleXExpression ) )? otherlv_8= ';' ( ( (lv_updateExpressions_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_updateExpressions_11_0= ruleXExpression ) ) )* )? otherlv_12= ')' ( (lv_eachExpression_13_0= ruleXExpression ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4782:2: () otherlv_1= 'for' otherlv_2= '(' ( ( (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_4= ',' ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) ) )* )? otherlv_6= ';' ( (lv_expression_7_0= ruleXExpression ) )? otherlv_8= ';' ( ( (lv_updateExpressions_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_updateExpressions_11_0= ruleXExpression ) ) )* )? otherlv_12= ')' ( (lv_eachExpression_13_0= ruleXExpression ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4782:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4783:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXBasicForLoopExpressionAccess().getXBasicForLoopExpressionAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,76,FOLLOW_76_in_ruleXBasicForLoopExpression11307); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXBasicForLoopExpressionAccess().getForKeyword_1());
                  
            }
            otherlv_2=(Token)match(input,25,FOLLOW_25_in_ruleXBasicForLoopExpression11319); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_2, grammarAccess.getXBasicForLoopExpressionAccess().getLeftParenthesisKeyword_2());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4796:1: ( ( (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_4= ',' ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) ) )* )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( ((LA84_0>=RULE_ID && LA84_0<=RULE_DECIMAL)||LA84_0==15||(LA84_0>=24 && LA84_0<=25)||LA84_0==34||LA84_0==38||(LA84_0>=54 && LA84_0<=55)||LA84_0==60||(LA84_0>=66 && LA84_0<=67)||LA84_0==71||LA84_0==73||(LA84_0>=76 && LA84_0<=91)||LA84_0==93) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4796:2: ( (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_4= ',' ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4796:2: ( (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4797:1: (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4797:1: (lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4798:3: lv_initExpressions_3_0= ruleXExpressionOrVarDeclaration
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpressionOrVarDeclaration_in_ruleXBasicForLoopExpression11341);
                    lv_initExpressions_3_0=ruleXExpressionOrVarDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
                      	        }
                             		add(
                             			current, 
                             			"initExpressions",
                              		lv_initExpressions_3_0, 
                              		"XExpressionOrVarDeclaration");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4814:2: (otherlv_4= ',' ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) ) )*
                    loop83:
                    do {
                        int alt83=2;
                        int LA83_0 = input.LA(1);

                        if ( (LA83_0==26) ) {
                            alt83=1;
                        }


                        switch (alt83) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4814:4: otherlv_4= ',' ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) )
                    	    {
                    	    otherlv_4=(Token)match(input,26,FOLLOW_26_in_ruleXBasicForLoopExpression11354); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_4, grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_3_1_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4818:1: ( (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4819:1: (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4819:1: (lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4820:3: lv_initExpressions_5_0= ruleXExpressionOrVarDeclaration
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleXExpressionOrVarDeclaration_in_ruleXBasicForLoopExpression11375);
                    	    lv_initExpressions_5_0=ruleXExpressionOrVarDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"initExpressions",
                    	              		lv_initExpressions_5_0, 
                    	              		"XExpressionOrVarDeclaration");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop83;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_6=(Token)match(input,70,FOLLOW_70_in_ruleXBasicForLoopExpression11391); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_6, grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_4());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4840:1: ( (lv_expression_7_0= ruleXExpression ) )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( ((LA85_0>=RULE_ID && LA85_0<=RULE_DECIMAL)||LA85_0==15||(LA85_0>=24 && LA85_0<=25)||LA85_0==34||LA85_0==38||(LA85_0>=54 && LA85_0<=55)||LA85_0==60||(LA85_0>=66 && LA85_0<=67)||LA85_0==71||LA85_0==73||(LA85_0>=76 && LA85_0<=78)||(LA85_0>=81 && LA85_0<=91)||LA85_0==93) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4841:1: (lv_expression_7_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4841:1: (lv_expression_7_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4842:3: lv_expression_7_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getExpressionXExpressionParserRuleCall_5_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXBasicForLoopExpression11412);
                    lv_expression_7_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
                      	        }
                             		set(
                             			current, 
                             			"expression",
                              		lv_expression_7_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }
                    break;

            }

            otherlv_8=(Token)match(input,70,FOLLOW_70_in_ruleXBasicForLoopExpression11425); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_8, grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_6());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4862:1: ( ( (lv_updateExpressions_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_updateExpressions_11_0= ruleXExpression ) ) )* )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( ((LA87_0>=RULE_ID && LA87_0<=RULE_DECIMAL)||LA87_0==15||(LA87_0>=24 && LA87_0<=25)||LA87_0==34||LA87_0==38||(LA87_0>=54 && LA87_0<=55)||LA87_0==60||(LA87_0>=66 && LA87_0<=67)||LA87_0==71||LA87_0==73||(LA87_0>=76 && LA87_0<=78)||(LA87_0>=81 && LA87_0<=91)||LA87_0==93) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4862:2: ( (lv_updateExpressions_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_updateExpressions_11_0= ruleXExpression ) ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4862:2: ( (lv_updateExpressions_9_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4863:1: (lv_updateExpressions_9_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4863:1: (lv_updateExpressions_9_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4864:3: lv_updateExpressions_9_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXBasicForLoopExpression11447);
                    lv_updateExpressions_9_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
                      	        }
                             		add(
                             			current, 
                             			"updateExpressions",
                              		lv_updateExpressions_9_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4880:2: (otherlv_10= ',' ( (lv_updateExpressions_11_0= ruleXExpression ) ) )*
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( (LA86_0==26) ) {
                            alt86=1;
                        }


                        switch (alt86) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4880:4: otherlv_10= ',' ( (lv_updateExpressions_11_0= ruleXExpression ) )
                    	    {
                    	    otherlv_10=(Token)match(input,26,FOLLOW_26_in_ruleXBasicForLoopExpression11460); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_10, grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_7_1_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4884:1: ( (lv_updateExpressions_11_0= ruleXExpression ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4885:1: (lv_updateExpressions_11_0= ruleXExpression )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4885:1: (lv_updateExpressions_11_0= ruleXExpression )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4886:3: lv_updateExpressions_11_0= ruleXExpression
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_1_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleXExpression_in_ruleXBasicForLoopExpression11481);
                    	    lv_updateExpressions_11_0=ruleXExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"updateExpressions",
                    	              		lv_updateExpressions_11_0, 
                    	              		"XExpression");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop86;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_12=(Token)match(input,27,FOLLOW_27_in_ruleXBasicForLoopExpression11497); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_12, grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4906:1: ( (lv_eachExpression_13_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4907:1: (lv_eachExpression_13_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4907:1: (lv_eachExpression_13_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4908:3: lv_eachExpression_13_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_9_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXBasicForLoopExpression11518);
            lv_eachExpression_13_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"eachExpression",
                      		lv_eachExpression_13_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXBasicForLoopExpression"


    // $ANTLR start "entryRuleXWhileExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4932:1: entryRuleXWhileExpression returns [EObject current=null] : iv_ruleXWhileExpression= ruleXWhileExpression EOF ;
    public final EObject entryRuleXWhileExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXWhileExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4933:2: (iv_ruleXWhileExpression= ruleXWhileExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4934:2: iv_ruleXWhileExpression= ruleXWhileExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXWhileExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXWhileExpression_in_entryRuleXWhileExpression11554);
            iv_ruleXWhileExpression=ruleXWhileExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXWhileExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXWhileExpression11564); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXWhileExpression"


    // $ANTLR start "ruleXWhileExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4941:1: ruleXWhileExpression returns [EObject current=null] : ( () otherlv_1= 'while' otherlv_2= '(' ( (lv_predicate_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_body_5_0= ruleXExpression ) ) ) ;
    public final EObject ruleXWhileExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_predicate_3_0 = null;

        EObject lv_body_5_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4944:28: ( ( () otherlv_1= 'while' otherlv_2= '(' ( (lv_predicate_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_body_5_0= ruleXExpression ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4945:1: ( () otherlv_1= 'while' otherlv_2= '(' ( (lv_predicate_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_body_5_0= ruleXExpression ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4945:1: ( () otherlv_1= 'while' otherlv_2= '(' ( (lv_predicate_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_body_5_0= ruleXExpression ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4945:2: () otherlv_1= 'while' otherlv_2= '(' ( (lv_predicate_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_body_5_0= ruleXExpression ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4945:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4946:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,77,FOLLOW_77_in_ruleXWhileExpression11610); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXWhileExpressionAccess().getWhileKeyword_1());
                  
            }
            otherlv_2=(Token)match(input,25,FOLLOW_25_in_ruleXWhileExpression11622); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_2, grammarAccess.getXWhileExpressionAccess().getLeftParenthesisKeyword_2());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4959:1: ( (lv_predicate_3_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4960:1: (lv_predicate_3_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4960:1: (lv_predicate_3_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4961:3: lv_predicate_3_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getPredicateXExpressionParserRuleCall_3_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXWhileExpression11643);
            lv_predicate_3_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"predicate",
                      		lv_predicate_3_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_4=(Token)match(input,27,FOLLOW_27_in_ruleXWhileExpression11655); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_4, grammarAccess.getXWhileExpressionAccess().getRightParenthesisKeyword_4());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4981:1: ( (lv_body_5_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4982:1: (lv_body_5_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4982:1: (lv_body_5_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4983:3: lv_body_5_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getBodyXExpressionParserRuleCall_5_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXWhileExpression11676);
            lv_body_5_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"body",
                      		lv_body_5_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXWhileExpression"


    // $ANTLR start "entryRuleXDoWhileExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5007:1: entryRuleXDoWhileExpression returns [EObject current=null] : iv_ruleXDoWhileExpression= ruleXDoWhileExpression EOF ;
    public final EObject entryRuleXDoWhileExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXDoWhileExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5008:2: (iv_ruleXDoWhileExpression= ruleXDoWhileExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5009:2: iv_ruleXDoWhileExpression= ruleXDoWhileExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXDoWhileExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXDoWhileExpression_in_entryRuleXDoWhileExpression11712);
            iv_ruleXDoWhileExpression=ruleXDoWhileExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXDoWhileExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXDoWhileExpression11722); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXDoWhileExpression"


    // $ANTLR start "ruleXDoWhileExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5016:1: ruleXDoWhileExpression returns [EObject current=null] : ( () otherlv_1= 'do' ( (lv_body_2_0= ruleXExpression ) ) otherlv_3= 'while' otherlv_4= '(' ( (lv_predicate_5_0= ruleXExpression ) ) otherlv_6= ')' ) ;
    public final EObject ruleXDoWhileExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_body_2_0 = null;

        EObject lv_predicate_5_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5019:28: ( ( () otherlv_1= 'do' ( (lv_body_2_0= ruleXExpression ) ) otherlv_3= 'while' otherlv_4= '(' ( (lv_predicate_5_0= ruleXExpression ) ) otherlv_6= ')' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5020:1: ( () otherlv_1= 'do' ( (lv_body_2_0= ruleXExpression ) ) otherlv_3= 'while' otherlv_4= '(' ( (lv_predicate_5_0= ruleXExpression ) ) otherlv_6= ')' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5020:1: ( () otherlv_1= 'do' ( (lv_body_2_0= ruleXExpression ) ) otherlv_3= 'while' otherlv_4= '(' ( (lv_predicate_5_0= ruleXExpression ) ) otherlv_6= ')' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5020:2: () otherlv_1= 'do' ( (lv_body_2_0= ruleXExpression ) ) otherlv_3= 'while' otherlv_4= '(' ( (lv_predicate_5_0= ruleXExpression ) ) otherlv_6= ')'
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5020:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5021:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXDoWhileExpressionAccess().getXDoWhileExpressionAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,78,FOLLOW_78_in_ruleXDoWhileExpression11768); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXDoWhileExpressionAccess().getDoKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5030:1: ( (lv_body_2_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5031:1: (lv_body_2_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5031:1: (lv_body_2_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5032:3: lv_body_2_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXDoWhileExpressionAccess().getBodyXExpressionParserRuleCall_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXDoWhileExpression11789);
            lv_body_2_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXDoWhileExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"body",
                      		lv_body_2_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_3=(Token)match(input,77,FOLLOW_77_in_ruleXDoWhileExpression11801); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_3, grammarAccess.getXDoWhileExpressionAccess().getWhileKeyword_3());
                  
            }
            otherlv_4=(Token)match(input,25,FOLLOW_25_in_ruleXDoWhileExpression11813); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_4, grammarAccess.getXDoWhileExpressionAccess().getLeftParenthesisKeyword_4());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5056:1: ( (lv_predicate_5_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5057:1: (lv_predicate_5_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5057:1: (lv_predicate_5_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5058:3: lv_predicate_5_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXDoWhileExpressionAccess().getPredicateXExpressionParserRuleCall_5_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXDoWhileExpression11834);
            lv_predicate_5_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXDoWhileExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"predicate",
                      		lv_predicate_5_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_6=(Token)match(input,27,FOLLOW_27_in_ruleXDoWhileExpression11846); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_6, grammarAccess.getXDoWhileExpressionAccess().getRightParenthesisKeyword_6());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXDoWhileExpression"


    // $ANTLR start "entryRuleXBlockExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5086:1: entryRuleXBlockExpression returns [EObject current=null] : iv_ruleXBlockExpression= ruleXBlockExpression EOF ;
    public final EObject entryRuleXBlockExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXBlockExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5087:2: (iv_ruleXBlockExpression= ruleXBlockExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5088:2: iv_ruleXBlockExpression= ruleXBlockExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXBlockExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXBlockExpression_in_entryRuleXBlockExpression11882);
            iv_ruleXBlockExpression=ruleXBlockExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXBlockExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXBlockExpression11892); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXBlockExpression"


    // $ANTLR start "ruleXBlockExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5095:1: ruleXBlockExpression returns [EObject current=null] : ( () otherlv_1= '{' ( ( (lv_expressions_2_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_3= ';' )? )* otherlv_4= '}' ) ;
    public final EObject ruleXBlockExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_expressions_2_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5098:28: ( ( () otherlv_1= '{' ( ( (lv_expressions_2_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_3= ';' )? )* otherlv_4= '}' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5099:1: ( () otherlv_1= '{' ( ( (lv_expressions_2_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_3= ';' )? )* otherlv_4= '}' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5099:1: ( () otherlv_1= '{' ( ( (lv_expressions_2_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_3= ';' )? )* otherlv_4= '}' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5099:2: () otherlv_1= '{' ( ( (lv_expressions_2_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_3= ';' )? )* otherlv_4= '}'
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5099:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5100:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXBlockExpressionAccess().getXBlockExpressionAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,15,FOLLOW_15_in_ruleXBlockExpression11938); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXBlockExpressionAccess().getLeftCurlyBracketKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5109:1: ( ( (lv_expressions_2_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_3= ';' )? )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( ((LA89_0>=RULE_ID && LA89_0<=RULE_DECIMAL)||LA89_0==15||(LA89_0>=24 && LA89_0<=25)||LA89_0==34||LA89_0==38||(LA89_0>=54 && LA89_0<=55)||LA89_0==60||(LA89_0>=66 && LA89_0<=67)||LA89_0==71||LA89_0==73||(LA89_0>=76 && LA89_0<=91)||LA89_0==93) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5109:2: ( (lv_expressions_2_0= ruleXExpressionOrVarDeclaration ) ) (otherlv_3= ';' )?
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5109:2: ( (lv_expressions_2_0= ruleXExpressionOrVarDeclaration ) )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5110:1: (lv_expressions_2_0= ruleXExpressionOrVarDeclaration )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5110:1: (lv_expressions_2_0= ruleXExpressionOrVarDeclaration )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5111:3: lv_expressions_2_0= ruleXExpressionOrVarDeclaration
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXBlockExpressionAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXExpressionOrVarDeclaration_in_ruleXBlockExpression11960);
            	    lv_expressions_2_0=ruleXExpressionOrVarDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXBlockExpressionRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"expressions",
            	              		lv_expressions_2_0, 
            	              		"XExpressionOrVarDeclaration");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }

            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5127:2: (otherlv_3= ';' )?
            	    int alt88=2;
            	    int LA88_0 = input.LA(1);

            	    if ( (LA88_0==70) ) {
            	        alt88=1;
            	    }
            	    switch (alt88) {
            	        case 1 :
            	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5127:4: otherlv_3= ';'
            	            {
            	            otherlv_3=(Token)match(input,70,FOLLOW_70_in_ruleXBlockExpression11973); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	                  	newLeafNode(otherlv_3, grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1());
            	                  
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);

            otherlv_4=(Token)match(input,16,FOLLOW_16_in_ruleXBlockExpression11989); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_4, grammarAccess.getXBlockExpressionAccess().getRightCurlyBracketKeyword_3());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXBlockExpression"


    // $ANTLR start "entryRuleXExpressionOrVarDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5143:1: entryRuleXExpressionOrVarDeclaration returns [EObject current=null] : iv_ruleXExpressionOrVarDeclaration= ruleXExpressionOrVarDeclaration EOF ;
    public final EObject entryRuleXExpressionOrVarDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpressionOrVarDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5144:2: (iv_ruleXExpressionOrVarDeclaration= ruleXExpressionOrVarDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5145:2: iv_ruleXExpressionOrVarDeclaration= ruleXExpressionOrVarDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationRule()); 
            }
            pushFollow(FOLLOW_ruleXExpressionOrVarDeclaration_in_entryRuleXExpressionOrVarDeclaration12025);
            iv_ruleXExpressionOrVarDeclaration=ruleXExpressionOrVarDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpressionOrVarDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXExpressionOrVarDeclaration12035); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpressionOrVarDeclaration"


    // $ANTLR start "ruleXExpressionOrVarDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5152:1: ruleXExpressionOrVarDeclaration returns [EObject current=null] : (this_XVariableDeclaration_0= ruleXVariableDeclaration | this_XExpression_1= ruleXExpression ) ;
    public final EObject ruleXExpressionOrVarDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_XVariableDeclaration_0 = null;

        EObject this_XExpression_1 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5155:28: ( (this_XVariableDeclaration_0= ruleXVariableDeclaration | this_XExpression_1= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5156:1: (this_XVariableDeclaration_0= ruleXVariableDeclaration | this_XExpression_1= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5156:1: (this_XVariableDeclaration_0= ruleXVariableDeclaration | this_XExpression_1= ruleXExpression )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( ((LA90_0>=79 && LA90_0<=80)) ) {
                alt90=1;
            }
            else if ( ((LA90_0>=RULE_ID && LA90_0<=RULE_DECIMAL)||LA90_0==15||(LA90_0>=24 && LA90_0<=25)||LA90_0==34||LA90_0==38||(LA90_0>=54 && LA90_0<=55)||LA90_0==60||(LA90_0>=66 && LA90_0<=67)||LA90_0==71||LA90_0==73||(LA90_0>=76 && LA90_0<=78)||(LA90_0>=81 && LA90_0<=91)||LA90_0==93) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5157:5: this_XVariableDeclaration_0= ruleXVariableDeclaration
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationAccess().getXVariableDeclarationParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXVariableDeclaration_in_ruleXExpressionOrVarDeclaration12082);
                    this_XVariableDeclaration_0=ruleXVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XVariableDeclaration_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5167:5: this_XExpression_1= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationAccess().getXExpressionParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXExpressionOrVarDeclaration12109);
                    this_XExpression_1=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XExpression_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpressionOrVarDeclaration"


    // $ANTLR start "entryRuleXVariableDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5183:1: entryRuleXVariableDeclaration returns [EObject current=null] : iv_ruleXVariableDeclaration= ruleXVariableDeclaration EOF ;
    public final EObject entryRuleXVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXVariableDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5184:2: (iv_ruleXVariableDeclaration= ruleXVariableDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5185:2: iv_ruleXVariableDeclaration= ruleXVariableDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_ruleXVariableDeclaration_in_entryRuleXVariableDeclaration12144);
            iv_ruleXVariableDeclaration=ruleXVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXVariableDeclaration12154); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXVariableDeclaration"


    // $ANTLR start "ruleXVariableDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5192:1: ruleXVariableDeclaration returns [EObject current=null] : ( () ( ( (lv_writeable_1_0= 'var' ) ) | otherlv_2= 'val' ) ( ( ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )=> ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) ) ) | ( (lv_name_5_0= ruleValidID ) ) ) (otherlv_6= '=' ( (lv_right_7_0= ruleXExpression ) ) )? ) ;
    public final EObject ruleXVariableDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_writeable_1_0=null;
        Token otherlv_2=null;
        Token otherlv_6=null;
        EObject lv_type_3_0 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        AntlrDatatypeRuleToken lv_name_5_0 = null;

        EObject lv_right_7_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5195:28: ( ( () ( ( (lv_writeable_1_0= 'var' ) ) | otherlv_2= 'val' ) ( ( ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )=> ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) ) ) | ( (lv_name_5_0= ruleValidID ) ) ) (otherlv_6= '=' ( (lv_right_7_0= ruleXExpression ) ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5196:1: ( () ( ( (lv_writeable_1_0= 'var' ) ) | otherlv_2= 'val' ) ( ( ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )=> ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) ) ) | ( (lv_name_5_0= ruleValidID ) ) ) (otherlv_6= '=' ( (lv_right_7_0= ruleXExpression ) ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5196:1: ( () ( ( (lv_writeable_1_0= 'var' ) ) | otherlv_2= 'val' ) ( ( ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )=> ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) ) ) | ( (lv_name_5_0= ruleValidID ) ) ) (otherlv_6= '=' ( (lv_right_7_0= ruleXExpression ) ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5196:2: () ( ( (lv_writeable_1_0= 'var' ) ) | otherlv_2= 'val' ) ( ( ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )=> ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) ) ) | ( (lv_name_5_0= ruleValidID ) ) ) (otherlv_6= '=' ( (lv_right_7_0= ruleXExpression ) ) )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5196:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5197:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXVariableDeclarationAccess().getXVariableDeclarationAction_0(),
                          current);
                  
            }

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5202:2: ( ( (lv_writeable_1_0= 'var' ) ) | otherlv_2= 'val' )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==79) ) {
                alt91=1;
            }
            else if ( (LA91_0==80) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5202:3: ( (lv_writeable_1_0= 'var' ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5202:3: ( (lv_writeable_1_0= 'var' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5203:1: (lv_writeable_1_0= 'var' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5203:1: (lv_writeable_1_0= 'var' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5204:3: lv_writeable_1_0= 'var'
                    {
                    lv_writeable_1_0=(Token)match(input,79,FOLLOW_79_in_ruleXVariableDeclaration12207); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              newLeafNode(lv_writeable_1_0, grammarAccess.getXVariableDeclarationAccess().getWriteableVarKeyword_1_0_0());
                          
                    }
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElement(grammarAccess.getXVariableDeclarationRule());
                      	        }
                             		setWithLastConsumed(current, "writeable", true, "var");
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5218:7: otherlv_2= 'val'
                    {
                    otherlv_2=(Token)match(input,80,FOLLOW_80_in_ruleXVariableDeclaration12238); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_2, grammarAccess.getXVariableDeclarationAccess().getValKeyword_1_1());
                          
                    }

                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5222:2: ( ( ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )=> ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) ) ) | ( (lv_name_5_0= ruleValidID ) ) )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==RULE_ID) ) {
                int LA92_1 = input.LA(2);

                if ( (synpred31_InternalAqua()) ) {
                    alt92=1;
                }
                else if ( (true) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA92_0==25) && (synpred31_InternalAqua())) {
                alt92=1;
            }
            else if ( (LA92_0==33) && (synpred31_InternalAqua())) {
                alt92=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5222:3: ( ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )=> ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5222:3: ( ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )=> ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5222:4: ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )=> ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5230:6: ( ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5230:7: ( (lv_type_3_0= ruleJvmTypeReference ) ) ( (lv_name_4_0= ruleValidID ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5230:7: ( (lv_type_3_0= ruleJvmTypeReference ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5231:1: (lv_type_3_0= ruleJvmTypeReference )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5231:1: (lv_type_3_0= ruleJvmTypeReference )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5232:3: lv_type_3_0= ruleJvmTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleXVariableDeclaration12286);
                    lv_type_3_0=ruleJvmTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
                      	        }
                             		set(
                             			current, 
                             			"type",
                              		lv_type_3_0, 
                              		"JvmTypeReference");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5248:2: ( (lv_name_4_0= ruleValidID ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5249:1: (lv_name_4_0= ruleValidID )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5249:1: (lv_name_4_0= ruleValidID )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5250:3: lv_name_4_0= ruleValidID
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getNameValidIDParserRuleCall_2_0_0_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleValidID_in_ruleXVariableDeclaration12307);
                    lv_name_4_0=ruleValidID();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
                      	        }
                             		set(
                             			current, 
                             			"name",
                              		lv_name_4_0, 
                              		"ValidID");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5267:6: ( (lv_name_5_0= ruleValidID ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5267:6: ( (lv_name_5_0= ruleValidID ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5268:1: (lv_name_5_0= ruleValidID )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5268:1: (lv_name_5_0= ruleValidID )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5269:3: lv_name_5_0= ruleValidID
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getNameValidIDParserRuleCall_2_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleValidID_in_ruleXVariableDeclaration12336);
                    lv_name_5_0=ruleValidID();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
                      	        }
                             		set(
                             			current, 
                             			"name",
                              		lv_name_5_0, 
                              		"ValidID");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5285:3: (otherlv_6= '=' ( (lv_right_7_0= ruleXExpression ) ) )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==40) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5285:5: otherlv_6= '=' ( (lv_right_7_0= ruleXExpression ) )
                    {
                    otherlv_6=(Token)match(input,40,FOLLOW_40_in_ruleXVariableDeclaration12350); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_6, grammarAccess.getXVariableDeclarationAccess().getEqualsSignKeyword_3_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5289:1: ( (lv_right_7_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5290:1: (lv_right_7_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5290:1: (lv_right_7_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5291:3: lv_right_7_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getRightXExpressionParserRuleCall_3_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXVariableDeclaration12371);
                    lv_right_7_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
                      	        }
                             		set(
                             			current, 
                             			"right",
                              		lv_right_7_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXVariableDeclaration"


    // $ANTLR start "entryRuleJvmFormalParameter"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5315:1: entryRuleJvmFormalParameter returns [EObject current=null] : iv_ruleJvmFormalParameter= ruleJvmFormalParameter EOF ;
    public final EObject entryRuleJvmFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmFormalParameter = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5316:2: (iv_ruleJvmFormalParameter= ruleJvmFormalParameter EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5317:2: iv_ruleJvmFormalParameter= ruleJvmFormalParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmFormalParameterRule()); 
            }
            pushFollow(FOLLOW_ruleJvmFormalParameter_in_entryRuleJvmFormalParameter12409);
            iv_ruleJvmFormalParameter=ruleJvmFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmFormalParameter; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmFormalParameter12419); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmFormalParameter"


    // $ANTLR start "ruleJvmFormalParameter"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5324:1: ruleJvmFormalParameter returns [EObject current=null] : ( ( (lv_parameterType_0_0= ruleJvmTypeReference ) )? ( (lv_name_1_0= ruleValidID ) ) ) ;
    public final EObject ruleJvmFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject lv_parameterType_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5327:28: ( ( ( (lv_parameterType_0_0= ruleJvmTypeReference ) )? ( (lv_name_1_0= ruleValidID ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5328:1: ( ( (lv_parameterType_0_0= ruleJvmTypeReference ) )? ( (lv_name_1_0= ruleValidID ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5328:1: ( ( (lv_parameterType_0_0= ruleJvmTypeReference ) )? ( (lv_name_1_0= ruleValidID ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5328:2: ( (lv_parameterType_0_0= ruleJvmTypeReference ) )? ( (lv_name_1_0= ruleValidID ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5328:2: ( (lv_parameterType_0_0= ruleJvmTypeReference ) )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==RULE_ID) ) {
                int LA94_1 = input.LA(2);

                if ( (LA94_1==RULE_ID||LA94_1==21||LA94_1==34||LA94_1==67) ) {
                    alt94=1;
                }
            }
            else if ( (LA94_0==25||LA94_0==33) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5329:1: (lv_parameterType_0_0= ruleJvmTypeReference )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5329:1: (lv_parameterType_0_0= ruleJvmTypeReference )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5330:3: lv_parameterType_0_0= ruleJvmTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleJvmFormalParameter12465);
                    lv_parameterType_0_0=ruleJvmTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
                      	        }
                             		set(
                             			current, 
                             			"parameterType",
                              		lv_parameterType_0_0, 
                              		"JvmTypeReference");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5346:3: ( (lv_name_1_0= ruleValidID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5347:1: (lv_name_1_0= ruleValidID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5347:1: (lv_name_1_0= ruleValidID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5348:3: lv_name_1_0= ruleValidID
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleValidID_in_ruleJvmFormalParameter12487);
            lv_name_1_0=ruleValidID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
              	        }
                     		set(
                     			current, 
                     			"name",
                      		lv_name_1_0, 
                      		"ValidID");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmFormalParameter"


    // $ANTLR start "entryRuleFullJvmFormalParameter"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5372:1: entryRuleFullJvmFormalParameter returns [EObject current=null] : iv_ruleFullJvmFormalParameter= ruleFullJvmFormalParameter EOF ;
    public final EObject entryRuleFullJvmFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFullJvmFormalParameter = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5373:2: (iv_ruleFullJvmFormalParameter= ruleFullJvmFormalParameter EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5374:2: iv_ruleFullJvmFormalParameter= ruleFullJvmFormalParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFullJvmFormalParameterRule()); 
            }
            pushFollow(FOLLOW_ruleFullJvmFormalParameter_in_entryRuleFullJvmFormalParameter12523);
            iv_ruleFullJvmFormalParameter=ruleFullJvmFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFullJvmFormalParameter; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFullJvmFormalParameter12533); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFullJvmFormalParameter"


    // $ANTLR start "ruleFullJvmFormalParameter"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5381:1: ruleFullJvmFormalParameter returns [EObject current=null] : ( ( (lv_parameterType_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= ruleValidID ) ) ) ;
    public final EObject ruleFullJvmFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject lv_parameterType_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5384:28: ( ( ( (lv_parameterType_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= ruleValidID ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5385:1: ( ( (lv_parameterType_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= ruleValidID ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5385:1: ( ( (lv_parameterType_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= ruleValidID ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5385:2: ( (lv_parameterType_0_0= ruleJvmTypeReference ) ) ( (lv_name_1_0= ruleValidID ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5385:2: ( (lv_parameterType_0_0= ruleJvmTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5386:1: (lv_parameterType_0_0= ruleJvmTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5386:1: (lv_parameterType_0_0= ruleJvmTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5387:3: lv_parameterType_0_0= ruleJvmTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleFullJvmFormalParameter12579);
            lv_parameterType_0_0=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
              	        }
                     		set(
                     			current, 
                     			"parameterType",
                      		lv_parameterType_0_0, 
                      		"JvmTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5403:2: ( (lv_name_1_0= ruleValidID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5404:1: (lv_name_1_0= ruleValidID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5404:1: (lv_name_1_0= ruleValidID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5405:3: lv_name_1_0= ruleValidID
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleValidID_in_ruleFullJvmFormalParameter12600);
            lv_name_1_0=ruleValidID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
              	        }
                     		set(
                     			current, 
                     			"name",
                      		lv_name_1_0, 
                      		"ValidID");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFullJvmFormalParameter"


    // $ANTLR start "entryRuleXFeatureCall"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5429:1: entryRuleXFeatureCall returns [EObject current=null] : iv_ruleXFeatureCall= ruleXFeatureCall EOF ;
    public final EObject entryRuleXFeatureCall() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXFeatureCall = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5430:2: (iv_ruleXFeatureCall= ruleXFeatureCall EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5431:2: iv_ruleXFeatureCall= ruleXFeatureCall EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXFeatureCallRule()); 
            }
            pushFollow(FOLLOW_ruleXFeatureCall_in_entryRuleXFeatureCall12636);
            iv_ruleXFeatureCall=ruleXFeatureCall();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXFeatureCall; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXFeatureCall12646); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXFeatureCall"


    // $ANTLR start "ruleXFeatureCall"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5438:1: ruleXFeatureCall returns [EObject current=null] : ( () (otherlv_1= '<' ( (lv_typeArguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )? otherlv_12= ')' )? ( ( ( () '[' ) )=> (lv_featureCallArguments_13_0= ruleXClosure ) )? ) ;
    public final EObject ruleXFeatureCall() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_explicitOperationCall_7_0=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        EObject lv_typeArguments_2_0 = null;

        EObject lv_typeArguments_4_0 = null;

        EObject lv_featureCallArguments_8_0 = null;

        EObject lv_featureCallArguments_9_0 = null;

        EObject lv_featureCallArguments_11_0 = null;

        EObject lv_featureCallArguments_13_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5441:28: ( ( () (otherlv_1= '<' ( (lv_typeArguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )? otherlv_12= ')' )? ( ( ( () '[' ) )=> (lv_featureCallArguments_13_0= ruleXClosure ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5442:1: ( () (otherlv_1= '<' ( (lv_typeArguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )? otherlv_12= ')' )? ( ( ( () '[' ) )=> (lv_featureCallArguments_13_0= ruleXClosure ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5442:1: ( () (otherlv_1= '<' ( (lv_typeArguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )? otherlv_12= ')' )? ( ( ( () '[' ) )=> (lv_featureCallArguments_13_0= ruleXClosure ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5442:2: () (otherlv_1= '<' ( (lv_typeArguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' )? ( ( ruleIdOrSuper ) ) ( ( ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )? otherlv_12= ')' )? ( ( ( () '[' ) )=> (lv_featureCallArguments_13_0= ruleXClosure ) )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5442:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5443:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXFeatureCallAccess().getXFeatureCallAction_0(),
                          current);
                  
            }

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5448:2: (otherlv_1= '<' ( (lv_typeArguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==34) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5448:4: otherlv_1= '<' ( (lv_typeArguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>'
                    {
                    otherlv_1=(Token)match(input,34,FOLLOW_34_in_ruleXFeatureCall12693); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_1, grammarAccess.getXFeatureCallAccess().getLessThanSignKeyword_1_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5452:1: ( (lv_typeArguments_2_0= ruleJvmArgumentTypeReference ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5453:1: (lv_typeArguments_2_0= ruleJvmArgumentTypeReference )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5453:1: (lv_typeArguments_2_0= ruleJvmArgumentTypeReference )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5454:3: lv_typeArguments_2_0= ruleJvmArgumentTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleXFeatureCall12714);
                    lv_typeArguments_2_0=ruleJvmArgumentTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
                      	        }
                             		add(
                             			current, 
                             			"typeArguments",
                              		lv_typeArguments_2_0, 
                              		"JvmArgumentTypeReference");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5470:2: (otherlv_3= ',' ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) )*
                    loop95:
                    do {
                        int alt95=2;
                        int LA95_0 = input.LA(1);

                        if ( (LA95_0==26) ) {
                            alt95=1;
                        }


                        switch (alt95) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5470:4: otherlv_3= ',' ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) )
                    	    {
                    	    otherlv_3=(Token)match(input,26,FOLLOW_26_in_ruleXFeatureCall12727); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_3, grammarAccess.getXFeatureCallAccess().getCommaKeyword_1_2_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5474:1: ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5475:1: (lv_typeArguments_4_0= ruleJvmArgumentTypeReference )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5475:1: (lv_typeArguments_4_0= ruleJvmArgumentTypeReference )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5476:3: lv_typeArguments_4_0= ruleJvmArgumentTypeReference
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleXFeatureCall12748);
                    	    lv_typeArguments_4_0=ruleJvmArgumentTypeReference();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"typeArguments",
                    	              		lv_typeArguments_4_0, 
                    	              		"JvmArgumentTypeReference");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop95;
                        }
                    } while (true);

                    otherlv_5=(Token)match(input,31,FOLLOW_31_in_ruleXFeatureCall12762); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_5, grammarAccess.getXFeatureCallAccess().getGreaterThanSignKeyword_1_3());
                          
                    }

                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5496:3: ( ( ruleIdOrSuper ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5497:1: ( ruleIdOrSuper )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5497:1: ( ruleIdOrSuper )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5498:3: ruleIdOrSuper
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              	            current = createModelElement(grammarAccess.getXFeatureCallRule());
              	        }
                      
            }
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleIdOrSuper_in_ruleXFeatureCall12787);
            ruleIdOrSuper();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5511:2: ( ( ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )? otherlv_12= ')' )?
            int alt99=2;
            alt99 = dfa99.predict(input);
            switch (alt99) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5511:3: ( ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )? otherlv_12= ')'
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5511:3: ( ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5511:4: ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5518:1: (lv_explicitOperationCall_7_0= '(' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5519:3: lv_explicitOperationCall_7_0= '('
                    {
                    lv_explicitOperationCall_7_0=(Token)match(input,25,FOLLOW_25_in_ruleXFeatureCall12821); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              newLeafNode(lv_explicitOperationCall_7_0, grammarAccess.getXFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_3_0_0());
                          
                    }
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElement(grammarAccess.getXFeatureCallRule());
                      	        }
                             		setWithLastConsumed(current, "explicitOperationCall", true, "(");
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5532:2: ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )?
                    int alt98=3;
                    alt98 = dfa98.predict(input);
                    switch (alt98) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5532:3: ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5532:3: ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5532:4: ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5549:1: (lv_featureCallArguments_8_0= ruleXShortClosure )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5550:3: lv_featureCallArguments_8_0= ruleXShortClosure
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleXShortClosure_in_ruleXFeatureCall12906);
                            lv_featureCallArguments_8_0=ruleXShortClosure();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
                              	        }
                                     		add(
                                     			current, 
                                     			"featureCallArguments",
                                      		lv_featureCallArguments_8_0, 
                                      		"XShortClosure");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5567:6: ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5567:6: ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5567:7: ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )*
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5567:7: ( (lv_featureCallArguments_9_0= ruleXExpression ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5568:1: (lv_featureCallArguments_9_0= ruleXExpression )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5568:1: (lv_featureCallArguments_9_0= ruleXExpression )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5569:3: lv_featureCallArguments_9_0= ruleXExpression
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleXExpression_in_ruleXFeatureCall12934);
                            lv_featureCallArguments_9_0=ruleXExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
                              	        }
                                     		add(
                                     			current, 
                                     			"featureCallArguments",
                                      		lv_featureCallArguments_9_0, 
                                      		"XExpression");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }

                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5585:2: (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )*
                            loop97:
                            do {
                                int alt97=2;
                                int LA97_0 = input.LA(1);

                                if ( (LA97_0==26) ) {
                                    alt97=1;
                                }


                                switch (alt97) {
                            	case 1 :
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5585:4: otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) )
                            	    {
                            	    otherlv_10=(Token)match(input,26,FOLLOW_26_in_ruleXFeatureCall12947); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	          	newLeafNode(otherlv_10, grammarAccess.getXFeatureCallAccess().getCommaKeyword_3_1_1_1_0());
                            	          
                            	    }
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5589:1: ( (lv_featureCallArguments_11_0= ruleXExpression ) )
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5590:1: (lv_featureCallArguments_11_0= ruleXExpression )
                            	    {
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5590:1: (lv_featureCallArguments_11_0= ruleXExpression )
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5591:3: lv_featureCallArguments_11_0= ruleXExpression
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	       
                            	      	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0()); 
                            	      	    
                            	    }
                            	    pushFollow(FOLLOW_ruleXExpression_in_ruleXFeatureCall12968);
                            	    lv_featureCallArguments_11_0=ruleXExpression();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      	        if (current==null) {
                            	      	            current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
                            	      	        }
                            	             		add(
                            	             			current, 
                            	             			"featureCallArguments",
                            	              		lv_featureCallArguments_11_0, 
                            	              		"XExpression");
                            	      	        afterParserOrEnumRuleCall();
                            	      	    
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop97;
                                }
                            } while (true);


                            }


                            }
                            break;

                    }

                    otherlv_12=(Token)match(input,27,FOLLOW_27_in_ruleXFeatureCall12985); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_12, grammarAccess.getXFeatureCallAccess().getRightParenthesisKeyword_3_2());
                          
                    }

                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5611:3: ( ( ( () '[' ) )=> (lv_featureCallArguments_13_0= ruleXClosure ) )?
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5611:4: ( ( () '[' ) )=> (lv_featureCallArguments_13_0= ruleXClosure )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5614:1: (lv_featureCallArguments_13_0= ruleXClosure )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5615:3: lv_featureCallArguments_13_0= ruleXClosure
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXClosureParserRuleCall_4_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXClosure_in_ruleXFeatureCall13020);
                    lv_featureCallArguments_13_0=ruleXClosure();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
                      	        }
                             		add(
                             			current, 
                             			"featureCallArguments",
                              		lv_featureCallArguments_13_0, 
                              		"XClosure");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXFeatureCall"


    // $ANTLR start "entryRuleFeatureCallID"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5639:1: entryRuleFeatureCallID returns [String current=null] : iv_ruleFeatureCallID= ruleFeatureCallID EOF ;
    public final String entryRuleFeatureCallID() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFeatureCallID = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5640:2: (iv_ruleFeatureCallID= ruleFeatureCallID EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5641:2: iv_ruleFeatureCallID= ruleFeatureCallID EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFeatureCallIDRule()); 
            }
            pushFollow(FOLLOW_ruleFeatureCallID_in_entryRuleFeatureCallID13058);
            iv_ruleFeatureCallID=ruleFeatureCallID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFeatureCallID.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFeatureCallID13069); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFeatureCallID"


    // $ANTLR start "ruleFeatureCallID"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5648:1: ruleFeatureCallID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ValidID_0= ruleValidID | kw= 'extends' | kw= 'static' | kw= 'import' | kw= 'extension' ) ;
    public final AntlrDatatypeRuleToken ruleFeatureCallID() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_ValidID_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5651:28: ( (this_ValidID_0= ruleValidID | kw= 'extends' | kw= 'static' | kw= 'import' | kw= 'extension' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5652:1: (this_ValidID_0= ruleValidID | kw= 'extends' | kw= 'static' | kw= 'import' | kw= 'extension' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5652:1: (this_ValidID_0= ruleValidID | kw= 'extends' | kw= 'static' | kw= 'import' | kw= 'extension' )
            int alt101=5;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt101=1;
                }
                break;
            case 38:
                {
                alt101=2;
                }
                break;
            case 81:
                {
                alt101=3;
                }
                break;
            case 82:
                {
                alt101=4;
                }
                break;
            case 83:
                {
                alt101=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }

            switch (alt101) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5653:5: this_ValidID_0= ruleValidID
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getFeatureCallIDAccess().getValidIDParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleValidID_in_ruleFeatureCallID13116);
                    this_ValidID_0=ruleValidID();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      		current.merge(this_ValidID_0);
                          
                    }
                    if ( state.backtracking==0 ) {
                       
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5665:2: kw= 'extends'
                    {
                    kw=(Token)match(input,38,FOLLOW_38_in_ruleFeatureCallID13140); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getExtendsKeyword_1()); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5672:2: kw= 'static'
                    {
                    kw=(Token)match(input,81,FOLLOW_81_in_ruleFeatureCallID13159); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getStaticKeyword_2()); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5679:2: kw= 'import'
                    {
                    kw=(Token)match(input,82,FOLLOW_82_in_ruleFeatureCallID13178); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getImportKeyword_3()); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5686:2: kw= 'extension'
                    {
                    kw=(Token)match(input,83,FOLLOW_83_in_ruleFeatureCallID13197); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getExtensionKeyword_4()); 
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFeatureCallID"


    // $ANTLR start "entryRuleIdOrSuper"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5699:1: entryRuleIdOrSuper returns [String current=null] : iv_ruleIdOrSuper= ruleIdOrSuper EOF ;
    public final String entryRuleIdOrSuper() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIdOrSuper = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5700:2: (iv_ruleIdOrSuper= ruleIdOrSuper EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5701:2: iv_ruleIdOrSuper= ruleIdOrSuper EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdOrSuperRule()); 
            }
            pushFollow(FOLLOW_ruleIdOrSuper_in_entryRuleIdOrSuper13238);
            iv_ruleIdOrSuper=ruleIdOrSuper();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdOrSuper.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIdOrSuper13249); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIdOrSuper"


    // $ANTLR start "ruleIdOrSuper"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5708:1: ruleIdOrSuper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_FeatureCallID_0= ruleFeatureCallID | kw= 'super' ) ;
    public final AntlrDatatypeRuleToken ruleIdOrSuper() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_FeatureCallID_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5711:28: ( (this_FeatureCallID_0= ruleFeatureCallID | kw= 'super' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5712:1: (this_FeatureCallID_0= ruleFeatureCallID | kw= 'super' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5712:1: (this_FeatureCallID_0= ruleFeatureCallID | kw= 'super' )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==RULE_ID||LA102_0==38||(LA102_0>=81 && LA102_0<=83)) ) {
                alt102=1;
            }
            else if ( (LA102_0==84) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5713:5: this_FeatureCallID_0= ruleFeatureCallID
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getIdOrSuperAccess().getFeatureCallIDParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleFeatureCallID_in_ruleIdOrSuper13296);
                    this_FeatureCallID_0=ruleFeatureCallID();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      		current.merge(this_FeatureCallID_0);
                          
                    }
                    if ( state.backtracking==0 ) {
                       
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5725:2: kw= 'super'
                    {
                    kw=(Token)match(input,84,FOLLOW_84_in_ruleIdOrSuper13320); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); 
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIdOrSuper"


    // $ANTLR start "entryRuleXConstructorCall"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5738:1: entryRuleXConstructorCall returns [EObject current=null] : iv_ruleXConstructorCall= ruleXConstructorCall EOF ;
    public final EObject entryRuleXConstructorCall() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXConstructorCall = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5739:2: (iv_ruleXConstructorCall= ruleXConstructorCall EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5740:2: iv_ruleXConstructorCall= ruleXConstructorCall EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXConstructorCallRule()); 
            }
            pushFollow(FOLLOW_ruleXConstructorCall_in_entryRuleXConstructorCall13360);
            iv_ruleXConstructorCall=ruleXConstructorCall();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXConstructorCall; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXConstructorCall13370); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXConstructorCall"


    // $ANTLR start "ruleXConstructorCall"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5747:1: ruleXConstructorCall returns [EObject current=null] : ( () otherlv_1= 'new' ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_3= '<' ) ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) (otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) ) )* otherlv_7= '>' )? ( ( ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )? otherlv_13= ')' )? ( ( ( () '[' ) )=> (lv_arguments_14_0= ruleXClosure ) )? ) ;
    public final EObject ruleXConstructorCall() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token lv_explicitConstructorCall_8_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        EObject lv_typeArguments_4_0 = null;

        EObject lv_typeArguments_6_0 = null;

        EObject lv_arguments_9_0 = null;

        EObject lv_arguments_10_0 = null;

        EObject lv_arguments_12_0 = null;

        EObject lv_arguments_14_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5750:28: ( ( () otherlv_1= 'new' ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_3= '<' ) ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) (otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) ) )* otherlv_7= '>' )? ( ( ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )? otherlv_13= ')' )? ( ( ( () '[' ) )=> (lv_arguments_14_0= ruleXClosure ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5751:1: ( () otherlv_1= 'new' ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_3= '<' ) ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) (otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) ) )* otherlv_7= '>' )? ( ( ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )? otherlv_13= ')' )? ( ( ( () '[' ) )=> (lv_arguments_14_0= ruleXClosure ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5751:1: ( () otherlv_1= 'new' ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_3= '<' ) ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) (otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) ) )* otherlv_7= '>' )? ( ( ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )? otherlv_13= ')' )? ( ( ( () '[' ) )=> (lv_arguments_14_0= ruleXClosure ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5751:2: () otherlv_1= 'new' ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_3= '<' ) ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) (otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) ) )* otherlv_7= '>' )? ( ( ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )? otherlv_13= ')' )? ( ( ( () '[' ) )=> (lv_arguments_14_0= ruleXClosure ) )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5751:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5752:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXConstructorCallAccess().getXConstructorCallAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,24,FOLLOW_24_in_ruleXConstructorCall13416); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXConstructorCallAccess().getNewKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5761:1: ( ( ruleQualifiedName ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5762:1: ( ruleQualifiedName )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5762:1: ( ruleQualifiedName )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5763:3: ruleQualifiedName
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              	            current = createModelElement(grammarAccess.getXConstructorCallRule());
              	        }
                      
            }
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getConstructorJvmConstructorCrossReference_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleQualifiedName_in_ruleXConstructorCall13439);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5776:2: ( ( ( '<' )=>otherlv_3= '<' ) ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) (otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) ) )* otherlv_7= '>' )?
            int alt104=2;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5776:3: ( ( '<' )=>otherlv_3= '<' ) ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) (otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) ) )* otherlv_7= '>'
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5776:3: ( ( '<' )=>otherlv_3= '<' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5776:4: ( '<' )=>otherlv_3= '<'
                    {
                    otherlv_3=(Token)match(input,34,FOLLOW_34_in_ruleXConstructorCall13460); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_3, grammarAccess.getXConstructorCallAccess().getLessThanSignKeyword_3_0());
                          
                    }

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5781:2: ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5782:1: (lv_typeArguments_4_0= ruleJvmArgumentTypeReference )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5782:1: (lv_typeArguments_4_0= ruleJvmArgumentTypeReference )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5783:3: lv_typeArguments_4_0= ruleJvmArgumentTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleXConstructorCall13482);
                    lv_typeArguments_4_0=ruleJvmArgumentTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
                      	        }
                             		add(
                             			current, 
                             			"typeArguments",
                              		lv_typeArguments_4_0, 
                              		"JvmArgumentTypeReference");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5799:2: (otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) ) )*
                    loop103:
                    do {
                        int alt103=2;
                        int LA103_0 = input.LA(1);

                        if ( (LA103_0==26) ) {
                            alt103=1;
                        }


                        switch (alt103) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5799:4: otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) )
                    	    {
                    	    otherlv_5=(Token)match(input,26,FOLLOW_26_in_ruleXConstructorCall13495); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_5, grammarAccess.getXConstructorCallAccess().getCommaKeyword_3_2_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5803:1: ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5804:1: (lv_typeArguments_6_0= ruleJvmArgumentTypeReference )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5804:1: (lv_typeArguments_6_0= ruleJvmArgumentTypeReference )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5805:3: lv_typeArguments_6_0= ruleJvmArgumentTypeReference
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleXConstructorCall13516);
                    	    lv_typeArguments_6_0=ruleJvmArgumentTypeReference();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"typeArguments",
                    	              		lv_typeArguments_6_0, 
                    	              		"JvmArgumentTypeReference");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop103;
                        }
                    } while (true);

                    otherlv_7=(Token)match(input,31,FOLLOW_31_in_ruleXConstructorCall13530); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_7, grammarAccess.getXConstructorCallAccess().getGreaterThanSignKeyword_3_3());
                          
                    }

                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5825:3: ( ( ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )? otherlv_13= ')' )?
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5825:4: ( ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )? otherlv_13= ')'
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5825:4: ( ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5825:5: ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5832:1: (lv_explicitConstructorCall_8_0= '(' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5833:3: lv_explicitConstructorCall_8_0= '('
                    {
                    lv_explicitConstructorCall_8_0=(Token)match(input,25,FOLLOW_25_in_ruleXConstructorCall13566); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              newLeafNode(lv_explicitConstructorCall_8_0, grammarAccess.getXConstructorCallAccess().getExplicitConstructorCallLeftParenthesisKeyword_4_0_0());
                          
                    }
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElement(grammarAccess.getXConstructorCallRule());
                      	        }
                             		setWithLastConsumed(current, "explicitConstructorCall", true, "(");
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5846:2: ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )?
                    int alt106=3;
                    alt106 = dfa106.predict(input);
                    switch (alt106) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5846:3: ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5846:3: ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5846:4: ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5863:1: (lv_arguments_9_0= ruleXShortClosure )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5864:3: lv_arguments_9_0= ruleXShortClosure
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXShortClosureParserRuleCall_4_1_0_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleXShortClosure_in_ruleXConstructorCall13651);
                            lv_arguments_9_0=ruleXShortClosure();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
                              	        }
                                     		add(
                                     			current, 
                                     			"arguments",
                                      		lv_arguments_9_0, 
                                      		"XShortClosure");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5881:6: ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5881:6: ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5881:7: ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )*
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5881:7: ( (lv_arguments_10_0= ruleXExpression ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5882:1: (lv_arguments_10_0= ruleXExpression )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5882:1: (lv_arguments_10_0= ruleXExpression )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5883:3: lv_arguments_10_0= ruleXExpression
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_0_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleXExpression_in_ruleXConstructorCall13679);
                            lv_arguments_10_0=ruleXExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
                              	        }
                                     		add(
                                     			current, 
                                     			"arguments",
                                      		lv_arguments_10_0, 
                                      		"XExpression");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }

                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5899:2: (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )*
                            loop105:
                            do {
                                int alt105=2;
                                int LA105_0 = input.LA(1);

                                if ( (LA105_0==26) ) {
                                    alt105=1;
                                }


                                switch (alt105) {
                            	case 1 :
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5899:4: otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) )
                            	    {
                            	    otherlv_11=(Token)match(input,26,FOLLOW_26_in_ruleXConstructorCall13692); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	          	newLeafNode(otherlv_11, grammarAccess.getXConstructorCallAccess().getCommaKeyword_4_1_1_1_0());
                            	          
                            	    }
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5903:1: ( (lv_arguments_12_0= ruleXExpression ) )
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5904:1: (lv_arguments_12_0= ruleXExpression )
                            	    {
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5904:1: (lv_arguments_12_0= ruleXExpression )
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5905:3: lv_arguments_12_0= ruleXExpression
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	       
                            	      	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_1_1_0()); 
                            	      	    
                            	    }
                            	    pushFollow(FOLLOW_ruleXExpression_in_ruleXConstructorCall13713);
                            	    lv_arguments_12_0=ruleXExpression();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      	        if (current==null) {
                            	      	            current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
                            	      	        }
                            	             		add(
                            	             			current, 
                            	             			"arguments",
                            	              		lv_arguments_12_0, 
                            	              		"XExpression");
                            	      	        afterParserOrEnumRuleCall();
                            	      	    
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop105;
                                }
                            } while (true);


                            }


                            }
                            break;

                    }

                    otherlv_13=(Token)match(input,27,FOLLOW_27_in_ruleXConstructorCall13730); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_13, grammarAccess.getXConstructorCallAccess().getRightParenthesisKeyword_4_2());
                          
                    }

                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5925:3: ( ( ( () '[' ) )=> (lv_arguments_14_0= ruleXClosure ) )?
            int alt108=2;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5925:4: ( ( () '[' ) )=> (lv_arguments_14_0= ruleXClosure )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5928:1: (lv_arguments_14_0= ruleXClosure )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5929:3: lv_arguments_14_0= ruleXClosure
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXClosureParserRuleCall_5_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXClosure_in_ruleXConstructorCall13765);
                    lv_arguments_14_0=ruleXClosure();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
                      	        }
                             		add(
                             			current, 
                             			"arguments",
                              		lv_arguments_14_0, 
                              		"XClosure");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXConstructorCall"


    // $ANTLR start "entryRuleXBooleanLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5953:1: entryRuleXBooleanLiteral returns [EObject current=null] : iv_ruleXBooleanLiteral= ruleXBooleanLiteral EOF ;
    public final EObject entryRuleXBooleanLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXBooleanLiteral = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5954:2: (iv_ruleXBooleanLiteral= ruleXBooleanLiteral EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5955:2: iv_ruleXBooleanLiteral= ruleXBooleanLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_ruleXBooleanLiteral_in_entryRuleXBooleanLiteral13802);
            iv_ruleXBooleanLiteral=ruleXBooleanLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXBooleanLiteral; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXBooleanLiteral13812); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXBooleanLiteral"


    // $ANTLR start "ruleXBooleanLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5962:1: ruleXBooleanLiteral returns [EObject current=null] : ( () (otherlv_1= 'false' | ( (lv_isTrue_2_0= 'true' ) ) ) ) ;
    public final EObject ruleXBooleanLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_isTrue_2_0=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5965:28: ( ( () (otherlv_1= 'false' | ( (lv_isTrue_2_0= 'true' ) ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5966:1: ( () (otherlv_1= 'false' | ( (lv_isTrue_2_0= 'true' ) ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5966:1: ( () (otherlv_1= 'false' | ( (lv_isTrue_2_0= 'true' ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5966:2: () (otherlv_1= 'false' | ( (lv_isTrue_2_0= 'true' ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5966:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5967:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXBooleanLiteralAccess().getXBooleanLiteralAction_0(),
                          current);
                  
            }

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5972:2: (otherlv_1= 'false' | ( (lv_isTrue_2_0= 'true' ) ) )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==85) ) {
                alt109=1;
            }
            else if ( (LA109_0==86) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5972:4: otherlv_1= 'false'
                    {
                    otherlv_1=(Token)match(input,85,FOLLOW_85_in_ruleXBooleanLiteral13859); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_1, grammarAccess.getXBooleanLiteralAccess().getFalseKeyword_1_0());
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5977:6: ( (lv_isTrue_2_0= 'true' ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5977:6: ( (lv_isTrue_2_0= 'true' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5978:1: (lv_isTrue_2_0= 'true' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5978:1: (lv_isTrue_2_0= 'true' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5979:3: lv_isTrue_2_0= 'true'
                    {
                    lv_isTrue_2_0=(Token)match(input,86,FOLLOW_86_in_ruleXBooleanLiteral13883); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              newLeafNode(lv_isTrue_2_0, grammarAccess.getXBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0());
                          
                    }
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElement(grammarAccess.getXBooleanLiteralRule());
                      	        }
                             		setWithLastConsumed(current, "isTrue", true, "true");
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXBooleanLiteral"


    // $ANTLR start "entryRuleXNullLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6000:1: entryRuleXNullLiteral returns [EObject current=null] : iv_ruleXNullLiteral= ruleXNullLiteral EOF ;
    public final EObject entryRuleXNullLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXNullLiteral = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6001:2: (iv_ruleXNullLiteral= ruleXNullLiteral EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6002:2: iv_ruleXNullLiteral= ruleXNullLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXNullLiteralRule()); 
            }
            pushFollow(FOLLOW_ruleXNullLiteral_in_entryRuleXNullLiteral13933);
            iv_ruleXNullLiteral=ruleXNullLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXNullLiteral; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXNullLiteral13943); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXNullLiteral"


    // $ANTLR start "ruleXNullLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6009:1: ruleXNullLiteral returns [EObject current=null] : ( () otherlv_1= 'null' ) ;
    public final EObject ruleXNullLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6012:28: ( ( () otherlv_1= 'null' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6013:1: ( () otherlv_1= 'null' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6013:1: ( () otherlv_1= 'null' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6013:2: () otherlv_1= 'null'
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6013:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6014:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXNullLiteralAccess().getXNullLiteralAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,87,FOLLOW_87_in_ruleXNullLiteral13989); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXNullLiteralAccess().getNullKeyword_1());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXNullLiteral"


    // $ANTLR start "entryRuleXNumberLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6031:1: entryRuleXNumberLiteral returns [EObject current=null] : iv_ruleXNumberLiteral= ruleXNumberLiteral EOF ;
    public final EObject entryRuleXNumberLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXNumberLiteral = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6032:2: (iv_ruleXNumberLiteral= ruleXNumberLiteral EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6033:2: iv_ruleXNumberLiteral= ruleXNumberLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXNumberLiteralRule()); 
            }
            pushFollow(FOLLOW_ruleXNumberLiteral_in_entryRuleXNumberLiteral14025);
            iv_ruleXNumberLiteral=ruleXNumberLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXNumberLiteral; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXNumberLiteral14035); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXNumberLiteral"


    // $ANTLR start "ruleXNumberLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6040:1: ruleXNumberLiteral returns [EObject current=null] : ( () ( (lv_value_1_0= ruleNumber ) ) ) ;
    public final EObject ruleXNumberLiteral() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_value_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6043:28: ( ( () ( (lv_value_1_0= ruleNumber ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6044:1: ( () ( (lv_value_1_0= ruleNumber ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6044:1: ( () ( (lv_value_1_0= ruleNumber ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6044:2: () ( (lv_value_1_0= ruleNumber ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6044:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6045:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXNumberLiteralAccess().getXNumberLiteralAction_0(),
                          current);
                  
            }

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6050:2: ( (lv_value_1_0= ruleNumber ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6051:1: (lv_value_1_0= ruleNumber )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6051:1: (lv_value_1_0= ruleNumber )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6052:3: lv_value_1_0= ruleNumber
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXNumberLiteralAccess().getValueNumberParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleNumber_in_ruleXNumberLiteral14090);
            lv_value_1_0=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXNumberLiteralRule());
              	        }
                     		set(
                     			current, 
                     			"value",
                      		lv_value_1_0, 
                      		"Number");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXNumberLiteral"


    // $ANTLR start "entryRuleXStringLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6076:1: entryRuleXStringLiteral returns [EObject current=null] : iv_ruleXStringLiteral= ruleXStringLiteral EOF ;
    public final EObject entryRuleXStringLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXStringLiteral = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6077:2: (iv_ruleXStringLiteral= ruleXStringLiteral EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6078:2: iv_ruleXStringLiteral= ruleXStringLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXStringLiteralRule()); 
            }
            pushFollow(FOLLOW_ruleXStringLiteral_in_entryRuleXStringLiteral14126);
            iv_ruleXStringLiteral=ruleXStringLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXStringLiteral; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXStringLiteral14136); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXStringLiteral"


    // $ANTLR start "ruleXStringLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6085:1: ruleXStringLiteral returns [EObject current=null] : ( () ( (lv_value_1_0= RULE_STRING ) ) ) ;
    public final EObject ruleXStringLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_1_0=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6088:28: ( ( () ( (lv_value_1_0= RULE_STRING ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6089:1: ( () ( (lv_value_1_0= RULE_STRING ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6089:1: ( () ( (lv_value_1_0= RULE_STRING ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6089:2: () ( (lv_value_1_0= RULE_STRING ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6089:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6090:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXStringLiteralAccess().getXStringLiteralAction_0(),
                          current);
                  
            }

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6095:2: ( (lv_value_1_0= RULE_STRING ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6096:1: (lv_value_1_0= RULE_STRING )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6096:1: (lv_value_1_0= RULE_STRING )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6097:3: lv_value_1_0= RULE_STRING
            {
            lv_value_1_0=(Token)match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleXStringLiteral14187); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(lv_value_1_0, grammarAccess.getXStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
              		
            }
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElement(grammarAccess.getXStringLiteralRule());
              	        }
                     		setWithLastConsumed(
                     			current, 
                     			"value",
                      		lv_value_1_0, 
                      		"STRING");
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXStringLiteral"


    // $ANTLR start "entryRuleXTypeLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6121:1: entryRuleXTypeLiteral returns [EObject current=null] : iv_ruleXTypeLiteral= ruleXTypeLiteral EOF ;
    public final EObject entryRuleXTypeLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXTypeLiteral = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6122:2: (iv_ruleXTypeLiteral= ruleXTypeLiteral EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6123:2: iv_ruleXTypeLiteral= ruleXTypeLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXTypeLiteralRule()); 
            }
            pushFollow(FOLLOW_ruleXTypeLiteral_in_entryRuleXTypeLiteral14228);
            iv_ruleXTypeLiteral=ruleXTypeLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXTypeLiteral; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXTypeLiteral14238); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXTypeLiteral"


    // $ANTLR start "ruleXTypeLiteral"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6130:1: ruleXTypeLiteral returns [EObject current=null] : ( () otherlv_1= 'typeof' otherlv_2= '(' ( ( ruleQualifiedName ) ) ( (lv_arrayDimensions_4_0= ruleArrayBrackets ) )* otherlv_5= ')' ) ;
    public final EObject ruleXTypeLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_arrayDimensions_4_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6133:28: ( ( () otherlv_1= 'typeof' otherlv_2= '(' ( ( ruleQualifiedName ) ) ( (lv_arrayDimensions_4_0= ruleArrayBrackets ) )* otherlv_5= ')' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6134:1: ( () otherlv_1= 'typeof' otherlv_2= '(' ( ( ruleQualifiedName ) ) ( (lv_arrayDimensions_4_0= ruleArrayBrackets ) )* otherlv_5= ')' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6134:1: ( () otherlv_1= 'typeof' otherlv_2= '(' ( ( ruleQualifiedName ) ) ( (lv_arrayDimensions_4_0= ruleArrayBrackets ) )* otherlv_5= ')' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6134:2: () otherlv_1= 'typeof' otherlv_2= '(' ( ( ruleQualifiedName ) ) ( (lv_arrayDimensions_4_0= ruleArrayBrackets ) )* otherlv_5= ')'
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6134:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6135:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXTypeLiteralAccess().getXTypeLiteralAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,88,FOLLOW_88_in_ruleXTypeLiteral14284); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXTypeLiteralAccess().getTypeofKeyword_1());
                  
            }
            otherlv_2=(Token)match(input,25,FOLLOW_25_in_ruleXTypeLiteral14296); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_2, grammarAccess.getXTypeLiteralAccess().getLeftParenthesisKeyword_2());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6148:1: ( ( ruleQualifiedName ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6149:1: ( ruleQualifiedName )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6149:1: ( ruleQualifiedName )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6150:3: ruleQualifiedName
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              	            current = createModelElement(grammarAccess.getXTypeLiteralRule());
              	        }
                      
            }
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXTypeLiteralAccess().getTypeJvmTypeCrossReference_3_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleQualifiedName_in_ruleXTypeLiteral14319);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6163:2: ( (lv_arrayDimensions_4_0= ruleArrayBrackets ) )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==67) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6164:1: (lv_arrayDimensions_4_0= ruleArrayBrackets )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6164:1: (lv_arrayDimensions_4_0= ruleArrayBrackets )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6165:3: lv_arrayDimensions_4_0= ruleArrayBrackets
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXTypeLiteralAccess().getArrayDimensionsArrayBracketsParserRuleCall_4_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleArrayBrackets_in_ruleXTypeLiteral14340);
            	    lv_arrayDimensions_4_0=ruleArrayBrackets();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXTypeLiteralRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"arrayDimensions",
            	              		lv_arrayDimensions_4_0, 
            	              		"ArrayBrackets");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            otherlv_5=(Token)match(input,27,FOLLOW_27_in_ruleXTypeLiteral14353); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_5, grammarAccess.getXTypeLiteralAccess().getRightParenthesisKeyword_5());
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXTypeLiteral"


    // $ANTLR start "entryRuleXThrowExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6193:1: entryRuleXThrowExpression returns [EObject current=null] : iv_ruleXThrowExpression= ruleXThrowExpression EOF ;
    public final EObject entryRuleXThrowExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXThrowExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6194:2: (iv_ruleXThrowExpression= ruleXThrowExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6195:2: iv_ruleXThrowExpression= ruleXThrowExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXThrowExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXThrowExpression_in_entryRuleXThrowExpression14389);
            iv_ruleXThrowExpression=ruleXThrowExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXThrowExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXThrowExpression14399); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXThrowExpression"


    // $ANTLR start "ruleXThrowExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6202:1: ruleXThrowExpression returns [EObject current=null] : ( () otherlv_1= 'throw' ( (lv_expression_2_0= ruleXExpression ) ) ) ;
    public final EObject ruleXThrowExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6205:28: ( ( () otherlv_1= 'throw' ( (lv_expression_2_0= ruleXExpression ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6206:1: ( () otherlv_1= 'throw' ( (lv_expression_2_0= ruleXExpression ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6206:1: ( () otherlv_1= 'throw' ( (lv_expression_2_0= ruleXExpression ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6206:2: () otherlv_1= 'throw' ( (lv_expression_2_0= ruleXExpression ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6206:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6207:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXThrowExpressionAccess().getXThrowExpressionAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,89,FOLLOW_89_in_ruleXThrowExpression14445); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXThrowExpressionAccess().getThrowKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6216:1: ( (lv_expression_2_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6217:1: (lv_expression_2_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6217:1: (lv_expression_2_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6218:3: lv_expression_2_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXThrowExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXThrowExpression14466);
            lv_expression_2_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXThrowExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"expression",
                      		lv_expression_2_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXThrowExpression"


    // $ANTLR start "entryRuleXReturnExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6242:1: entryRuleXReturnExpression returns [EObject current=null] : iv_ruleXReturnExpression= ruleXReturnExpression EOF ;
    public final EObject entryRuleXReturnExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXReturnExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6243:2: (iv_ruleXReturnExpression= ruleXReturnExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6244:2: iv_ruleXReturnExpression= ruleXReturnExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXReturnExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXReturnExpression_in_entryRuleXReturnExpression14502);
            iv_ruleXReturnExpression=ruleXReturnExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXReturnExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXReturnExpression14512); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXReturnExpression"


    // $ANTLR start "ruleXReturnExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6251:1: ruleXReturnExpression returns [EObject current=null] : ( () otherlv_1= 'return' ( ( 'extends' | 'static' | 'import' | 'extension' | '!' | '-' | '+' | 'new' | '{' | 'switch' | 'synchronized' | '<' | 'super' | '#' | '[' | 'false' | 'true' | 'null' | 'typeof' | 'if' | 'for' | 'while' | 'do' | 'throw' | 'return' | 'try' | '(' | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING )=> (lv_expression_2_0= ruleXExpression ) )? ) ;
    public final EObject ruleXReturnExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6254:28: ( ( () otherlv_1= 'return' ( ( 'extends' | 'static' | 'import' | 'extension' | '!' | '-' | '+' | 'new' | '{' | 'switch' | 'synchronized' | '<' | 'super' | '#' | '[' | 'false' | 'true' | 'null' | 'typeof' | 'if' | 'for' | 'while' | 'do' | 'throw' | 'return' | 'try' | '(' | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING )=> (lv_expression_2_0= ruleXExpression ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6255:1: ( () otherlv_1= 'return' ( ( 'extends' | 'static' | 'import' | 'extension' | '!' | '-' | '+' | 'new' | '{' | 'switch' | 'synchronized' | '<' | 'super' | '#' | '[' | 'false' | 'true' | 'null' | 'typeof' | 'if' | 'for' | 'while' | 'do' | 'throw' | 'return' | 'try' | '(' | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING )=> (lv_expression_2_0= ruleXExpression ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6255:1: ( () otherlv_1= 'return' ( ( 'extends' | 'static' | 'import' | 'extension' | '!' | '-' | '+' | 'new' | '{' | 'switch' | 'synchronized' | '<' | 'super' | '#' | '[' | 'false' | 'true' | 'null' | 'typeof' | 'if' | 'for' | 'while' | 'do' | 'throw' | 'return' | 'try' | '(' | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING )=> (lv_expression_2_0= ruleXExpression ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6255:2: () otherlv_1= 'return' ( ( 'extends' | 'static' | 'import' | 'extension' | '!' | '-' | '+' | 'new' | '{' | 'switch' | 'synchronized' | '<' | 'super' | '#' | '[' | 'false' | 'true' | 'null' | 'typeof' | 'if' | 'for' | 'while' | 'do' | 'throw' | 'return' | 'try' | '(' | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING )=> (lv_expression_2_0= ruleXExpression ) )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6255:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6256:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXReturnExpressionAccess().getXReturnExpressionAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,90,FOLLOW_90_in_ruleXReturnExpression14558); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXReturnExpressionAccess().getReturnKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6265:1: ( ( 'extends' | 'static' | 'import' | 'extension' | '!' | '-' | '+' | 'new' | '{' | 'switch' | 'synchronized' | '<' | 'super' | '#' | '[' | 'false' | 'true' | 'null' | 'typeof' | 'if' | 'for' | 'while' | 'do' | 'throw' | 'return' | 'try' | '(' | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING )=> (lv_expression_2_0= ruleXExpression ) )?
            int alt111=2;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6265:2: ( 'extends' | 'static' | 'import' | 'extension' | '!' | '-' | '+' | 'new' | '{' | 'switch' | 'synchronized' | '<' | 'super' | '#' | '[' | 'false' | 'true' | 'null' | 'typeof' | 'if' | 'for' | 'while' | 'do' | 'throw' | 'return' | 'try' | '(' | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING )=> (lv_expression_2_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6293:1: (lv_expression_2_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6294:3: lv_expression_2_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXReturnExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXReturnExpression14793);
                    lv_expression_2_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXReturnExpressionRule());
                      	        }
                             		set(
                             			current, 
                             			"expression",
                              		lv_expression_2_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXReturnExpression"


    // $ANTLR start "entryRuleXTryCatchFinallyExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6318:1: entryRuleXTryCatchFinallyExpression returns [EObject current=null] : iv_ruleXTryCatchFinallyExpression= ruleXTryCatchFinallyExpression EOF ;
    public final EObject entryRuleXTryCatchFinallyExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXTryCatchFinallyExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6319:2: (iv_ruleXTryCatchFinallyExpression= ruleXTryCatchFinallyExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6320:2: iv_ruleXTryCatchFinallyExpression= ruleXTryCatchFinallyExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXTryCatchFinallyExpression_in_entryRuleXTryCatchFinallyExpression14830);
            iv_ruleXTryCatchFinallyExpression=ruleXTryCatchFinallyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXTryCatchFinallyExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXTryCatchFinallyExpression14840); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXTryCatchFinallyExpression"


    // $ANTLR start "ruleXTryCatchFinallyExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6327:1: ruleXTryCatchFinallyExpression returns [EObject current=null] : ( () otherlv_1= 'try' ( (lv_expression_2_0= ruleXExpression ) ) ( ( ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+ ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )? ) | (otherlv_6= 'finally' ( (lv_finallyExpression_7_0= ruleXExpression ) ) ) ) ) ;
    public final EObject ruleXTryCatchFinallyExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_expression_2_0 = null;

        EObject lv_catchClauses_3_0 = null;

        EObject lv_finallyExpression_5_0 = null;

        EObject lv_finallyExpression_7_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6330:28: ( ( () otherlv_1= 'try' ( (lv_expression_2_0= ruleXExpression ) ) ( ( ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+ ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )? ) | (otherlv_6= 'finally' ( (lv_finallyExpression_7_0= ruleXExpression ) ) ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6331:1: ( () otherlv_1= 'try' ( (lv_expression_2_0= ruleXExpression ) ) ( ( ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+ ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )? ) | (otherlv_6= 'finally' ( (lv_finallyExpression_7_0= ruleXExpression ) ) ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6331:1: ( () otherlv_1= 'try' ( (lv_expression_2_0= ruleXExpression ) ) ( ( ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+ ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )? ) | (otherlv_6= 'finally' ( (lv_finallyExpression_7_0= ruleXExpression ) ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6331:2: () otherlv_1= 'try' ( (lv_expression_2_0= ruleXExpression ) ) ( ( ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+ ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )? ) | (otherlv_6= 'finally' ( (lv_finallyExpression_7_0= ruleXExpression ) ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6331:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6332:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXTryCatchFinallyExpressionAccess().getXTryCatchFinallyExpressionAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,91,FOLLOW_91_in_ruleXTryCatchFinallyExpression14886); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXTryCatchFinallyExpressionAccess().getTryKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6341:1: ( (lv_expression_2_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6342:1: (lv_expression_2_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6342:1: (lv_expression_2_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6343:3: lv_expression_2_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXTryCatchFinallyExpression14907);
            lv_expression_2_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"expression",
                      		lv_expression_2_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6359:2: ( ( ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+ ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )? ) | (otherlv_6= 'finally' ( (lv_finallyExpression_7_0= ruleXExpression ) ) ) )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==94) ) {
                alt114=1;
            }
            else if ( (LA114_0==92) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6359:3: ( ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+ ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )? )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6359:3: ( ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+ ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )? )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6359:4: ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+ ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )?
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6359:4: ( ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause ) )+
                    int cnt112=0;
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==94) ) {
                            int LA112_2 = input.LA(2);

                            if ( (synpred40_InternalAqua()) ) {
                                alt112=1;
                            }


                        }


                        switch (alt112) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6359:5: ( 'catch' )=> (lv_catchClauses_3_0= ruleXCatchClause )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6361:1: (lv_catchClauses_3_0= ruleXCatchClause )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6362:3: lv_catchClauses_3_0= ruleXCatchClause
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesXCatchClauseParserRuleCall_3_0_0_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleXCatchClause_in_ruleXTryCatchFinallyExpression14937);
                    	    lv_catchClauses_3_0=ruleXCatchClause();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"catchClauses",
                    	              		lv_catchClauses_3_0, 
                    	              		"XCatchClause");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt112 >= 1 ) break loop112;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(112, input);
                                throw eee;
                        }
                        cnt112++;
                    } while (true);

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6378:3: ( ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) ) )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==92) ) {
                        int LA113_1 = input.LA(2);

                        if ( (synpred41_InternalAqua()) ) {
                            alt113=1;
                        }
                    }
                    switch (alt113) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6378:4: ( ( 'finally' )=>otherlv_4= 'finally' ) ( (lv_finallyExpression_5_0= ruleXExpression ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6378:4: ( ( 'finally' )=>otherlv_4= 'finally' )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6378:5: ( 'finally' )=>otherlv_4= 'finally'
                            {
                            otherlv_4=(Token)match(input,92,FOLLOW_92_in_ruleXTryCatchFinallyExpression14959); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                  	newLeafNode(otherlv_4, grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_3_0_1_0());
                                  
                            }

                            }

                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6383:2: ( (lv_finallyExpression_5_0= ruleXExpression ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6384:1: (lv_finallyExpression_5_0= ruleXExpression )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6384:1: (lv_finallyExpression_5_0= ruleXExpression )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6385:3: lv_finallyExpression_5_0= ruleXExpression
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleXExpression_in_ruleXTryCatchFinallyExpression14981);
                            lv_finallyExpression_5_0=ruleXExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
                              	        }
                                     		set(
                                     			current, 
                                     			"finallyExpression",
                                      		lv_finallyExpression_5_0, 
                                      		"XExpression");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6402:6: (otherlv_6= 'finally' ( (lv_finallyExpression_7_0= ruleXExpression ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6402:6: (otherlv_6= 'finally' ( (lv_finallyExpression_7_0= ruleXExpression ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6402:8: otherlv_6= 'finally' ( (lv_finallyExpression_7_0= ruleXExpression ) )
                    {
                    otherlv_6=(Token)match(input,92,FOLLOW_92_in_ruleXTryCatchFinallyExpression15003); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_6, grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_3_1_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6406:1: ( (lv_finallyExpression_7_0= ruleXExpression ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6407:1: (lv_finallyExpression_7_0= ruleXExpression )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6407:1: (lv_finallyExpression_7_0= ruleXExpression )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6408:3: lv_finallyExpression_7_0= ruleXExpression
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_3_1_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleXExpression_in_ruleXTryCatchFinallyExpression15024);
                    lv_finallyExpression_7_0=ruleXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
                      	        }
                             		set(
                             			current, 
                             			"finallyExpression",
                              		lv_finallyExpression_7_0, 
                              		"XExpression");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXTryCatchFinallyExpression"


    // $ANTLR start "entryRuleXSynchronizedExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6432:1: entryRuleXSynchronizedExpression returns [EObject current=null] : iv_ruleXSynchronizedExpression= ruleXSynchronizedExpression EOF ;
    public final EObject entryRuleXSynchronizedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXSynchronizedExpression = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6433:2: (iv_ruleXSynchronizedExpression= ruleXSynchronizedExpression EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6434:2: iv_ruleXSynchronizedExpression= ruleXSynchronizedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXSynchronizedExpressionRule()); 
            }
            pushFollow(FOLLOW_ruleXSynchronizedExpression_in_entryRuleXSynchronizedExpression15062);
            iv_ruleXSynchronizedExpression=ruleXSynchronizedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXSynchronizedExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXSynchronizedExpression15072); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXSynchronizedExpression"


    // $ANTLR start "ruleXSynchronizedExpression"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6441:1: ruleXSynchronizedExpression returns [EObject current=null] : ( ( ( ( () 'synchronized' '(' ) )=> ( () otherlv_1= 'synchronized' otherlv_2= '(' ) ) ( (lv_param_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_expression_5_0= ruleXExpression ) ) ) ;
    public final EObject ruleXSynchronizedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_param_3_0 = null;

        EObject lv_expression_5_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6444:28: ( ( ( ( ( () 'synchronized' '(' ) )=> ( () otherlv_1= 'synchronized' otherlv_2= '(' ) ) ( (lv_param_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_expression_5_0= ruleXExpression ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6445:1: ( ( ( ( () 'synchronized' '(' ) )=> ( () otherlv_1= 'synchronized' otherlv_2= '(' ) ) ( (lv_param_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_expression_5_0= ruleXExpression ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6445:1: ( ( ( ( () 'synchronized' '(' ) )=> ( () otherlv_1= 'synchronized' otherlv_2= '(' ) ) ( (lv_param_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_expression_5_0= ruleXExpression ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6445:2: ( ( ( () 'synchronized' '(' ) )=> ( () otherlv_1= 'synchronized' otherlv_2= '(' ) ) ( (lv_param_3_0= ruleXExpression ) ) otherlv_4= ')' ( (lv_expression_5_0= ruleXExpression ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6445:2: ( ( ( () 'synchronized' '(' ) )=> ( () otherlv_1= 'synchronized' otherlv_2= '(' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6445:3: ( ( () 'synchronized' '(' ) )=> ( () otherlv_1= 'synchronized' otherlv_2= '(' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6448:5: ( () otherlv_1= 'synchronized' otherlv_2= '(' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6448:6: () otherlv_1= 'synchronized' otherlv_2= '('
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6448:6: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6449:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getXSynchronizedExpressionAccess().getXSynchronizedExpressionAction_0_0_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,93,FOLLOW_93_in_ruleXSynchronizedExpression15136); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXSynchronizedExpressionAccess().getSynchronizedKeyword_0_0_1());
                  
            }
            otherlv_2=(Token)match(input,25,FOLLOW_25_in_ruleXSynchronizedExpression15148); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_2, grammarAccess.getXSynchronizedExpressionAccess().getLeftParenthesisKeyword_0_0_2());
                  
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6462:3: ( (lv_param_3_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6463:1: (lv_param_3_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6463:1: (lv_param_3_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6464:3: lv_param_3_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXSynchronizedExpressionAccess().getParamXExpressionParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXSynchronizedExpression15171);
            lv_param_3_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXSynchronizedExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"param",
                      		lv_param_3_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_4=(Token)match(input,27,FOLLOW_27_in_ruleXSynchronizedExpression15183); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_4, grammarAccess.getXSynchronizedExpressionAccess().getRightParenthesisKeyword_2());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6484:1: ( (lv_expression_5_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6485:1: (lv_expression_5_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6485:1: (lv_expression_5_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6486:3: lv_expression_5_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXSynchronizedExpressionAccess().getExpressionXExpressionParserRuleCall_3_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXSynchronizedExpression15204);
            lv_expression_5_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXSynchronizedExpressionRule());
              	        }
                     		set(
                     			current, 
                     			"expression",
                      		lv_expression_5_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXSynchronizedExpression"


    // $ANTLR start "entryRuleXCatchClause"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6510:1: entryRuleXCatchClause returns [EObject current=null] : iv_ruleXCatchClause= ruleXCatchClause EOF ;
    public final EObject entryRuleXCatchClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXCatchClause = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6511:2: (iv_ruleXCatchClause= ruleXCatchClause EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6512:2: iv_ruleXCatchClause= ruleXCatchClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXCatchClauseRule()); 
            }
            pushFollow(FOLLOW_ruleXCatchClause_in_entryRuleXCatchClause15240);
            iv_ruleXCatchClause=ruleXCatchClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXCatchClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXCatchClause15250); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXCatchClause"


    // $ANTLR start "ruleXCatchClause"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6519:1: ruleXCatchClause returns [EObject current=null] : ( ( ( 'catch' )=>otherlv_0= 'catch' ) otherlv_1= '(' ( (lv_declaredParam_2_0= ruleFullJvmFormalParameter ) ) otherlv_3= ')' ( (lv_expression_4_0= ruleXExpression ) ) ) ;
    public final EObject ruleXCatchClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_declaredParam_2_0 = null;

        EObject lv_expression_4_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6522:28: ( ( ( ( 'catch' )=>otherlv_0= 'catch' ) otherlv_1= '(' ( (lv_declaredParam_2_0= ruleFullJvmFormalParameter ) ) otherlv_3= ')' ( (lv_expression_4_0= ruleXExpression ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6523:1: ( ( ( 'catch' )=>otherlv_0= 'catch' ) otherlv_1= '(' ( (lv_declaredParam_2_0= ruleFullJvmFormalParameter ) ) otherlv_3= ')' ( (lv_expression_4_0= ruleXExpression ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6523:1: ( ( ( 'catch' )=>otherlv_0= 'catch' ) otherlv_1= '(' ( (lv_declaredParam_2_0= ruleFullJvmFormalParameter ) ) otherlv_3= ')' ( (lv_expression_4_0= ruleXExpression ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6523:2: ( ( 'catch' )=>otherlv_0= 'catch' ) otherlv_1= '(' ( (lv_declaredParam_2_0= ruleFullJvmFormalParameter ) ) otherlv_3= ')' ( (lv_expression_4_0= ruleXExpression ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6523:2: ( ( 'catch' )=>otherlv_0= 'catch' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6523:3: ( 'catch' )=>otherlv_0= 'catch'
            {
            otherlv_0=(Token)match(input,94,FOLLOW_94_in_ruleXCatchClause15295); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getXCatchClauseAccess().getCatchKeyword_0());
                  
            }

            }

            otherlv_1=(Token)match(input,25,FOLLOW_25_in_ruleXCatchClause15308); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getXCatchClauseAccess().getLeftParenthesisKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6532:1: ( (lv_declaredParam_2_0= ruleFullJvmFormalParameter ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6533:1: (lv_declaredParam_2_0= ruleFullJvmFormalParameter )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6533:1: (lv_declaredParam_2_0= ruleFullJvmFormalParameter )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6534:3: lv_declaredParam_2_0= ruleFullJvmFormalParameter
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXCatchClauseAccess().getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleFullJvmFormalParameter_in_ruleXCatchClause15329);
            lv_declaredParam_2_0=ruleFullJvmFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXCatchClauseRule());
              	        }
                     		set(
                     			current, 
                     			"declaredParam",
                      		lv_declaredParam_2_0, 
                      		"FullJvmFormalParameter");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            otherlv_3=(Token)match(input,27,FOLLOW_27_in_ruleXCatchClause15341); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_3, grammarAccess.getXCatchClauseAccess().getRightParenthesisKeyword_3());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6554:1: ( (lv_expression_4_0= ruleXExpression ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6555:1: (lv_expression_4_0= ruleXExpression )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6555:1: (lv_expression_4_0= ruleXExpression )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6556:3: lv_expression_4_0= ruleXExpression
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXCatchClauseAccess().getExpressionXExpressionParserRuleCall_4_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleXExpression_in_ruleXCatchClause15362);
            lv_expression_4_0=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXCatchClauseRule());
              	        }
                     		set(
                     			current, 
                     			"expression",
                      		lv_expression_4_0, 
                      		"XExpression");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXCatchClause"


    // $ANTLR start "entryRuleQualifiedName"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6580:1: entryRuleQualifiedName returns [String current=null] : iv_ruleQualifiedName= ruleQualifiedName EOF ;
    public final String entryRuleQualifiedName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleQualifiedName = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6581:2: (iv_ruleQualifiedName= ruleQualifiedName EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6582:2: iv_ruleQualifiedName= ruleQualifiedName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQualifiedNameRule()); 
            }
            pushFollow(FOLLOW_ruleQualifiedName_in_entryRuleQualifiedName15399);
            iv_ruleQualifiedName=ruleQualifiedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQualifiedName.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleQualifiedName15410); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQualifiedName"


    // $ANTLR start "ruleQualifiedName"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6589:1: ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ValidID_0= ruleValidID ( ( ( '.' )=>kw= '.' ) this_ValidID_2= ruleValidID )* ) ;
    public final AntlrDatatypeRuleToken ruleQualifiedName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_ValidID_0 = null;

        AntlrDatatypeRuleToken this_ValidID_2 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6592:28: ( (this_ValidID_0= ruleValidID ( ( ( '.' )=>kw= '.' ) this_ValidID_2= ruleValidID )* ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6593:1: (this_ValidID_0= ruleValidID ( ( ( '.' )=>kw= '.' ) this_ValidID_2= ruleValidID )* )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6593:1: (this_ValidID_0= ruleValidID ( ( ( '.' )=>kw= '.' ) this_ValidID_2= ruleValidID )* )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6594:5: this_ValidID_0= ruleValidID ( ( ( '.' )=>kw= '.' ) this_ValidID_2= ruleValidID )*
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleValidID_in_ruleQualifiedName15457);
            this_ValidID_0=ruleValidID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_ValidID_0);
                  
            }
            if ( state.backtracking==0 ) {
               
                      afterParserOrEnumRuleCall();
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6604:1: ( ( ( '.' )=>kw= '.' ) this_ValidID_2= ruleValidID )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==21) ) {
                    int LA115_2 = input.LA(2);

                    if ( (LA115_2==RULE_ID) ) {
                        int LA115_3 = input.LA(3);

                        if ( (synpred44_InternalAqua()) ) {
                            alt115=1;
                        }


                    }


                }


                switch (alt115) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6604:2: ( ( '.' )=>kw= '.' ) this_ValidID_2= ruleValidID
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6604:2: ( ( '.' )=>kw= '.' )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6604:3: ( '.' )=>kw= '.'
            	    {
            	    kw=(Token)match(input,21,FOLLOW_21_in_ruleQualifiedName15485); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	              current.merge(kw);
            	              newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
            	          
            	    }

            	    }

            	    if ( state.backtracking==0 ) {
            	       
            	              newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruleValidID_in_ruleQualifiedName15508);
            	    this_ValidID_2=ruleValidID();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      		current.merge(this_ValidID_2);
            	          
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	              afterParserOrEnumRuleCall();
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQualifiedName"


    // $ANTLR start "entryRuleNumber"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6631:1: entryRuleNumber returns [String current=null] : iv_ruleNumber= ruleNumber EOF ;
    public final String entryRuleNumber() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumber = null;


         
        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        	
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6635:2: (iv_ruleNumber= ruleNumber EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6636:2: iv_ruleNumber= ruleNumber EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumberRule()); 
            }
            pushFollow(FOLLOW_ruleNumber_in_entryRuleNumber15562);
            iv_ruleNumber=ruleNumber();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumber.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNumber15573); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6646:1: ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= '.' (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) ) ;
    public final AntlrDatatypeRuleToken ruleNumber() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_HEX_0=null;
        Token this_INT_1=null;
        Token this_DECIMAL_2=null;
        Token kw=null;
        Token this_INT_4=null;
        Token this_DECIMAL_5=null;

         enterRule(); 
        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6650:28: ( (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= '.' (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6651:1: (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= '.' (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6651:1: (this_HEX_0= RULE_HEX | ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= '.' (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? ) )
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==RULE_HEX) ) {
                alt119=1;
            }
            else if ( ((LA119_0>=RULE_INT && LA119_0<=RULE_DECIMAL)) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6651:6: this_HEX_0= RULE_HEX
                    {
                    this_HEX_0=(Token)match(input,RULE_HEX,FOLLOW_RULE_HEX_in_ruleNumber15617); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      		current.merge(this_HEX_0);
                          
                    }
                    if ( state.backtracking==0 ) {
                       
                          newLeafNode(this_HEX_0, grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6659:6: ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= '.' (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6659:6: ( (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= '.' (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )? )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6659:7: (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL ) (kw= '.' (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )?
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6659:7: (this_INT_1= RULE_INT | this_DECIMAL_2= RULE_DECIMAL )
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==RULE_INT) ) {
                        alt116=1;
                    }
                    else if ( (LA116_0==RULE_DECIMAL) ) {
                        alt116=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 116, 0, input);

                        throw nvae;
                    }
                    switch (alt116) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6659:12: this_INT_1= RULE_INT
                            {
                            this_INT_1=(Token)match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleNumber15645); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              		current.merge(this_INT_1);
                                  
                            }
                            if ( state.backtracking==0 ) {
                               
                                  newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6667:10: this_DECIMAL_2= RULE_DECIMAL
                            {
                            this_DECIMAL_2=(Token)match(input,RULE_DECIMAL,FOLLOW_RULE_DECIMAL_in_ruleNumber15671); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              		current.merge(this_DECIMAL_2);
                                  
                            }
                            if ( state.backtracking==0 ) {
                               
                                  newLeafNode(this_DECIMAL_2, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
                                  
                            }

                            }
                            break;

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6674:2: (kw= '.' (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL ) )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==21) ) {
                        int LA118_1 = input.LA(2);

                        if ( ((LA118_1>=RULE_INT && LA118_1<=RULE_DECIMAL)) ) {
                            alt118=1;
                        }
                    }
                    switch (alt118) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6675:2: kw= '.' (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL )
                            {
                            kw=(Token)match(input,21,FOLLOW_21_in_ruleNumber15691); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      current.merge(kw);
                                      newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
                                  
                            }
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6680:1: (this_INT_4= RULE_INT | this_DECIMAL_5= RULE_DECIMAL )
                            int alt117=2;
                            int LA117_0 = input.LA(1);

                            if ( (LA117_0==RULE_INT) ) {
                                alt117=1;
                            }
                            else if ( (LA117_0==RULE_DECIMAL) ) {
                                alt117=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 117, 0, input);

                                throw nvae;
                            }
                            switch (alt117) {
                                case 1 :
                                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6680:6: this_INT_4= RULE_INT
                                    {
                                    this_INT_4=(Token)match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleNumber15707); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      		current.merge(this_INT_4);
                                          
                                    }
                                    if ( state.backtracking==0 ) {
                                       
                                          newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
                                          
                                    }

                                    }
                                    break;
                                case 2 :
                                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6688:10: this_DECIMAL_5= RULE_DECIMAL
                                    {
                                    this_DECIMAL_5=(Token)match(input,RULE_DECIMAL,FOLLOW_RULE_DECIMAL_in_ruleNumber15733); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      		current.merge(this_DECIMAL_5);
                                          
                                    }
                                    if ( state.backtracking==0 ) {
                                       
                                          newLeafNode(this_DECIMAL_5, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
                                          
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {

            	myHiddenTokenState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleJvmTypeReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6708:1: entryRuleJvmTypeReference returns [EObject current=null] : iv_ruleJvmTypeReference= ruleJvmTypeReference EOF ;
    public final EObject entryRuleJvmTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmTypeReference = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6709:2: (iv_ruleJvmTypeReference= ruleJvmTypeReference EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6710:2: iv_ruleJvmTypeReference= ruleJvmTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_entryRuleJvmTypeReference15788);
            iv_ruleJvmTypeReference=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmTypeReference; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmTypeReference15798); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmTypeReference"


    // $ANTLR start "ruleJvmTypeReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6717:1: ruleJvmTypeReference returns [EObject current=null] : ( (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* ) | this_XFunctionTypeRef_3= ruleXFunctionTypeRef ) ;
    public final EObject ruleJvmTypeReference() throws RecognitionException {
        EObject current = null;

        EObject this_JvmParameterizedTypeReference_0 = null;

        EObject this_XFunctionTypeRef_3 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6720:28: ( ( (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* ) | this_XFunctionTypeRef_3= ruleXFunctionTypeRef ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6721:1: ( (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* ) | this_XFunctionTypeRef_3= ruleXFunctionTypeRef )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6721:1: ( (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* ) | this_XFunctionTypeRef_3= ruleXFunctionTypeRef )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==RULE_ID) ) {
                alt121=1;
            }
            else if ( (LA121_0==25||LA121_0==33) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6721:2: (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6721:2: (this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )* )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6722:5: this_JvmParameterizedTypeReference_0= ruleJvmParameterizedTypeReference ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )*
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleJvmParameterizedTypeReference_in_ruleJvmTypeReference15846);
                    this_JvmParameterizedTypeReference_0=ruleJvmParameterizedTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_JvmParameterizedTypeReference_0; 
                              afterParserOrEnumRuleCall();
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6730:1: ( ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets ) )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==67) ) {
                            int LA120_2 = input.LA(2);

                            if ( (LA120_2==68) ) {
                                int LA120_3 = input.LA(3);

                                if ( (synpred45_InternalAqua()) ) {
                                    alt120=1;
                                }


                            }


                        }


                        switch (alt120) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6730:2: ( ( () ruleArrayBrackets ) )=> ( () ruleArrayBrackets )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6731:24: ( () ruleArrayBrackets )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6731:25: () ruleArrayBrackets
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6731:25: ()
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6732:5: 
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	              current = forceCreateModelElementAndSet(
                    	                  grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),
                    	                  current);
                    	          
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {
                    	       
                    	              newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getArrayBracketsParserRuleCall_0_1_0_1()); 
                    	          
                    	    }
                    	    pushFollow(FOLLOW_ruleArrayBrackets_in_ruleJvmTypeReference15882);
                    	    ruleArrayBrackets();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	       
                    	              afterParserOrEnumRuleCall();
                    	          
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6747:5: this_XFunctionTypeRef_3= ruleXFunctionTypeRef
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleXFunctionTypeRef_in_ruleJvmTypeReference15913);
                    this_XFunctionTypeRef_3=ruleXFunctionTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_XFunctionTypeRef_3; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmTypeReference"


    // $ANTLR start "entryRuleArrayBrackets"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6763:1: entryRuleArrayBrackets returns [String current=null] : iv_ruleArrayBrackets= ruleArrayBrackets EOF ;
    public final String entryRuleArrayBrackets() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleArrayBrackets = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6764:2: (iv_ruleArrayBrackets= ruleArrayBrackets EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6765:2: iv_ruleArrayBrackets= ruleArrayBrackets EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayBracketsRule()); 
            }
            pushFollow(FOLLOW_ruleArrayBrackets_in_entryRuleArrayBrackets15949);
            iv_ruleArrayBrackets=ruleArrayBrackets();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayBrackets.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleArrayBrackets15960); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleArrayBrackets"


    // $ANTLR start "ruleArrayBrackets"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6772:1: ruleArrayBrackets returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '[' kw= ']' ) ;
    public final AntlrDatatypeRuleToken ruleArrayBrackets() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6775:28: ( (kw= '[' kw= ']' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6776:1: (kw= '[' kw= ']' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6776:1: (kw= '[' kw= ']' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6777:2: kw= '[' kw= ']'
            {
            kw=(Token)match(input,67,FOLLOW_67_in_ruleArrayBrackets15998); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                      current.merge(kw);
                      newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getLeftSquareBracketKeyword_0()); 
                  
            }
            kw=(Token)match(input,68,FOLLOW_68_in_ruleArrayBrackets16011); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                      current.merge(kw);
                      newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getRightSquareBracketKeyword_1()); 
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleArrayBrackets"


    // $ANTLR start "entryRuleXFunctionTypeRef"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6796:1: entryRuleXFunctionTypeRef returns [EObject current=null] : iv_ruleXFunctionTypeRef= ruleXFunctionTypeRef EOF ;
    public final EObject entryRuleXFunctionTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXFunctionTypeRef = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6797:2: (iv_ruleXFunctionTypeRef= ruleXFunctionTypeRef EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6798:2: iv_ruleXFunctionTypeRef= ruleXFunctionTypeRef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXFunctionTypeRefRule()); 
            }
            pushFollow(FOLLOW_ruleXFunctionTypeRef_in_entryRuleXFunctionTypeRef16051);
            iv_ruleXFunctionTypeRef=ruleXFunctionTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXFunctionTypeRef; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXFunctionTypeRef16061); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXFunctionTypeRef"


    // $ANTLR start "ruleXFunctionTypeRef"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6805:1: ruleXFunctionTypeRef returns [EObject current=null] : ( (otherlv_0= '(' ( ( (lv_paramTypes_1_0= ruleJvmTypeReference ) ) (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )* )? otherlv_4= ')' )? otherlv_5= '=>' ( (lv_returnType_6_0= ruleJvmTypeReference ) ) ) ;
    public final EObject ruleXFunctionTypeRef() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_paramTypes_1_0 = null;

        EObject lv_paramTypes_3_0 = null;

        EObject lv_returnType_6_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6808:28: ( ( (otherlv_0= '(' ( ( (lv_paramTypes_1_0= ruleJvmTypeReference ) ) (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )* )? otherlv_4= ')' )? otherlv_5= '=>' ( (lv_returnType_6_0= ruleJvmTypeReference ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6809:1: ( (otherlv_0= '(' ( ( (lv_paramTypes_1_0= ruleJvmTypeReference ) ) (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )* )? otherlv_4= ')' )? otherlv_5= '=>' ( (lv_returnType_6_0= ruleJvmTypeReference ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6809:1: ( (otherlv_0= '(' ( ( (lv_paramTypes_1_0= ruleJvmTypeReference ) ) (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )* )? otherlv_4= ')' )? otherlv_5= '=>' ( (lv_returnType_6_0= ruleJvmTypeReference ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6809:2: (otherlv_0= '(' ( ( (lv_paramTypes_1_0= ruleJvmTypeReference ) ) (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )* )? otherlv_4= ')' )? otherlv_5= '=>' ( (lv_returnType_6_0= ruleJvmTypeReference ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6809:2: (otherlv_0= '(' ( ( (lv_paramTypes_1_0= ruleJvmTypeReference ) ) (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )* )? otherlv_4= ')' )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==25) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6809:4: otherlv_0= '(' ( ( (lv_paramTypes_1_0= ruleJvmTypeReference ) ) (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )* )? otherlv_4= ')'
                    {
                    otherlv_0=(Token)match(input,25,FOLLOW_25_in_ruleXFunctionTypeRef16099); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_0, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6813:1: ( ( (lv_paramTypes_1_0= ruleJvmTypeReference ) ) (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )* )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==RULE_ID||LA123_0==25||LA123_0==33) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6813:2: ( (lv_paramTypes_1_0= ruleJvmTypeReference ) ) (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )*
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6813:2: ( (lv_paramTypes_1_0= ruleJvmTypeReference ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6814:1: (lv_paramTypes_1_0= ruleJvmTypeReference )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6814:1: (lv_paramTypes_1_0= ruleJvmTypeReference )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6815:3: lv_paramTypes_1_0= ruleJvmTypeReference
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleXFunctionTypeRef16121);
                            lv_paramTypes_1_0=ruleJvmTypeReference();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
                              	        }
                                     		add(
                                     			current, 
                                     			"paramTypes",
                                      		lv_paramTypes_1_0, 
                                      		"JvmTypeReference");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }

                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6831:2: (otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) ) )*
                            loop122:
                            do {
                                int alt122=2;
                                int LA122_0 = input.LA(1);

                                if ( (LA122_0==26) ) {
                                    alt122=1;
                                }


                                switch (alt122) {
                            	case 1 :
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6831:4: otherlv_2= ',' ( (lv_paramTypes_3_0= ruleJvmTypeReference ) )
                            	    {
                            	    otherlv_2=(Token)match(input,26,FOLLOW_26_in_ruleXFunctionTypeRef16134); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	          	newLeafNode(otherlv_2, grammarAccess.getXFunctionTypeRefAccess().getCommaKeyword_0_1_1_0());
                            	          
                            	    }
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6835:1: ( (lv_paramTypes_3_0= ruleJvmTypeReference ) )
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6836:1: (lv_paramTypes_3_0= ruleJvmTypeReference )
                            	    {
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6836:1: (lv_paramTypes_3_0= ruleJvmTypeReference )
                            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6837:3: lv_paramTypes_3_0= ruleJvmTypeReference
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	       
                            	      	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
                            	      	    
                            	    }
                            	    pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleXFunctionTypeRef16155);
                            	    lv_paramTypes_3_0=ruleJvmTypeReference();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      	        if (current==null) {
                            	      	            current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
                            	      	        }
                            	             		add(
                            	             			current, 
                            	             			"paramTypes",
                            	              		lv_paramTypes_3_0, 
                            	              		"JvmTypeReference");
                            	      	        afterParserOrEnumRuleCall();
                            	      	    
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop122;
                                }
                            } while (true);


                            }
                            break;

                    }

                    otherlv_4=(Token)match(input,27,FOLLOW_27_in_ruleXFunctionTypeRef16171); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_4, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2());
                          
                    }

                    }
                    break;

            }

            otherlv_5=(Token)match(input,33,FOLLOW_33_in_ruleXFunctionTypeRef16185); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_5, grammarAccess.getXFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6861:1: ( (lv_returnType_6_0= ruleJvmTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6862:1: (lv_returnType_6_0= ruleJvmTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6862:1: (lv_returnType_6_0= ruleJvmTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6863:3: lv_returnType_6_0= ruleJvmTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleXFunctionTypeRef16206);
            lv_returnType_6_0=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
              	        }
                     		set(
                     			current, 
                     			"returnType",
                      		lv_returnType_6_0, 
                      		"JvmTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXFunctionTypeRef"


    // $ANTLR start "entryRuleJvmParameterizedTypeReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6887:1: entryRuleJvmParameterizedTypeReference returns [EObject current=null] : iv_ruleJvmParameterizedTypeReference= ruleJvmParameterizedTypeReference EOF ;
    public final EObject entryRuleJvmParameterizedTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmParameterizedTypeReference = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6888:2: (iv_ruleJvmParameterizedTypeReference= ruleJvmParameterizedTypeReference EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6889:2: iv_ruleJvmParameterizedTypeReference= ruleJvmParameterizedTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_ruleJvmParameterizedTypeReference_in_entryRuleJvmParameterizedTypeReference16242);
            iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmParameterizedTypeReference; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmParameterizedTypeReference16252); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmParameterizedTypeReference"


    // $ANTLR start "ruleJvmParameterizedTypeReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6896:1: ruleJvmParameterizedTypeReference returns [EObject current=null] : ( ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_1= '<' ) ( (lv_arguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' ( ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )? )* )? ) ;
    public final EObject ruleJvmParameterizedTypeReference() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        EObject lv_arguments_2_0 = null;

        EObject lv_arguments_4_0 = null;

        EObject lv_arguments_10_0 = null;

        EObject lv_arguments_12_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6899:28: ( ( ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_1= '<' ) ( (lv_arguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' ( ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )? )* )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6900:1: ( ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_1= '<' ) ( (lv_arguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' ( ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )? )* )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6900:1: ( ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_1= '<' ) ( (lv_arguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' ( ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )? )* )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6900:2: ( ( ruleQualifiedName ) ) ( ( ( '<' )=>otherlv_1= '<' ) ( (lv_arguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' ( ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )? )* )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6900:2: ( ( ruleQualifiedName ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6901:1: ( ruleQualifiedName )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6901:1: ( ruleQualifiedName )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6902:3: ruleQualifiedName
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              	            current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
              	        }
                      
            }
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleQualifiedName_in_ruleJvmParameterizedTypeReference16300);
            ruleQualifiedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6915:2: ( ( ( '<' )=>otherlv_1= '<' ) ( (lv_arguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' ( ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )? )* )?
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6915:3: ( ( '<' )=>otherlv_1= '<' ) ( (lv_arguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' ( ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )? )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6915:3: ( ( '<' )=>otherlv_1= '<' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6915:4: ( '<' )=>otherlv_1= '<'
                    {
                    otherlv_1=(Token)match(input,34,FOLLOW_34_in_ruleJvmParameterizedTypeReference16321); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_1, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0());
                          
                    }

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6920:2: ( (lv_arguments_2_0= ruleJvmArgumentTypeReference ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6921:1: (lv_arguments_2_0= ruleJvmArgumentTypeReference )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6921:1: (lv_arguments_2_0= ruleJvmArgumentTypeReference )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6922:3: lv_arguments_2_0= ruleJvmArgumentTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleJvmParameterizedTypeReference16343);
                    lv_arguments_2_0=ruleJvmArgumentTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
                      	        }
                             		add(
                             			current, 
                             			"arguments",
                              		lv_arguments_2_0, 
                              		"JvmArgumentTypeReference");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6938:2: (otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) ) )*
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);

                        if ( (LA125_0==26) ) {
                            alt125=1;
                        }


                        switch (alt125) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6938:4: otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) )
                    	    {
                    	    otherlv_3=(Token)match(input,26,FOLLOW_26_in_ruleJvmParameterizedTypeReference16356); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_3, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0());
                    	          
                    	    }
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6942:1: ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6943:1: (lv_arguments_4_0= ruleJvmArgumentTypeReference )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6943:1: (lv_arguments_4_0= ruleJvmArgumentTypeReference )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6944:3: lv_arguments_4_0= ruleJvmArgumentTypeReference
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleJvmParameterizedTypeReference16377);
                    	    lv_arguments_4_0=ruleJvmArgumentTypeReference();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"arguments",
                    	              		lv_arguments_4_0, 
                    	              		"JvmArgumentTypeReference");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop125;
                        }
                    } while (true);

                    otherlv_5=(Token)match(input,31,FOLLOW_31_in_ruleJvmParameterizedTypeReference16391); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_5, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3());
                          
                    }
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6964:1: ( ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )? )*
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==21) ) {
                            int LA128_2 = input.LA(2);

                            if ( (LA128_2==RULE_ID) ) {
                                int LA128_3 = input.LA(3);

                                if ( (synpred47_InternalAqua()) ) {
                                    alt128=1;
                                }


                            }


                        }


                        switch (alt128) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6964:2: ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )?
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6964:2: ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6964:3: ( ( () '.' ) )=> ( () otherlv_7= '.' )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6966:5: ( () otherlv_7= '.' )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6966:6: () otherlv_7= '.'
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6966:6: ()
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6967:5: 
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	              current = forceCreateModelElementAndSet(
                    	                  grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0(),
                    	                  current);
                    	          
                    	    }

                    	    }

                    	    otherlv_7=(Token)match(input,21,FOLLOW_21_in_ruleJvmParameterizedTypeReference16427); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	          	newLeafNode(otherlv_7, grammarAccess.getJvmParameterizedTypeReferenceAccess().getFullStopKeyword_1_4_0_0_1());
                    	          
                    	    }

                    	    }


                    	    }

                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6976:3: ( ( ruleValidID ) )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6977:1: ( ruleValidID )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6977:1: ( ruleValidID )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6978:3: ruleValidID
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      			if (current==null) {
                    	      	            current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
                    	      	        }
                    	              
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_1_4_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleValidID_in_ruleJvmParameterizedTypeReference16452);
                    	    ruleValidID();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }

                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6991:2: ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )?
                    	    int alt127=2;
                    	    alt127 = dfa127.predict(input);
                    	    switch (alt127) {
                    	        case 1 :
                    	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6991:3: ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>'
                    	            {
                    	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6991:3: ( ( '<' )=>otherlv_9= '<' )
                    	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6991:4: ( '<' )=>otherlv_9= '<'
                    	            {
                    	            otherlv_9=(Token)match(input,34,FOLLOW_34_in_ruleJvmParameterizedTypeReference16473); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	                  	newLeafNode(otherlv_9, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_4_2_0());
                    	                  
                    	            }

                    	            }

                    	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6996:2: ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) )
                    	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6997:1: (lv_arguments_10_0= ruleJvmArgumentTypeReference )
                    	            {
                    	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6997:1: (lv_arguments_10_0= ruleJvmArgumentTypeReference )
                    	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6998:3: lv_arguments_10_0= ruleJvmArgumentTypeReference
                    	            {
                    	            if ( state.backtracking==0 ) {
                    	               
                    	              	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0()); 
                    	              	    
                    	            }
                    	            pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleJvmParameterizedTypeReference16495);
                    	            lv_arguments_10_0=ruleJvmArgumentTypeReference();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              	        if (current==null) {
                    	              	            current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
                    	              	        }
                    	                     		add(
                    	                     			current, 
                    	                     			"arguments",
                    	                      		lv_arguments_10_0, 
                    	                      		"JvmArgumentTypeReference");
                    	              	        afterParserOrEnumRuleCall();
                    	              	    
                    	            }

                    	            }


                    	            }

                    	            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7014:2: (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )*
                    	            loop126:
                    	            do {
                    	                int alt126=2;
                    	                int LA126_0 = input.LA(1);

                    	                if ( (LA126_0==26) ) {
                    	                    alt126=1;
                    	                }


                    	                switch (alt126) {
                    	            	case 1 :
                    	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7014:4: otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) )
                    	            	    {
                    	            	    otherlv_11=(Token)match(input,26,FOLLOW_26_in_ruleJvmParameterizedTypeReference16508); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	          	newLeafNode(otherlv_11, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_4_2_2_0());
                    	            	          
                    	            	    }
                    	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7018:1: ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) )
                    	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7019:1: (lv_arguments_12_0= ruleJvmArgumentTypeReference )
                    	            	    {
                    	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7019:1: (lv_arguments_12_0= ruleJvmArgumentTypeReference )
                    	            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7020:3: lv_arguments_12_0= ruleJvmArgumentTypeReference
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {
                    	            	       
                    	            	      	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0()); 
                    	            	      	    
                    	            	    }
                    	            	    pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_ruleJvmParameterizedTypeReference16529);
                    	            	    lv_arguments_12_0=ruleJvmArgumentTypeReference();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      	        if (current==null) {
                    	            	      	            current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
                    	            	      	        }
                    	            	             		add(
                    	            	             			current, 
                    	            	             			"arguments",
                    	            	              		lv_arguments_12_0, 
                    	            	              		"JvmArgumentTypeReference");
                    	            	      	        afterParserOrEnumRuleCall();
                    	            	      	    
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop126;
                    	                }
                    	            } while (true);

                    	            otherlv_13=(Token)match(input,31,FOLLOW_31_in_ruleJvmParameterizedTypeReference16543); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	                  	newLeafNode(otherlv_13, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_4_2_3());
                    	                  
                    	            }

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmParameterizedTypeReference"


    // $ANTLR start "entryRuleJvmArgumentTypeReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7048:1: entryRuleJvmArgumentTypeReference returns [EObject current=null] : iv_ruleJvmArgumentTypeReference= ruleJvmArgumentTypeReference EOF ;
    public final EObject entryRuleJvmArgumentTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmArgumentTypeReference = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7049:2: (iv_ruleJvmArgumentTypeReference= ruleJvmArgumentTypeReference EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7050:2: iv_ruleJvmArgumentTypeReference= ruleJvmArgumentTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_ruleJvmArgumentTypeReference_in_entryRuleJvmArgumentTypeReference16585);
            iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmArgumentTypeReference; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmArgumentTypeReference16595); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmArgumentTypeReference"


    // $ANTLR start "ruleJvmArgumentTypeReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7057:1: ruleJvmArgumentTypeReference returns [EObject current=null] : (this_JvmTypeReference_0= ruleJvmTypeReference | this_JvmWildcardTypeReference_1= ruleJvmWildcardTypeReference ) ;
    public final EObject ruleJvmArgumentTypeReference() throws RecognitionException {
        EObject current = null;

        EObject this_JvmTypeReference_0 = null;

        EObject this_JvmWildcardTypeReference_1 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7060:28: ( (this_JvmTypeReference_0= ruleJvmTypeReference | this_JvmWildcardTypeReference_1= ruleJvmWildcardTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7061:1: (this_JvmTypeReference_0= ruleJvmTypeReference | this_JvmWildcardTypeReference_1= ruleJvmWildcardTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7061:1: (this_JvmTypeReference_0= ruleJvmTypeReference | this_JvmWildcardTypeReference_1= ruleJvmWildcardTypeReference )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==RULE_ID||LA130_0==25||LA130_0==33) ) {
                alt130=1;
            }
            else if ( (LA130_0==95) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7062:5: this_JvmTypeReference_0= ruleJvmTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
                          
                    }
                    pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleJvmArgumentTypeReference16642);
                    this_JvmTypeReference_0=ruleJvmTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_JvmTypeReference_0; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7072:5: this_JvmWildcardTypeReference_1= ruleJvmWildcardTypeReference
                    {
                    if ( state.backtracking==0 ) {
                       
                              newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); 
                          
                    }
                    pushFollow(FOLLOW_ruleJvmWildcardTypeReference_in_ruleJvmArgumentTypeReference16669);
                    this_JvmWildcardTypeReference_1=ruleJvmWildcardTypeReference();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                              current = this_JvmWildcardTypeReference_1; 
                              afterParserOrEnumRuleCall();
                          
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmArgumentTypeReference"


    // $ANTLR start "entryRuleJvmWildcardTypeReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7088:1: entryRuleJvmWildcardTypeReference returns [EObject current=null] : iv_ruleJvmWildcardTypeReference= ruleJvmWildcardTypeReference EOF ;
    public final EObject entryRuleJvmWildcardTypeReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmWildcardTypeReference = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7089:2: (iv_ruleJvmWildcardTypeReference= ruleJvmWildcardTypeReference EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7090:2: iv_ruleJvmWildcardTypeReference= ruleJvmWildcardTypeReference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceRule()); 
            }
            pushFollow(FOLLOW_ruleJvmWildcardTypeReference_in_entryRuleJvmWildcardTypeReference16704);
            iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmWildcardTypeReference; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmWildcardTypeReference16714); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmWildcardTypeReference"


    // $ANTLR start "ruleJvmWildcardTypeReference"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7097:1: ruleJvmWildcardTypeReference returns [EObject current=null] : ( () otherlv_1= '?' ( ( ( (lv_constraints_2_0= ruleJvmUpperBound ) ) ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )* ) | ( ( (lv_constraints_4_0= ruleJvmLowerBound ) ) ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )* ) )? ) ;
    public final EObject ruleJvmWildcardTypeReference() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_constraints_2_0 = null;

        EObject lv_constraints_3_0 = null;

        EObject lv_constraints_4_0 = null;

        EObject lv_constraints_5_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7100:28: ( ( () otherlv_1= '?' ( ( ( (lv_constraints_2_0= ruleJvmUpperBound ) ) ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )* ) | ( ( (lv_constraints_4_0= ruleJvmLowerBound ) ) ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )* ) )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7101:1: ( () otherlv_1= '?' ( ( ( (lv_constraints_2_0= ruleJvmUpperBound ) ) ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )* ) | ( ( (lv_constraints_4_0= ruleJvmLowerBound ) ) ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )* ) )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7101:1: ( () otherlv_1= '?' ( ( ( (lv_constraints_2_0= ruleJvmUpperBound ) ) ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )* ) | ( ( (lv_constraints_4_0= ruleJvmLowerBound ) ) ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )* ) )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7101:2: () otherlv_1= '?' ( ( ( (lv_constraints_2_0= ruleJvmUpperBound ) ) ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )* ) | ( ( (lv_constraints_4_0= ruleJvmLowerBound ) ) ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )* ) )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7101:2: ()
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7102:5: 
            {
            if ( state.backtracking==0 ) {

                      current = forceCreateModelElement(
                          grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0(),
                          current);
                  
            }

            }

            otherlv_1=(Token)match(input,95,FOLLOW_95_in_ruleJvmWildcardTypeReference16760); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_1, grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7111:1: ( ( ( (lv_constraints_2_0= ruleJvmUpperBound ) ) ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )* ) | ( ( (lv_constraints_4_0= ruleJvmLowerBound ) ) ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )* ) )?
            int alt133=3;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==38) ) {
                alt133=1;
            }
            else if ( (LA133_0==84) ) {
                alt133=2;
            }
            switch (alt133) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7111:2: ( ( (lv_constraints_2_0= ruleJvmUpperBound ) ) ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )* )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7111:2: ( ( (lv_constraints_2_0= ruleJvmUpperBound ) ) ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )* )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7111:3: ( (lv_constraints_2_0= ruleJvmUpperBound ) ) ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7111:3: ( (lv_constraints_2_0= ruleJvmUpperBound ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7112:1: (lv_constraints_2_0= ruleJvmUpperBound )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7112:1: (lv_constraints_2_0= ruleJvmUpperBound )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7113:3: lv_constraints_2_0= ruleJvmUpperBound
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmUpperBound_in_ruleJvmWildcardTypeReference16783);
                    lv_constraints_2_0=ruleJvmUpperBound();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
                      	        }
                             		add(
                             			current, 
                             			"constraints",
                              		lv_constraints_2_0, 
                              		"JvmUpperBound");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7129:2: ( (lv_constraints_3_0= ruleJvmUpperBoundAnded ) )*
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( (LA131_0==96) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7130:1: (lv_constraints_3_0= ruleJvmUpperBoundAnded )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7130:1: (lv_constraints_3_0= ruleJvmUpperBoundAnded )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7131:3: lv_constraints_3_0= ruleJvmUpperBoundAnded
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_2_0_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleJvmUpperBoundAnded_in_ruleJvmWildcardTypeReference16804);
                    	    lv_constraints_3_0=ruleJvmUpperBoundAnded();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"constraints",
                    	              		lv_constraints_3_0, 
                    	              		"JvmUpperBoundAnded");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop131;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7148:6: ( ( (lv_constraints_4_0= ruleJvmLowerBound ) ) ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )* )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7148:6: ( ( (lv_constraints_4_0= ruleJvmLowerBound ) ) ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )* )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7148:7: ( (lv_constraints_4_0= ruleJvmLowerBound ) ) ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7148:7: ( (lv_constraints_4_0= ruleJvmLowerBound ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7149:1: (lv_constraints_4_0= ruleJvmLowerBound )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7149:1: (lv_constraints_4_0= ruleJvmLowerBound )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7150:3: lv_constraints_4_0= ruleJvmLowerBound
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmLowerBound_in_ruleJvmWildcardTypeReference16834);
                    lv_constraints_4_0=ruleJvmLowerBound();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
                      	        }
                             		add(
                             			current, 
                             			"constraints",
                              		lv_constraints_4_0, 
                              		"JvmLowerBound");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7166:2: ( (lv_constraints_5_0= ruleJvmLowerBoundAnded ) )*
                    loop132:
                    do {
                        int alt132=2;
                        int LA132_0 = input.LA(1);

                        if ( (LA132_0==96) ) {
                            alt132=1;
                        }


                        switch (alt132) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7167:1: (lv_constraints_5_0= ruleJvmLowerBoundAnded )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7167:1: (lv_constraints_5_0= ruleJvmLowerBoundAnded )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7168:3: lv_constraints_5_0= ruleJvmLowerBoundAnded
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundAndedParserRuleCall_2_1_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleJvmLowerBoundAnded_in_ruleJvmWildcardTypeReference16855);
                    	    lv_constraints_5_0=ruleJvmLowerBoundAnded();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"constraints",
                    	              		lv_constraints_5_0, 
                    	              		"JvmLowerBoundAnded");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmWildcardTypeReference"


    // $ANTLR start "entryRuleJvmUpperBound"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7192:1: entryRuleJvmUpperBound returns [EObject current=null] : iv_ruleJvmUpperBound= ruleJvmUpperBound EOF ;
    public final EObject entryRuleJvmUpperBound() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmUpperBound = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7193:2: (iv_ruleJvmUpperBound= ruleJvmUpperBound EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7194:2: iv_ruleJvmUpperBound= ruleJvmUpperBound EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmUpperBoundRule()); 
            }
            pushFollow(FOLLOW_ruleJvmUpperBound_in_entryRuleJvmUpperBound16895);
            iv_ruleJvmUpperBound=ruleJvmUpperBound();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmUpperBound; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmUpperBound16905); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmUpperBound"


    // $ANTLR start "ruleJvmUpperBound"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7201:1: ruleJvmUpperBound returns [EObject current=null] : (otherlv_0= 'extends' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) ) ;
    public final EObject ruleJvmUpperBound() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_typeReference_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7204:28: ( (otherlv_0= 'extends' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7205:1: (otherlv_0= 'extends' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7205:1: (otherlv_0= 'extends' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7205:3: otherlv_0= 'extends' ( (lv_typeReference_1_0= ruleJvmTypeReference ) )
            {
            otherlv_0=(Token)match(input,38,FOLLOW_38_in_ruleJvmUpperBound16942); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7209:1: ( (lv_typeReference_1_0= ruleJvmTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7210:1: (lv_typeReference_1_0= ruleJvmTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7210:1: (lv_typeReference_1_0= ruleJvmTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7211:3: lv_typeReference_1_0= ruleJvmTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleJvmUpperBound16963);
            lv_typeReference_1_0=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getJvmUpperBoundRule());
              	        }
                     		set(
                     			current, 
                     			"typeReference",
                      		lv_typeReference_1_0, 
                      		"JvmTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmUpperBound"


    // $ANTLR start "entryRuleJvmUpperBoundAnded"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7235:1: entryRuleJvmUpperBoundAnded returns [EObject current=null] : iv_ruleJvmUpperBoundAnded= ruleJvmUpperBoundAnded EOF ;
    public final EObject entryRuleJvmUpperBoundAnded() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmUpperBoundAnded = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7236:2: (iv_ruleJvmUpperBoundAnded= ruleJvmUpperBoundAnded EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7237:2: iv_ruleJvmUpperBoundAnded= ruleJvmUpperBoundAnded EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmUpperBoundAndedRule()); 
            }
            pushFollow(FOLLOW_ruleJvmUpperBoundAnded_in_entryRuleJvmUpperBoundAnded16999);
            iv_ruleJvmUpperBoundAnded=ruleJvmUpperBoundAnded();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmUpperBoundAnded; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmUpperBoundAnded17009); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmUpperBoundAnded"


    // $ANTLR start "ruleJvmUpperBoundAnded"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7244:1: ruleJvmUpperBoundAnded returns [EObject current=null] : (otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) ) ;
    public final EObject ruleJvmUpperBoundAnded() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_typeReference_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7247:28: ( (otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7248:1: (otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7248:1: (otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7248:3: otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) )
            {
            otherlv_0=(Token)match(input,96,FOLLOW_96_in_ruleJvmUpperBoundAnded17046); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAndedAccess().getAmpersandKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7252:1: ( (lv_typeReference_1_0= ruleJvmTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7253:1: (lv_typeReference_1_0= ruleJvmTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7253:1: (lv_typeReference_1_0= ruleJvmTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7254:3: lv_typeReference_1_0= ruleJvmTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleJvmUpperBoundAnded17067);
            lv_typeReference_1_0=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getJvmUpperBoundAndedRule());
              	        }
                     		set(
                     			current, 
                     			"typeReference",
                      		lv_typeReference_1_0, 
                      		"JvmTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmUpperBoundAnded"


    // $ANTLR start "entryRuleJvmLowerBound"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7278:1: entryRuleJvmLowerBound returns [EObject current=null] : iv_ruleJvmLowerBound= ruleJvmLowerBound EOF ;
    public final EObject entryRuleJvmLowerBound() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmLowerBound = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7279:2: (iv_ruleJvmLowerBound= ruleJvmLowerBound EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7280:2: iv_ruleJvmLowerBound= ruleJvmLowerBound EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmLowerBoundRule()); 
            }
            pushFollow(FOLLOW_ruleJvmLowerBound_in_entryRuleJvmLowerBound17103);
            iv_ruleJvmLowerBound=ruleJvmLowerBound();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmLowerBound; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmLowerBound17113); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmLowerBound"


    // $ANTLR start "ruleJvmLowerBound"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7287:1: ruleJvmLowerBound returns [EObject current=null] : (otherlv_0= 'super' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) ) ;
    public final EObject ruleJvmLowerBound() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_typeReference_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7290:28: ( (otherlv_0= 'super' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7291:1: (otherlv_0= 'super' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7291:1: (otherlv_0= 'super' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7291:3: otherlv_0= 'super' ( (lv_typeReference_1_0= ruleJvmTypeReference ) )
            {
            otherlv_0=(Token)match(input,84,FOLLOW_84_in_ruleJvmLowerBound17150); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7295:1: ( (lv_typeReference_1_0= ruleJvmTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7296:1: (lv_typeReference_1_0= ruleJvmTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7296:1: (lv_typeReference_1_0= ruleJvmTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7297:3: lv_typeReference_1_0= ruleJvmTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleJvmLowerBound17171);
            lv_typeReference_1_0=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getJvmLowerBoundRule());
              	        }
                     		set(
                     			current, 
                     			"typeReference",
                      		lv_typeReference_1_0, 
                      		"JvmTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmLowerBound"


    // $ANTLR start "entryRuleJvmLowerBoundAnded"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7321:1: entryRuleJvmLowerBoundAnded returns [EObject current=null] : iv_ruleJvmLowerBoundAnded= ruleJvmLowerBoundAnded EOF ;
    public final EObject entryRuleJvmLowerBoundAnded() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmLowerBoundAnded = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7322:2: (iv_ruleJvmLowerBoundAnded= ruleJvmLowerBoundAnded EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7323:2: iv_ruleJvmLowerBoundAnded= ruleJvmLowerBoundAnded EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmLowerBoundAndedRule()); 
            }
            pushFollow(FOLLOW_ruleJvmLowerBoundAnded_in_entryRuleJvmLowerBoundAnded17207);
            iv_ruleJvmLowerBoundAnded=ruleJvmLowerBoundAnded();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmLowerBoundAnded; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmLowerBoundAnded17217); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmLowerBoundAnded"


    // $ANTLR start "ruleJvmLowerBoundAnded"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7330:1: ruleJvmLowerBoundAnded returns [EObject current=null] : (otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) ) ;
    public final EObject ruleJvmLowerBoundAnded() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_typeReference_1_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7333:28: ( (otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7334:1: (otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7334:1: (otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7334:3: otherlv_0= '&' ( (lv_typeReference_1_0= ruleJvmTypeReference ) )
            {
            otherlv_0=(Token)match(input,96,FOLLOW_96_in_ruleJvmLowerBoundAnded17254); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAndedAccess().getAmpersandKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7338:1: ( (lv_typeReference_1_0= ruleJvmTypeReference ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7339:1: (lv_typeReference_1_0= ruleJvmTypeReference )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7339:1: (lv_typeReference_1_0= ruleJvmTypeReference )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7340:3: lv_typeReference_1_0= ruleJvmTypeReference
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleJvmTypeReference_in_ruleJvmLowerBoundAnded17275);
            lv_typeReference_1_0=ruleJvmTypeReference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getJvmLowerBoundAndedRule());
              	        }
                     		set(
                     			current, 
                     			"typeReference",
                      		lv_typeReference_1_0, 
                      		"JvmTypeReference");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmLowerBoundAnded"


    // $ANTLR start "entryRuleJvmTypeParameter"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7364:1: entryRuleJvmTypeParameter returns [EObject current=null] : iv_ruleJvmTypeParameter= ruleJvmTypeParameter EOF ;
    public final EObject entryRuleJvmTypeParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJvmTypeParameter = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7365:2: (iv_ruleJvmTypeParameter= ruleJvmTypeParameter EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7366:2: iv_ruleJvmTypeParameter= ruleJvmTypeParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJvmTypeParameterRule()); 
            }
            pushFollow(FOLLOW_ruleJvmTypeParameter_in_entryRuleJvmTypeParameter17311);
            iv_ruleJvmTypeParameter=ruleJvmTypeParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJvmTypeParameter; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJvmTypeParameter17321); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJvmTypeParameter"


    // $ANTLR start "ruleJvmTypeParameter"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7373:1: ruleJvmTypeParameter returns [EObject current=null] : ( ( (lv_name_0_0= ruleValidID ) ) ( ( (lv_constraints_1_0= ruleJvmUpperBound ) ) ( (lv_constraints_2_0= ruleJvmUpperBoundAnded ) )* )? ) ;
    public final EObject ruleJvmTypeParameter() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject lv_constraints_1_0 = null;

        EObject lv_constraints_2_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7376:28: ( ( ( (lv_name_0_0= ruleValidID ) ) ( ( (lv_constraints_1_0= ruleJvmUpperBound ) ) ( (lv_constraints_2_0= ruleJvmUpperBoundAnded ) )* )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7377:1: ( ( (lv_name_0_0= ruleValidID ) ) ( ( (lv_constraints_1_0= ruleJvmUpperBound ) ) ( (lv_constraints_2_0= ruleJvmUpperBoundAnded ) )* )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7377:1: ( ( (lv_name_0_0= ruleValidID ) ) ( ( (lv_constraints_1_0= ruleJvmUpperBound ) ) ( (lv_constraints_2_0= ruleJvmUpperBoundAnded ) )* )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7377:2: ( (lv_name_0_0= ruleValidID ) ) ( ( (lv_constraints_1_0= ruleJvmUpperBound ) ) ( (lv_constraints_2_0= ruleJvmUpperBoundAnded ) )* )?
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7377:2: ( (lv_name_0_0= ruleValidID ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7378:1: (lv_name_0_0= ruleValidID )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7378:1: (lv_name_0_0= ruleValidID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7379:3: lv_name_0_0= ruleValidID
            {
            if ( state.backtracking==0 ) {
               
              	        newCompositeNode(grammarAccess.getJvmTypeParameterAccess().getNameValidIDParserRuleCall_0_0()); 
              	    
            }
            pushFollow(FOLLOW_ruleValidID_in_ruleJvmTypeParameter17367);
            lv_name_0_0=ruleValidID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              	        if (current==null) {
              	            current = createModelElementForParent(grammarAccess.getJvmTypeParameterRule());
              	        }
                     		set(
                     			current, 
                     			"name",
                      		lv_name_0_0, 
                      		"ValidID");
              	        afterParserOrEnumRuleCall();
              	    
            }

            }


            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7395:2: ( ( (lv_constraints_1_0= ruleJvmUpperBound ) ) ( (lv_constraints_2_0= ruleJvmUpperBoundAnded ) )* )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==38) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7395:3: ( (lv_constraints_1_0= ruleJvmUpperBound ) ) ( (lv_constraints_2_0= ruleJvmUpperBoundAnded ) )*
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7395:3: ( (lv_constraints_1_0= ruleJvmUpperBound ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7396:1: (lv_constraints_1_0= ruleJvmUpperBound )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7396:1: (lv_constraints_1_0= ruleJvmUpperBound )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7397:3: lv_constraints_1_0= ruleJvmUpperBound
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getJvmTypeParameterAccess().getConstraintsJvmUpperBoundParserRuleCall_1_0_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleJvmUpperBound_in_ruleJvmTypeParameter17389);
                    lv_constraints_1_0=ruleJvmUpperBound();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getJvmTypeParameterRule());
                      	        }
                             		add(
                             			current, 
                             			"constraints",
                              		lv_constraints_1_0, 
                              		"JvmUpperBound");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7413:2: ( (lv_constraints_2_0= ruleJvmUpperBoundAnded ) )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==96) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7414:1: (lv_constraints_2_0= ruleJvmUpperBoundAnded )
                    	    {
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7414:1: (lv_constraints_2_0= ruleJvmUpperBoundAnded )
                    	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7415:3: lv_constraints_2_0= ruleJvmUpperBoundAnded
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	       
                    	      	        newCompositeNode(grammarAccess.getJvmTypeParameterAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_1_1_0()); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleJvmUpperBoundAnded_in_ruleJvmTypeParameter17410);
                    	    lv_constraints_2_0=ruleJvmUpperBoundAnded();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = createModelElementForParent(grammarAccess.getJvmTypeParameterRule());
                    	      	        }
                    	             		add(
                    	             			current, 
                    	             			"constraints",
                    	              		lv_constraints_2_0, 
                    	              		"JvmUpperBoundAnded");
                    	      	        afterParserOrEnumRuleCall();
                    	      	    
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJvmTypeParameter"


    // $ANTLR start "entryRuleQualifiedNameWithWildcard"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7439:1: entryRuleQualifiedNameWithWildcard returns [String current=null] : iv_ruleQualifiedNameWithWildcard= ruleQualifiedNameWithWildcard EOF ;
    public final String entryRuleQualifiedNameWithWildcard() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleQualifiedNameWithWildcard = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7440:2: (iv_ruleQualifiedNameWithWildcard= ruleQualifiedNameWithWildcard EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7441:2: iv_ruleQualifiedNameWithWildcard= ruleQualifiedNameWithWildcard EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); 
            }
            pushFollow(FOLLOW_ruleQualifiedNameWithWildcard_in_entryRuleQualifiedNameWithWildcard17450);
            iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQualifiedNameWithWildcard.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleQualifiedNameWithWildcard17461); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQualifiedNameWithWildcard"


    // $ANTLR start "ruleQualifiedNameWithWildcard"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7448:1: ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_QualifiedName_0= ruleQualifiedName kw= '.' kw= '*' ) ;
    public final AntlrDatatypeRuleToken ruleQualifiedNameWithWildcard() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_QualifiedName_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7451:28: ( (this_QualifiedName_0= ruleQualifiedName kw= '.' kw= '*' ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7452:1: (this_QualifiedName_0= ruleQualifiedName kw= '.' kw= '*' )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7452:1: (this_QualifiedName_0= ruleQualifiedName kw= '.' kw= '*' )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7453:5: this_QualifiedName_0= ruleQualifiedName kw= '.' kw= '*'
            {
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_ruleQualifiedName_in_ruleQualifiedNameWithWildcard17508);
            this_QualifiedName_0=ruleQualifiedName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_QualifiedName_0);
                  
            }
            if ( state.backtracking==0 ) {
               
                      afterParserOrEnumRuleCall();
                  
            }
            kw=(Token)match(input,21,FOLLOW_21_in_ruleQualifiedNameWithWildcard17526); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                      current.merge(kw);
                      newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1()); 
                  
            }
            kw=(Token)match(input,56,FOLLOW_56_in_ruleQualifiedNameWithWildcard17539); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                      current.merge(kw);
                      newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_2()); 
                  
            }

            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQualifiedNameWithWildcard"


    // $ANTLR start "entryRuleValidID"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7483:1: entryRuleValidID returns [String current=null] : iv_ruleValidID= ruleValidID EOF ;
    public final String entryRuleValidID() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleValidID = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7484:2: (iv_ruleValidID= ruleValidID EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7485:2: iv_ruleValidID= ruleValidID EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getValidIDRule()); 
            }
            pushFollow(FOLLOW_ruleValidID_in_entryRuleValidID17580);
            iv_ruleValidID=ruleValidID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleValidID.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleValidID17591); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleValidID"


    // $ANTLR start "ruleValidID"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7492:1: ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_ID_0= RULE_ID ;
    public final AntlrDatatypeRuleToken ruleValidID() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;

         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7495:28: (this_ID_0= RULE_ID )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7496:5: this_ID_0= RULE_ID
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleValidID17630); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_ID_0);
                  
            }
            if ( state.backtracking==0 ) {
               
                  newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
                  
            }

            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleValidID"


    // $ANTLR start "entryRuleXImportSection"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7511:1: entryRuleXImportSection returns [EObject current=null] : iv_ruleXImportSection= ruleXImportSection EOF ;
    public final EObject entryRuleXImportSection() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXImportSection = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7512:2: (iv_ruleXImportSection= ruleXImportSection EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7513:2: iv_ruleXImportSection= ruleXImportSection EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXImportSectionRule()); 
            }
            pushFollow(FOLLOW_ruleXImportSection_in_entryRuleXImportSection17674);
            iv_ruleXImportSection=ruleXImportSection();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXImportSection; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXImportSection17684); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXImportSection"


    // $ANTLR start "ruleXImportSection"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7520:1: ruleXImportSection returns [EObject current=null] : ( (lv_importDeclarations_0_0= ruleXImportDeclaration ) )+ ;
    public final EObject ruleXImportSection() throws RecognitionException {
        EObject current = null;

        EObject lv_importDeclarations_0_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7523:28: ( ( (lv_importDeclarations_0_0= ruleXImportDeclaration ) )+ )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7524:1: ( (lv_importDeclarations_0_0= ruleXImportDeclaration ) )+
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7524:1: ( (lv_importDeclarations_0_0= ruleXImportDeclaration ) )+
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==82) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7525:1: (lv_importDeclarations_0_0= ruleXImportDeclaration )
            	    {
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7525:1: (lv_importDeclarations_0_0= ruleXImportDeclaration )
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7526:3: lv_importDeclarations_0_0= ruleXImportDeclaration
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getXImportSectionAccess().getImportDeclarationsXImportDeclarationParserRuleCall_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleXImportDeclaration_in_ruleXImportSection17729);
            	    lv_importDeclarations_0_0=ruleXImportDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getXImportSectionRule());
            	      	        }
            	             		add(
            	             			current, 
            	             			"importDeclarations",
            	              		lv_importDeclarations_0_0, 
            	              		"XImportDeclaration");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXImportSection"


    // $ANTLR start "entryRuleXImportDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7550:1: entryRuleXImportDeclaration returns [EObject current=null] : iv_ruleXImportDeclaration= ruleXImportDeclaration EOF ;
    public final EObject entryRuleXImportDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXImportDeclaration = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7551:2: (iv_ruleXImportDeclaration= ruleXImportDeclaration EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7552:2: iv_ruleXImportDeclaration= ruleXImportDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXImportDeclarationRule()); 
            }
            pushFollow(FOLLOW_ruleXImportDeclaration_in_entryRuleXImportDeclaration17765);
            iv_ruleXImportDeclaration=ruleXImportDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXImportDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleXImportDeclaration17775); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXImportDeclaration"


    // $ANTLR start "ruleXImportDeclaration"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7559:1: ruleXImportDeclaration returns [EObject current=null] : (otherlv_0= 'import' ( ( ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) ) ) | ( ( ruleQualifiedName ) ) | ( (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard ) ) ) (otherlv_8= ';' )? ) ;
    public final EObject ruleXImportDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_static_1_0=null;
        Token lv_extension_2_0=null;
        Token lv_wildcard_4_0=null;
        Token otherlv_8=null;
        AntlrDatatypeRuleToken lv_memberName_5_0 = null;

        AntlrDatatypeRuleToken lv_importedNamespace_7_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7562:28: ( (otherlv_0= 'import' ( ( ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) ) ) | ( ( ruleQualifiedName ) ) | ( (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard ) ) ) (otherlv_8= ';' )? ) )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7563:1: (otherlv_0= 'import' ( ( ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) ) ) | ( ( ruleQualifiedName ) ) | ( (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard ) ) ) (otherlv_8= ';' )? )
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7563:1: (otherlv_0= 'import' ( ( ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) ) ) | ( ( ruleQualifiedName ) ) | ( (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard ) ) ) (otherlv_8= ';' )? )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7563:3: otherlv_0= 'import' ( ( ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) ) ) | ( ( ruleQualifiedName ) ) | ( (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard ) ) ) (otherlv_8= ';' )?
            {
            otherlv_0=(Token)match(input,82,FOLLOW_82_in_ruleXImportDeclaration17812); if (state.failed) return current;
            if ( state.backtracking==0 ) {

                  	newLeafNode(otherlv_0, grammarAccess.getXImportDeclarationAccess().getImportKeyword_0());
                  
            }
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7567:1: ( ( ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) ) ) | ( ( ruleQualifiedName ) ) | ( (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard ) ) )
            int alt139=3;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7567:2: ( ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7567:2: ( ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7567:3: ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7567:3: ( (lv_static_1_0= 'static' ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7568:1: (lv_static_1_0= 'static' )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7568:1: (lv_static_1_0= 'static' )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7569:3: lv_static_1_0= 'static'
                    {
                    lv_static_1_0=(Token)match(input,81,FOLLOW_81_in_ruleXImportDeclaration17832); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              newLeafNode(lv_static_1_0, grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0());
                          
                    }
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElement(grammarAccess.getXImportDeclarationRule());
                      	        }
                             		setWithLastConsumed(current, "static", true, "static");
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7582:2: ( (lv_extension_2_0= 'extension' ) )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==83) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7583:1: (lv_extension_2_0= 'extension' )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7583:1: (lv_extension_2_0= 'extension' )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7584:3: lv_extension_2_0= 'extension'
                            {
                            lv_extension_2_0=(Token)match(input,83,FOLLOW_83_in_ruleXImportDeclaration17863); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      newLeafNode(lv_extension_2_0, grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0());
                                  
                            }
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElement(grammarAccess.getXImportDeclarationRule());
                              	        }
                                     		setWithLastConsumed(current, "extension", true, "extension");
                              	    
                            }

                            }


                            }
                            break;

                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7597:3: ( ( ruleQualifiedNameInStaticImport ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7598:1: ( ruleQualifiedNameInStaticImport )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7598:1: ( ruleQualifiedNameInStaticImport )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7599:3: ruleQualifiedNameInStaticImport
                    {
                    if ( state.backtracking==0 ) {

                      			if (current==null) {
                      	            current = createModelElement(grammarAccess.getXImportDeclarationRule());
                      	        }
                              
                    }
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleQualifiedNameInStaticImport_in_ruleXImportDeclaration17900);
                    ruleQualifiedNameInStaticImport();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }

                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7612:2: ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) )
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==56) ) {
                        alt138=1;
                    }
                    else if ( (LA138_0==RULE_ID) ) {
                        alt138=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 138, 0, input);

                        throw nvae;
                    }
                    switch (alt138) {
                        case 1 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7612:3: ( (lv_wildcard_4_0= '*' ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7612:3: ( (lv_wildcard_4_0= '*' ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7613:1: (lv_wildcard_4_0= '*' )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7613:1: (lv_wildcard_4_0= '*' )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7614:3: lv_wildcard_4_0= '*'
                            {
                            lv_wildcard_4_0=(Token)match(input,56,FOLLOW_56_in_ruleXImportDeclaration17919); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                                      newLeafNode(lv_wildcard_4_0, grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0());
                                  
                            }
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElement(grammarAccess.getXImportDeclarationRule());
                              	        }
                                     		setWithLastConsumed(current, "wildcard", true, "*");
                              	    
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7628:6: ( (lv_memberName_5_0= ruleValidID ) )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7628:6: ( (lv_memberName_5_0= ruleValidID ) )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7629:1: (lv_memberName_5_0= ruleValidID )
                            {
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7629:1: (lv_memberName_5_0= ruleValidID )
                            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7630:3: lv_memberName_5_0= ruleValidID
                            {
                            if ( state.backtracking==0 ) {
                               
                              	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getMemberNameValidIDParserRuleCall_1_0_3_1_0()); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleValidID_in_ruleXImportDeclaration17959);
                            lv_memberName_5_0=ruleValidID();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              	        if (current==null) {
                              	            current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
                              	        }
                                     		set(
                                     			current, 
                                     			"memberName",
                                      		lv_memberName_5_0, 
                                      		"ValidID");
                              	        afterParserOrEnumRuleCall();
                              	    
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7647:6: ( ( ruleQualifiedName ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7647:6: ( ( ruleQualifiedName ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7648:1: ( ruleQualifiedName )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7648:1: ( ruleQualifiedName )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7649:3: ruleQualifiedName
                    {
                    if ( state.backtracking==0 ) {

                      			if (current==null) {
                      	            current = createModelElement(grammarAccess.getXImportDeclarationRule());
                      	        }
                              
                    }
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_1_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleQualifiedName_in_ruleXImportDeclaration17990);
                    ruleQualifiedName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                       
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7663:6: ( (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard ) )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7663:6: ( (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard ) )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7664:1: (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard )
                    {
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7664:1: (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard )
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7665:3: lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard
                    {
                    if ( state.backtracking==0 ) {
                       
                      	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0()); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleQualifiedNameWithWildcard_in_ruleXImportDeclaration18017);
                    lv_importedNamespace_7_0=ruleQualifiedNameWithWildcard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      	        if (current==null) {
                      	            current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
                      	        }
                             		set(
                             			current, 
                             			"importedNamespace",
                              		lv_importedNamespace_7_0, 
                              		"QualifiedNameWithWildcard");
                      	        afterParserOrEnumRuleCall();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }

            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7681:3: (otherlv_8= ';' )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==70) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7681:5: otherlv_8= ';'
                    {
                    otherlv_8=(Token)match(input,70,FOLLOW_70_in_ruleXImportDeclaration18031); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                          	newLeafNode(otherlv_8, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
                          
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXImportDeclaration"


    // $ANTLR start "entryRuleQualifiedNameInStaticImport"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7693:1: entryRuleQualifiedNameInStaticImport returns [String current=null] : iv_ruleQualifiedNameInStaticImport= ruleQualifiedNameInStaticImport EOF ;
    public final String entryRuleQualifiedNameInStaticImport() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleQualifiedNameInStaticImport = null;


        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7694:2: (iv_ruleQualifiedNameInStaticImport= ruleQualifiedNameInStaticImport EOF )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7695:2: iv_ruleQualifiedNameInStaticImport= ruleQualifiedNameInStaticImport EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQualifiedNameInStaticImportRule()); 
            }
            pushFollow(FOLLOW_ruleQualifiedNameInStaticImport_in_entryRuleQualifiedNameInStaticImport18070);
            iv_ruleQualifiedNameInStaticImport=ruleQualifiedNameInStaticImport();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQualifiedNameInStaticImport.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleQualifiedNameInStaticImport18081); if (state.failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQualifiedNameInStaticImport"


    // $ANTLR start "ruleQualifiedNameInStaticImport"
    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7702:1: ruleQualifiedNameInStaticImport returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ValidID_0= ruleValidID kw= '.' )+ ;
    public final AntlrDatatypeRuleToken ruleQualifiedNameInStaticImport() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_ValidID_0 = null;


         enterRule(); 
            
        try {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7705:28: ( (this_ValidID_0= ruleValidID kw= '.' )+ )
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7706:1: (this_ValidID_0= ruleValidID kw= '.' )+
            {
            // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7706:1: (this_ValidID_0= ruleValidID kw= '.' )+
            int cnt141=0;
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( (LA141_0==RULE_ID) ) {
                    int LA141_2 = input.LA(2);

                    if ( (LA141_2==21) ) {
                        alt141=1;
                    }


                }


                switch (alt141) {
            	case 1 :
            	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:7707:5: this_ValidID_0= ruleValidID kw= '.'
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	              newCompositeNode(grammarAccess.getQualifiedNameInStaticImportAccess().getValidIDParserRuleCall_0()); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruleValidID_in_ruleQualifiedNameInStaticImport18128);
            	    this_ValidID_0=ruleValidID();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      		current.merge(this_ValidID_0);
            	          
            	    }
            	    if ( state.backtracking==0 ) {
            	       
            	              afterParserOrEnumRuleCall();
            	          
            	    }
            	    kw=(Token)match(input,21,FOLLOW_21_in_ruleQualifiedNameInStaticImport18146); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	              current.merge(kw);
            	              newLeafNode(kw, grammarAccess.getQualifiedNameInStaticImportAccess().getFullStopKeyword_1()); 
            	          
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt141 >= 1 ) break loop141;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(141, input);
                        throw eee;
                }
                cnt141++;
            } while (true);


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQualifiedNameInStaticImport"

    // $ANTLR start synpred1_InternalAqua
    public final void synpred1_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:788:7: ( ( () '[' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:788:8: ( () '[' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:788:8: ( () '[' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:788:9: () '['
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:788:9: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:789:1: 
        {
        }

        match(input,67,FOLLOW_67_in_synpred1_InternalAqua1806); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred1_InternalAqua

    // $ANTLR start synpred2_InternalAqua
    public final void synpred2_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1358:2: ( ( () '->' ( ( ruleLocalOutputPort ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1358:3: ( () '->' ( ( ruleLocalOutputPort ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1358:3: ( () '->' ( ( ruleLocalOutputPort ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1358:4: () '->' ( ( ruleLocalOutputPort ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1358:4: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1359:1: 
        {
        }

        match(input,20,FOLLOW_20_in_synpred2_InternalAqua3049); if (state.failed) return ;
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1360:1: ( ( ruleLocalOutputPort ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1361:1: ( ruleLocalOutputPort )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1361:1: ( ruleLocalOutputPort )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1362:1: ruleLocalOutputPort
        {
        pushFollow(FOLLOW_ruleLocalOutputPort_in_synpred2_InternalAqua3056);
        ruleLocalOutputPort();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred2_InternalAqua

    // $ANTLR start synpred3_InternalAqua
    public final void synpred3_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1453:3: ( ( '>' '>' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1453:4: ( '>' '>' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1453:4: ( '>' '>' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1454:2: '>' '>'
        {
        match(input,31,FOLLOW_31_in_synpred3_InternalAqua3294); if (state.failed) return ;
        match(input,31,FOLLOW_31_in_synpred3_InternalAqua3299); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred3_InternalAqua

    // $ANTLR start synpred4_InternalAqua
    public final void synpred4_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1483:3: ( ( '<' '<' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1483:4: ( '<' '<' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1483:4: ( '<' '<' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1484:2: '<' '<'
        {
        match(input,34,FOLLOW_34_in_synpred4_InternalAqua3381); if (state.failed) return ;
        match(input,34,FOLLOW_34_in_synpred4_InternalAqua3386); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred4_InternalAqua

    // $ANTLR start synpred5_InternalAqua
    public final void synpred5_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1907:3: ( ( () ( ( ruleOpMultiAssign ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1907:4: ( () ( ( ruleOpMultiAssign ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1907:4: ( () ( ( ruleOpMultiAssign ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1907:5: () ( ( ruleOpMultiAssign ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1907:5: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1908:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1908:2: ( ( ruleOpMultiAssign ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1909:1: ( ruleOpMultiAssign )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1909:1: ( ruleOpMultiAssign )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:1910:3: ruleOpMultiAssign
        {
        pushFollow(FOLLOW_ruleOpMultiAssign_in_synpred5_InternalAqua4297);
        ruleOpMultiAssign();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred5_InternalAqua

    // $ANTLR start synpred6_InternalAqua
    public final void synpred6_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2101:3: ( ( () ( ( ruleOpOr ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2101:4: ( () ( ( ruleOpOr ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2101:4: ( () ( ( ruleOpOr ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2101:5: () ( ( ruleOpOr ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2101:5: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2102:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2102:2: ( ( ruleOpOr ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2103:1: ( ruleOpOr )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2103:1: ( ruleOpOr )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2104:3: ruleOpOr
        {
        pushFollow(FOLLOW_ruleOpOr_in_synpred6_InternalAqua4820);
        ruleOpOr();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred6_InternalAqua

    // $ANTLR start synpred7_InternalAqua
    public final void synpred7_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2202:3: ( ( () ( ( ruleOpAnd ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2202:4: ( () ( ( ruleOpAnd ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2202:4: ( () ( ( ruleOpAnd ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2202:5: () ( ( ruleOpAnd ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2202:5: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2203:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2203:2: ( ( ruleOpAnd ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2204:1: ( ruleOpAnd )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2204:1: ( ruleOpAnd )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2205:3: ruleOpAnd
        {
        pushFollow(FOLLOW_ruleOpAnd_in_synpred7_InternalAqua5079);
        ruleOpAnd();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred7_InternalAqua

    // $ANTLR start synpred8_InternalAqua
    public final void synpred8_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2303:3: ( ( () ( ( ruleOpEquality ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2303:4: ( () ( ( ruleOpEquality ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2303:4: ( () ( ( ruleOpEquality ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2303:5: () ( ( ruleOpEquality ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2303:5: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2304:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2304:2: ( ( ruleOpEquality ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2305:1: ( ruleOpEquality )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2305:1: ( ruleOpEquality )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2306:3: ruleOpEquality
        {
        pushFollow(FOLLOW_ruleOpEquality_in_synpred8_InternalAqua5338);
        ruleOpEquality();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred8_InternalAqua

    // $ANTLR start synpred9_InternalAqua
    public final void synpred9_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:4: ( ( () 'instanceof' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:5: ( () 'instanceof' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:5: ( () 'instanceof' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:6: () 'instanceof'
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2425:6: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2426:1: 
        {
        }

        match(input,53,FOLLOW_53_in_synpred9_InternalAqua5652); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred9_InternalAqua

    // $ANTLR start synpred10_InternalAqua
    public final void synpred10_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:8: ( ( () ( ( ruleOpCompare ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:9: ( () ( ( ruleOpCompare ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:9: ( () ( ( ruleOpCompare ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:10: () ( ( ruleOpCompare ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2456:10: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2457:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2457:2: ( ( ruleOpCompare ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2458:1: ( ruleOpCompare )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2458:1: ( ruleOpCompare )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2459:3: ruleOpCompare
        {
        pushFollow(FOLLOW_ruleOpCompare_in_synpred10_InternalAqua5723);
        ruleOpCompare();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred10_InternalAqua

    // $ANTLR start synpred11_InternalAqua
    public final void synpred11_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2584:3: ( ( () ( ( ruleOpOther ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2584:4: ( () ( ( ruleOpOther ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2584:4: ( () ( ( ruleOpOther ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2584:5: () ( ( ruleOpOther ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2584:5: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2585:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2585:2: ( ( ruleOpOther ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2586:1: ( ruleOpOther )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2586:1: ( ruleOpOther )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2587:3: ruleOpOther
        {
        pushFollow(FOLLOW_ruleOpOther_in_synpred11_InternalAqua6057);
        ruleOpOther();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred11_InternalAqua

    // $ANTLR start synpred12_InternalAqua
    public final void synpred12_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2658:3: ( ( () ( ( ruleOpAdd ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2658:4: ( () ( ( ruleOpAdd ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2658:4: ( () ( ( ruleOpAdd ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2658:5: () ( ( ruleOpAdd ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2658:5: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2659:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2659:2: ( ( ruleOpAdd ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2660:1: ( ruleOpAdd )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2660:1: ( ruleOpAdd )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2661:3: ruleOpAdd
        {
        pushFollow(FOLLOW_ruleOpAdd_in_synpred12_InternalAqua6228);
        ruleOpAdd();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred12_InternalAqua

    // $ANTLR start synpred13_InternalAqua
    public final void synpred13_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2766:3: ( ( () ( ( ruleOpMulti ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2766:4: ( () ( ( ruleOpMulti ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2766:4: ( () ( ( ruleOpMulti ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2766:5: () ( ( ruleOpMulti ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2766:5: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2767:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2767:2: ( ( ruleOpMulti ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2768:1: ( ruleOpMulti )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2768:1: ( ruleOpMulti )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2769:3: ruleOpMulti
        {
        pushFollow(FOLLOW_ruleOpMulti_in_synpred13_InternalAqua6508);
        ruleOpMulti();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred13_InternalAqua

    // $ANTLR start synpred14_InternalAqua
    public final void synpred14_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2999:3: ( ( () 'as' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2999:4: ( () 'as' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2999:4: ( () 'as' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2999:5: () 'as'
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:2999:5: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3000:1: 
        {
        }

        match(input,61,FOLLOW_61_in_synpred14_InternalAqua7102); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred14_InternalAqua

    // $ANTLR start synpred15_InternalAqua
    public final void synpred15_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3059:2: ( ( () ( ( ruleOpPostfix ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3059:3: ( () ( ( ruleOpPostfix ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3059:3: ( () ( ( ruleOpPostfix ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3059:4: () ( ( ruleOpPostfix ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3059:4: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3060:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3060:2: ( ( ruleOpPostfix ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3061:1: ( ruleOpPostfix )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3061:1: ( ruleOpPostfix )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3062:3: ruleOpPostfix
        {
        pushFollow(FOLLOW_ruleOpPostfix_in_synpred15_InternalAqua7259);
        ruleOpPostfix();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred15_InternalAqua

    // $ANTLR start synpred16_InternalAqua
    public final void synpred16_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:4: ( ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:5: ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:5: ( () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:6: () ( '.' | ( ( '::' ) ) ) ( ( ruleFeatureCallID ) ) ruleOpSingleAssign
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3149:6: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3150:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3150:2: ( '.' | ( ( '::' ) ) )
        int alt142=2;
        int LA142_0 = input.LA(1);

        if ( (LA142_0==21) ) {
            alt142=1;
        }
        else if ( (LA142_0==64) ) {
            alt142=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 142, 0, input);

            throw nvae;
        }
        switch (alt142) {
            case 1 :
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3150:4: '.'
                {
                match(input,21,FOLLOW_21_in_synpred16_InternalAqua7514); if (state.failed) return ;

                }
                break;
            case 2 :
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3152:6: ( ( '::' ) )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3152:6: ( ( '::' ) )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3153:1: ( '::' )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3153:1: ( '::' )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3154:2: '::'
                {
                match(input,64,FOLLOW_64_in_synpred16_InternalAqua7528); if (state.failed) return ;

                }


                }


                }
                break;

        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3158:3: ( ( ruleFeatureCallID ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3159:1: ( ruleFeatureCallID )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3159:1: ( ruleFeatureCallID )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3160:3: ruleFeatureCallID
        {
        pushFollow(FOLLOW_ruleFeatureCallID_in_synpred16_InternalAqua7544);
        ruleFeatureCallID();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_ruleOpSingleAssign_in_synpred16_InternalAqua7550);
        ruleOpSingleAssign();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred16_InternalAqua

    // $ANTLR start synpred17_InternalAqua
    public final void synpred17_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:8: ( ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:9: ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:9: ( () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:10: () ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3230:10: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3231:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3231:2: ( '.' | ( ( '?.' ) ) | ( ( '::' ) ) )
        int alt143=3;
        switch ( input.LA(1) ) {
        case 21:
            {
            alt143=1;
            }
            break;
        case 65:
            {
            alt143=2;
            }
            break;
        case 64:
            {
            alt143=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 143, 0, input);

            throw nvae;
        }

        switch (alt143) {
            case 1 :
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3231:4: '.'
                {
                match(input,21,FOLLOW_21_in_synpred17_InternalAqua7692); if (state.failed) return ;

                }
                break;
            case 2 :
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3233:6: ( ( '?.' ) )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3233:6: ( ( '?.' ) )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3234:1: ( '?.' )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3234:1: ( '?.' )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3235:2: '?.'
                {
                match(input,65,FOLLOW_65_in_synpred17_InternalAqua7706); if (state.failed) return ;

                }


                }


                }
                break;
            case 3 :
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3240:6: ( ( '::' ) )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3240:6: ( ( '::' ) )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3241:1: ( '::' )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3241:1: ( '::' )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3242:2: '::'
                {
                match(input,64,FOLLOW_64_in_synpred17_InternalAqua7726); if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred17_InternalAqua

    // $ANTLR start synpred18_InternalAqua
    public final void synpred18_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3351:4: ( ( '(' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3352:1: ( '(' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3352:1: ( '(' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3353:2: '('
        {
        match(input,25,FOLLOW_25_in_synpred18_InternalAqua7953); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred18_InternalAqua

    // $ANTLR start synpred19_InternalAqua
    public final void synpred19_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3372:4: ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3372:5: ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3372:5: ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3372:6: () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3372:6: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3373:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3373:2: ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )?
        int alt145=2;
        int LA145_0 = input.LA(1);

        if ( (LA145_0==RULE_ID||LA145_0==25||LA145_0==33) ) {
            alt145=1;
        }
        switch (alt145) {
            case 1 :
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3373:3: ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )*
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3373:3: ( ( ruleJvmFormalParameter ) )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3374:1: ( ruleJvmFormalParameter )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3374:1: ( ruleJvmFormalParameter )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3375:1: ruleJvmFormalParameter
                {
                pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred19_InternalAqua8005);
                ruleJvmFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3377:2: ( ',' ( ( ruleJvmFormalParameter ) ) )*
                loop144:
                do {
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==26) ) {
                        alt144=1;
                    }


                    switch (alt144) {
                	case 1 :
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3377:4: ',' ( ( ruleJvmFormalParameter ) )
                	    {
                	    match(input,26,FOLLOW_26_in_synpred19_InternalAqua8012); if (state.failed) return ;
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3378:1: ( ( ruleJvmFormalParameter ) )
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3379:1: ( ruleJvmFormalParameter )
                	    {
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3379:1: ( ruleJvmFormalParameter )
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3380:1: ruleJvmFormalParameter
                	    {
                	    pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred19_InternalAqua8019);
                	    ruleJvmFormalParameter();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop144;
                    }
                } while (true);


                }
                break;

        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3382:6: ( ( '|' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3383:1: ( '|' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3383:1: ( '|' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3384:2: '|'
        {
        match(input,69,FOLLOW_69_in_synpred19_InternalAqua8033); if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred19_InternalAqua

    // $ANTLR start synpred20_InternalAqua
    public final void synpred20_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3451:4: ( ( () '[' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3451:5: ( () '[' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3451:5: ( () '[' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3451:6: () '['
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3451:6: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3452:1: 
        {
        }

        match(input,67,FOLLOW_67_in_synpred20_InternalAqua8153); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred20_InternalAqua

    // $ANTLR start synpred21_InternalAqua
    public final void synpred21_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3522:7: ( ( () 'synchronized' '(' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3522:8: ( () 'synchronized' '(' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3522:8: ( () 'synchronized' '(' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3522:9: () 'synchronized' '('
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3522:9: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3523:1: 
        {
        }

        match(input,93,FOLLOW_93_in_synpred21_InternalAqua8342); if (state.failed) return ;
        match(input,25,FOLLOW_25_in_synpred21_InternalAqua8346); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred21_InternalAqua

    // $ANTLR start synpred22_InternalAqua
    public final void synpred22_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3565:7: ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3565:8: ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3565:8: ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3565:9: () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':'
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3565:9: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3566:1: 
        {
        }

        match(input,76,FOLLOW_76_in_synpred22_InternalAqua8468); if (state.failed) return ;
        match(input,25,FOLLOW_25_in_synpred22_InternalAqua8472); if (state.failed) return ;
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3568:1: ( ( ruleJvmFormalParameter ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3569:1: ( ruleJvmFormalParameter )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3569:1: ( ruleJvmFormalParameter )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3570:1: ruleJvmFormalParameter
        {
        pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred22_InternalAqua8479);
        ruleJvmFormalParameter();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,22,FOLLOW_22_in_synpred22_InternalAqua8485); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred22_InternalAqua

    // $ANTLR start synpred23_InternalAqua
    public final void synpred23_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3683:7: ( ( () '[' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3683:8: ( () '[' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3683:8: ( () '[' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3683:9: () '['
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3683:9: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3684:1: 
        {
        }

        match(input,67,FOLLOW_67_in_synpred23_InternalAqua8807); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred23_InternalAqua

    // $ANTLR start synpred25_InternalAqua
    public final void synpred25_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3975:4: ( ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3975:5: ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3975:5: ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3975:6: ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3975:6: ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )?
        int alt147=2;
        int LA147_0 = input.LA(1);

        if ( (LA147_0==RULE_ID||LA147_0==25||LA147_0==33) ) {
            alt147=1;
        }
        switch (alt147) {
            case 1 :
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3975:7: ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )*
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3975:7: ( ( ruleJvmFormalParameter ) )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3976:1: ( ruleJvmFormalParameter )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3976:1: ( ruleJvmFormalParameter )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3977:1: ruleJvmFormalParameter
                {
                pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred25_InternalAqua9557);
                ruleJvmFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3979:2: ( ',' ( ( ruleJvmFormalParameter ) ) )*
                loop146:
                do {
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==26) ) {
                        alt146=1;
                    }


                    switch (alt146) {
                	case 1 :
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3979:4: ',' ( ( ruleJvmFormalParameter ) )
                	    {
                	    match(input,26,FOLLOW_26_in_synpred25_InternalAqua9564); if (state.failed) return ;
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3980:1: ( ( ruleJvmFormalParameter ) )
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3981:1: ( ruleJvmFormalParameter )
                	    {
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3981:1: ( ruleJvmFormalParameter )
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3982:1: ruleJvmFormalParameter
                	    {
                	    pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred25_InternalAqua9571);
                	    ruleJvmFormalParameter();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop146;
                    }
                } while (true);


                }
                break;

        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3984:6: ( ( '|' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3985:1: ( '|' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3985:1: ( '|' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:3986:2: '|'
        {
        match(input,69,FOLLOW_69_in_synpred25_InternalAqua9585); if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred25_InternalAqua

    // $ANTLR start synpred27_InternalAqua
    public final void synpred27_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4345:4: ( 'else' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4345:6: 'else'
        {
        match(input,72,FOLLOW_72_in_synpred27_InternalAqua10368); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_InternalAqua

    // $ANTLR start synpred28_InternalAqua
    public final void synpred28_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:4: ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:5: ( '(' ( ( ruleJvmFormalParameter ) ) ':' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:5: ( '(' ( ( ruleJvmFormalParameter ) ) ':' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4399:7: '(' ( ( ruleJvmFormalParameter ) ) ':'
        {
        match(input,25,FOLLOW_25_in_synpred28_InternalAqua10507); if (state.failed) return ;
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4400:1: ( ( ruleJvmFormalParameter ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4401:1: ( ruleJvmFormalParameter )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4401:1: ( ruleJvmFormalParameter )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4402:1: ruleJvmFormalParameter
        {
        pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred28_InternalAqua10514);
        ruleJvmFormalParameter();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,22,FOLLOW_22_in_synpred28_InternalAqua10520); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred28_InternalAqua

    // $ANTLR start synpred29_InternalAqua
    public final void synpred29_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:8: ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:9: ( ( ( ruleJvmFormalParameter ) ) ':' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:9: ( ( ( ruleJvmFormalParameter ) ) ':' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:10: ( ( ruleJvmFormalParameter ) ) ':'
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4454:10: ( ( ruleJvmFormalParameter ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4455:1: ( ruleJvmFormalParameter )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4455:1: ( ruleJvmFormalParameter )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:4456:1: ruleJvmFormalParameter
        {
        pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred29_InternalAqua10622);
        ruleJvmFormalParameter();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,22,FOLLOW_22_in_synpred29_InternalAqua10628); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred29_InternalAqua

    // $ANTLR start synpred31_InternalAqua
    public final void synpred31_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5222:4: ( ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5222:5: ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5222:5: ( ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5222:6: ( ( ruleJvmTypeReference ) ) ( ( ruleValidID ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5222:6: ( ( ruleJvmTypeReference ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5223:1: ( ruleJvmTypeReference )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5223:1: ( ruleJvmTypeReference )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5224:1: ruleJvmTypeReference
        {
        pushFollow(FOLLOW_ruleJvmTypeReference_in_synpred31_InternalAqua12256);
        ruleJvmTypeReference();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5226:2: ( ( ruleValidID ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5227:1: ( ruleValidID )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5227:1: ( ruleValidID )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5228:1: ruleValidID
        {
        pushFollow(FOLLOW_ruleValidID_in_synpred31_InternalAqua12265);
        ruleValidID();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred31_InternalAqua

    // $ANTLR start synpred32_InternalAqua
    public final void synpred32_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5511:4: ( ( '(' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5512:1: ( '(' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5512:1: ( '(' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5513:2: '('
        {
        match(input,25,FOLLOW_25_in_synpred32_InternalAqua12803); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred32_InternalAqua

    // $ANTLR start synpred33_InternalAqua
    public final void synpred33_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5532:4: ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5532:5: ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5532:5: ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5532:6: () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5532:6: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5533:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5533:2: ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )?
        int alt151=2;
        int LA151_0 = input.LA(1);

        if ( (LA151_0==RULE_ID||LA151_0==25||LA151_0==33) ) {
            alt151=1;
        }
        switch (alt151) {
            case 1 :
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5533:3: ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )*
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5533:3: ( ( ruleJvmFormalParameter ) )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5534:1: ( ruleJvmFormalParameter )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5534:1: ( ruleJvmFormalParameter )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5535:1: ruleJvmFormalParameter
                {
                pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred33_InternalAqua12855);
                ruleJvmFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5537:2: ( ',' ( ( ruleJvmFormalParameter ) ) )*
                loop150:
                do {
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==26) ) {
                        alt150=1;
                    }


                    switch (alt150) {
                	case 1 :
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5537:4: ',' ( ( ruleJvmFormalParameter ) )
                	    {
                	    match(input,26,FOLLOW_26_in_synpred33_InternalAqua12862); if (state.failed) return ;
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5538:1: ( ( ruleJvmFormalParameter ) )
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5539:1: ( ruleJvmFormalParameter )
                	    {
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5539:1: ( ruleJvmFormalParameter )
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5540:1: ruleJvmFormalParameter
                	    {
                	    pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred33_InternalAqua12869);
                	    ruleJvmFormalParameter();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop150;
                    }
                } while (true);


                }
                break;

        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5542:6: ( ( '|' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5543:1: ( '|' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5543:1: ( '|' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5544:2: '|'
        {
        match(input,69,FOLLOW_69_in_synpred33_InternalAqua12883); if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred33_InternalAqua

    // $ANTLR start synpred34_InternalAqua
    public final void synpred34_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5611:4: ( ( () '[' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5611:5: ( () '[' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5611:5: ( () '[' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5611:6: () '['
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5611:6: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5612:1: 
        {
        }

        match(input,67,FOLLOW_67_in_synpred34_InternalAqua13003); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred34_InternalAqua

    // $ANTLR start synpred35_InternalAqua
    public final void synpred35_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5776:4: ( '<' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5776:6: '<'
        {
        match(input,34,FOLLOW_34_in_synpred35_InternalAqua13452); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_InternalAqua

    // $ANTLR start synpred36_InternalAqua
    public final void synpred36_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5825:5: ( ( '(' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5826:1: ( '(' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5826:1: ( '(' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5827:2: '('
        {
        match(input,25,FOLLOW_25_in_synpred36_InternalAqua13548); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred36_InternalAqua

    // $ANTLR start synpred37_InternalAqua
    public final void synpred37_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5846:4: ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5846:5: ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5846:5: ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5846:6: () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5846:6: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5847:1: 
        {
        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5847:2: ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )?
        int alt153=2;
        int LA153_0 = input.LA(1);

        if ( (LA153_0==RULE_ID||LA153_0==25||LA153_0==33) ) {
            alt153=1;
        }
        switch (alt153) {
            case 1 :
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5847:3: ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )*
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5847:3: ( ( ruleJvmFormalParameter ) )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5848:1: ( ruleJvmFormalParameter )
                {
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5848:1: ( ruleJvmFormalParameter )
                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5849:1: ruleJvmFormalParameter
                {
                pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred37_InternalAqua13600);
                ruleJvmFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5851:2: ( ',' ( ( ruleJvmFormalParameter ) ) )*
                loop152:
                do {
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==26) ) {
                        alt152=1;
                    }


                    switch (alt152) {
                	case 1 :
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5851:4: ',' ( ( ruleJvmFormalParameter ) )
                	    {
                	    match(input,26,FOLLOW_26_in_synpred37_InternalAqua13607); if (state.failed) return ;
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5852:1: ( ( ruleJvmFormalParameter ) )
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5853:1: ( ruleJvmFormalParameter )
                	    {
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5853:1: ( ruleJvmFormalParameter )
                	    // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5854:1: ruleJvmFormalParameter
                	    {
                	    pushFollow(FOLLOW_ruleJvmFormalParameter_in_synpred37_InternalAqua13614);
                	    ruleJvmFormalParameter();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop152;
                    }
                } while (true);


                }
                break;

        }

        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5856:6: ( ( '|' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5857:1: ( '|' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5857:1: ( '|' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5858:2: '|'
        {
        match(input,69,FOLLOW_69_in_synpred37_InternalAqua13628); if (state.failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred37_InternalAqua

    // $ANTLR start synpred38_InternalAqua
    public final void synpred38_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5925:4: ( ( () '[' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5925:5: ( () '[' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5925:5: ( () '[' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5925:6: () '['
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5925:6: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:5926:1: 
        {
        }

        match(input,67,FOLLOW_67_in_synpred38_InternalAqua13748); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred38_InternalAqua

    // $ANTLR start synpred39_InternalAqua
    public final void synpred39_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6265:2: ( 'extends' | 'static' | 'import' | 'extension' | '!' | '-' | '+' | 'new' | '{' | 'switch' | 'synchronized' | '<' | 'super' | '#' | '[' | 'false' | 'true' | 'null' | 'typeof' | 'if' | 'for' | 'while' | 'do' | 'throw' | 'return' | 'try' | '(' | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:
        {
        if ( (input.LA(1)>=RULE_ID && input.LA(1)<=RULE_DECIMAL)||input.LA(1)==15||(input.LA(1)>=24 && input.LA(1)<=25)||input.LA(1)==34||input.LA(1)==38||(input.LA(1)>=54 && input.LA(1)<=55)||input.LA(1)==60||(input.LA(1)>=66 && input.LA(1)<=67)||input.LA(1)==71||input.LA(1)==73||(input.LA(1)>=76 && input.LA(1)<=78)||(input.LA(1)>=81 && input.LA(1)<=91)||input.LA(1)==93 ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred39_InternalAqua

    // $ANTLR start synpred40_InternalAqua
    public final void synpred40_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6359:5: ( 'catch' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6359:7: 'catch'
        {
        match(input,94,FOLLOW_94_in_synpred40_InternalAqua14921); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_InternalAqua

    // $ANTLR start synpred41_InternalAqua
    public final void synpred41_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6378:5: ( 'finally' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6378:7: 'finally'
        {
        match(input,92,FOLLOW_92_in_synpred41_InternalAqua14951); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_InternalAqua

    // $ANTLR start synpred44_InternalAqua
    public final void synpred44_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6604:3: ( '.' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6605:2: '.'
        {
        match(input,21,FOLLOW_21_in_synpred44_InternalAqua15476); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_InternalAqua

    // $ANTLR start synpred45_InternalAqua
    public final void synpred45_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6730:2: ( ( () ruleArrayBrackets ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6730:3: ( () ruleArrayBrackets )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6730:3: ( () ruleArrayBrackets )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6730:4: () ruleArrayBrackets
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6730:4: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6731:1: 
        {
        }

        pushFollow(FOLLOW_ruleArrayBrackets_in_synpred45_InternalAqua15861);
        ruleArrayBrackets();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred45_InternalAqua

    // $ANTLR start synpred46_InternalAqua
    public final void synpred46_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6915:4: ( '<' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6915:6: '<'
        {
        match(input,34,FOLLOW_34_in_synpred46_InternalAqua16313); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_InternalAqua

    // $ANTLR start synpred47_InternalAqua
    public final void synpred47_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6964:3: ( ( () '.' ) )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6964:4: ( () '.' )
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6964:4: ( () '.' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6964:5: () '.'
        {
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6964:5: ()
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6965:1: 
        {
        }

        match(input,21,FOLLOW_21_in_synpred47_InternalAqua16408); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred47_InternalAqua

    // $ANTLR start synpred48_InternalAqua
    public final void synpred48_InternalAqua_fragment() throws RecognitionException {   
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6991:4: ( '<' )
        // ../de.gammarcraft.aqua/src-gen/de/gammarcraft/aqua/parser/antlr/internal/InternalAqua.g:6991:6: '<'
        {
        match(input,34,FOLLOW_34_in_synpred48_InternalAqua16465); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_InternalAqua

    // Delegated rules

    public final boolean synpred7_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_InternalAqua() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_InternalAqua_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA23 dfa23 = new DFA23(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA139 dfa139 = new DFA139(this);
    static final String DFA23_eotS =
        "\12\uffff";
    static final String DFA23_eofS =
        "\12\uffff";
    static final String DFA23_minS =
        "\1\36\1\uffff\1\37\7\uffff";
    static final String DFA23_maxS =
        "\1\44\1\uffff\1\40\7\uffff";
    static final String DFA23_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\1\4\1\6\1\7\1\10\1\2\1\5";
    static final String DFA23_specialS =
        "\12\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\1\1\2\1\3\1\4\1\5\1\6\1\7",
            "",
            "\1\11\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "1413:1: (kw= '..<' | (kw= '>' kw= '..' ) | kw= '..' | kw= '=>' | (kw= '>' ( ( ( ( '>' '>' ) )=> (kw= '>' kw= '>' ) ) | kw= '>' ) ) | (kw= '<' ( ( ( ( '<' '<' ) )=> (kw= '<' kw= '<' ) ) | kw= '<' | kw= '=>' ) ) | kw= '<>' | kw= '?:' )";
        }
    }
    static final String DFA32_eotS =
        "\12\uffff";
    static final String DFA32_eofS =
        "\1\10\11\uffff";
    static final String DFA32_minS =
        "\1\4\7\0\2\uffff";
    static final String DFA32_maxS =
        "\1\136\7\0\2\uffff";
    static final String DFA32_acceptS =
        "\10\uffff\1\2\1\1";
    static final String DFA32_specialS =
        "\1\uffff\1\2\1\0\1\1\1\3\1\4\1\5\1\6\2\uffff}>";
    static final String[] DFA32_transitionS = {
            "\5\10\6\uffff\2\10\3\uffff\3\10\1\uffff\7\10\1\7\2\10\1\6\2\10\1\uffff\1\10\2\uffff\1\1\1\2\1\3\1\4\1\5\27\10\1\uffff\31\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "1907:1: ( ( ( ( () ( ( ruleOpMultiAssign ) ) ) )=> ( () ( ( ruleOpMultiAssign ) ) ) ) ( (lv_rightOperand_7_0= ruleXAssignment ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_2 = input.LA(1);

                         
                        int index32_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index32_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_3 = input.LA(1);

                         
                        int index32_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index32_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA32_1 = input.LA(1);

                         
                        int index32_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index32_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA32_4 = input.LA(1);

                         
                        int index32_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index32_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA32_6 = input.LA(1);

                         
                        int index32_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index32_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA32_7 = input.LA(1);

                         
                        int index32_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index32_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\12\uffff";
    static final String DFA42_eofS =
        "\1\1\11\uffff";
    static final String DFA42_minS =
        "\1\4\1\uffff\7\0\1\uffff";
    static final String DFA42_maxS =
        "\1\136\1\uffff\7\0\1\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\2\7\uffff\1\1";
    static final String DFA42_specialS =
        "\2\uffff\1\5\1\2\1\0\1\1\1\6\1\4\1\3\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\5\1\6\uffff\2\1\3\uffff\3\1\1\uffff\6\1\1\5\1\3\1\6\1\4\1\2\1\7\1\10\1\uffff\1\1\2\uffff\34\1\1\uffff\31\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "()* loopback of 2584:1: ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_4 = input.LA(1);

                         
                        int index42_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_5 = input.LA(1);

                         
                        int index42_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_3 = input.LA(1);

                         
                        int index42_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_7 = input.LA(1);

                         
                        int index42_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_2 = input.LA(1);

                         
                        int index42_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_6 = input.LA(1);

                         
                        int index42_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalAqua()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA58_eotS =
        "\120\uffff";
    static final String DFA58_eofS =
        "\1\2\117\uffff";
    static final String DFA58_minS =
        "\1\4\1\0\116\uffff";
    static final String DFA58_maxS =
        "\1\136\1\0\116\uffff";
    static final String DFA58_acceptS =
        "\2\uffff\1\2\114\uffff\1\1";
    static final String DFA58_specialS =
        "\1\uffff\1\0\116\uffff}>";
    static final String[] DFA58_transitionS = {
            "\5\2\6\uffff\2\2\3\uffff\3\2\1\uffff\1\2\1\1\13\2\1\uffff\1\2\2\uffff\34\2\1\uffff\31\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "3351:2: ( ( ( ( '(' ) )=> (lv_explicitOperationCall_17_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )? otherlv_22= ')' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_1 = input.LA(1);

                         
                        int index58_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index58_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA57_eotS =
        "\44\uffff";
    static final String DFA57_eofS =
        "\44\uffff";
    static final String DFA57_minS =
        "\1\4\2\0\41\uffff";
    static final String DFA57_maxS =
        "\1\135\2\0\41\uffff";
    static final String DFA57_acceptS =
        "\3\uffff\2\1\1\2\35\uffff\1\3";
    static final String DFA57_specialS =
        "\1\0\1\1\1\2\41\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\1\4\5\6\uffff\1\5\10\uffff\1\5\1\2\1\uffff\1\43\5\uffff\1\3\1\5\3\uffff\1\5\17\uffff\2\5\4\uffff\1\5\5\uffff\2\5\1\uffff\1\4\1\uffff\1\5\1\uffff\1\5\2\uffff\3\5\2\uffff\13\5\1\uffff\1\5",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "3372:2: ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_memberCallArguments_18_0= ruleXShortClosure ) ) | ( ( (lv_memberCallArguments_19_0= ruleXExpression ) ) (otherlv_20= ',' ( (lv_memberCallArguments_21_0= ruleXExpression ) ) )* ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA57_0 = input.LA(1);

                         
                        int index57_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA57_0==RULE_ID) ) {s = 1;}

                        else if ( (LA57_0==25) ) {s = 2;}

                        else if ( (LA57_0==33) && (synpred19_InternalAqua())) {s = 3;}

                        else if ( (LA57_0==69) && (synpred19_InternalAqua())) {s = 4;}

                        else if ( ((LA57_0>=RULE_STRING && LA57_0<=RULE_DECIMAL)||LA57_0==15||LA57_0==24||LA57_0==34||LA57_0==38||(LA57_0>=54 && LA57_0<=55)||LA57_0==60||(LA57_0>=66 && LA57_0<=67)||LA57_0==71||LA57_0==73||(LA57_0>=76 && LA57_0<=78)||(LA57_0>=81 && LA57_0<=91)||LA57_0==93) ) {s = 5;}

                        else if ( (LA57_0==27) ) {s = 35;}

                         
                        input.seek(index57_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA57_1 = input.LA(1);

                         
                        int index57_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalAqua()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index57_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA57_2 = input.LA(1);

                         
                        int index57_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalAqua()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index57_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA59_eotS =
        "\120\uffff";
    static final String DFA59_eofS =
        "\1\2\117\uffff";
    static final String DFA59_minS =
        "\1\4\1\0\116\uffff";
    static final String DFA59_maxS =
        "\1\136\1\0\116\uffff";
    static final String DFA59_acceptS =
        "\2\uffff\1\2\114\uffff\1\1";
    static final String DFA59_specialS =
        "\1\uffff\1\0\116\uffff}>";
    static final String[] DFA59_transitionS = {
            "\5\2\6\uffff\2\2\3\uffff\3\2\1\uffff\15\2\1\uffff\1\2\2\uffff\32\2\1\1\1\2\1\uffff\31\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "3451:3: ( ( ( () '[' ) )=> (lv_memberCallArguments_23_0= ruleXClosure ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_1 = input.LA(1);

                         
                        int index59_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index59_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA61_eotS =
        "\40\uffff";
    static final String DFA61_eofS =
        "\40\uffff";
    static final String DFA61_minS =
        "\1\4\26\uffff\1\0\10\uffff";
    static final String DFA61_maxS =
        "\1\135\26\uffff\1\0\10\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\6\uffff\1\6\11\uffff\1\7\1\uffff\1\12\1\13\1\14\1\15\1\16\1\17\1\10\1\11";
    static final String DFA61_specialS =
        "\1\0\26\uffff\1\1\10\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\5\4\14\6\uffff\1\2\10\uffff\1\1\1\35\10\uffff\1\5\3\uffff\1\5\33\uffff\2\14\3\uffff\1\26\1\uffff\1\3\2\uffff\1\27\1\30\1\31\2\uffff\4\5\4\14\1\32\1\33\1\34\1\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "3492:1: (this_XConstructorCall_0= ruleXConstructorCall | this_XBlockExpression_1= ruleXBlockExpression | this_XSwitchExpression_2= ruleXSwitchExpression | ( ( ( () 'synchronized' '(' ) )=>this_XSynchronizedExpression_3= ruleXSynchronizedExpression ) | this_XFeatureCall_4= ruleXFeatureCall | this_XLiteral_5= ruleXLiteral | this_XIfExpression_6= ruleXIfExpression | ( ( ( () 'for' '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=>this_XForLoopExpression_7= ruleXForLoopExpression ) | this_XBasicForLoopExpression_8= ruleXBasicForLoopExpression | this_XWhileExpression_9= ruleXWhileExpression | this_XDoWhileExpression_10= ruleXDoWhileExpression | this_XThrowExpression_11= ruleXThrowExpression | this_XReturnExpression_12= ruleXReturnExpression | this_XTryCatchFinallyExpression_13= ruleXTryCatchFinallyExpression | this_XParenthesizedExpression_14= ruleXParenthesizedExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_0 = input.LA(1);

                         
                        int index61_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA61_0==24) ) {s = 1;}

                        else if ( (LA61_0==15) ) {s = 2;}

                        else if ( (LA61_0==73) ) {s = 3;}

                        else if ( (LA61_0==93) && (synpred21_InternalAqua())) {s = 4;}

                        else if ( (LA61_0==RULE_ID||LA61_0==34||LA61_0==38||(LA61_0>=81 && LA61_0<=84)) ) {s = 5;}

                        else if ( ((LA61_0>=RULE_STRING && LA61_0<=RULE_DECIMAL)||(LA61_0>=66 && LA61_0<=67)||(LA61_0>=85 && LA61_0<=88)) ) {s = 12;}

                        else if ( (LA61_0==71) ) {s = 22;}

                        else if ( (LA61_0==76) ) {s = 23;}

                        else if ( (LA61_0==77) ) {s = 24;}

                        else if ( (LA61_0==78) ) {s = 25;}

                        else if ( (LA61_0==89) ) {s = 26;}

                        else if ( (LA61_0==90) ) {s = 27;}

                        else if ( (LA61_0==91) ) {s = 28;}

                        else if ( (LA61_0==25) ) {s = 29;}

                         
                        input.seek(index61_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA61_23 = input.LA(1);

                         
                        int index61_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred22_InternalAqua()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index61_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA70_eotS =
        "\46\uffff";
    static final String DFA70_eofS =
        "\46\uffff";
    static final String DFA70_minS =
        "\1\4\2\0\43\uffff";
    static final String DFA70_maxS =
        "\1\135\2\0\43\uffff";
    static final String DFA70_acceptS =
        "\3\uffff\2\1\1\2\40\uffff";
    static final String DFA70_specialS =
        "\1\0\1\1\1\2\43\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\1\4\5\6\uffff\1\5\10\uffff\1\5\1\2\7\uffff\1\3\1\5\3\uffff\1\5\17\uffff\2\5\4\uffff\1\5\5\uffff\3\5\1\4\1\uffff\1\5\1\uffff\1\5\2\uffff\20\5\1\uffff\1\5",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "3975:3: ( ( ( ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> ( ( ( (lv_declaredFormalParameters_2_0= ruleJvmFormalParameter ) ) (otherlv_3= ',' ( (lv_declaredFormalParameters_4_0= ruleJvmFormalParameter ) ) )* )? ( (lv_explicitSyntax_5_0= '|' ) ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_0 = input.LA(1);

                         
                        int index70_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA70_0==RULE_ID) ) {s = 1;}

                        else if ( (LA70_0==25) ) {s = 2;}

                        else if ( (LA70_0==33) && (synpred25_InternalAqua())) {s = 3;}

                        else if ( (LA70_0==69) && (synpred25_InternalAqua())) {s = 4;}

                        else if ( ((LA70_0>=RULE_STRING && LA70_0<=RULE_DECIMAL)||LA70_0==15||LA70_0==24||LA70_0==34||LA70_0==38||(LA70_0>=54 && LA70_0<=55)||LA70_0==60||(LA70_0>=66 && LA70_0<=68)||LA70_0==71||LA70_0==73||(LA70_0>=76 && LA70_0<=91)||LA70_0==93) ) {s = 5;}

                         
                        input.seek(index70_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA70_1 = input.LA(1);

                         
                        int index70_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_InternalAqua()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index70_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA70_2 = input.LA(1);

                         
                        int index70_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_InternalAqua()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index70_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA77_eotS =
        "\43\uffff";
    static final String DFA77_eofS =
        "\43\uffff";
    static final String DFA77_minS =
        "\1\4\1\0\41\uffff";
    static final String DFA77_maxS =
        "\1\135\1\0\41\uffff";
    static final String DFA77_acceptS =
        "\2\uffff\1\2\37\uffff\1\1";
    static final String DFA77_specialS =
        "\1\uffff\1\0\41\uffff}>";
    static final String[] DFA77_transitionS = {
            "\5\2\6\uffff\1\2\10\uffff\1\2\1\1\7\uffff\2\2\3\uffff\1\2\17\uffff\2\2\4\uffff\1\2\5\uffff\2\2\3\uffff\1\2\1\uffff\1\2\2\uffff\3\2\2\uffff\13\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "4399:1: ( ( ( ( ( '(' ( ( ruleJvmFormalParameter ) ) ':' ) )=> (otherlv_2= '(' ( (lv_declaredParam_3_0= ruleJvmFormalParameter ) ) otherlv_4= ':' ) ) ( (lv_switch_5_0= ruleXExpression ) ) otherlv_6= ')' ) | ( ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )? ( (lv_switch_9_0= ruleXExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_1 = input.LA(1);

                         
                        int index77_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_InternalAqua()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA76_eotS =
        "\42\uffff";
    static final String DFA76_eofS =
        "\42\uffff";
    static final String DFA76_minS =
        "\1\4\2\0\37\uffff";
    static final String DFA76_maxS =
        "\1\135\2\0\37\uffff";
    static final String DFA76_acceptS =
        "\3\uffff\1\1\1\2\35\uffff";
    static final String DFA76_specialS =
        "\1\0\1\1\1\2\37\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\1\4\4\6\uffff\1\4\10\uffff\1\4\1\2\7\uffff\1\3\1\4\3\uffff\1\4\17\uffff\2\4\4\uffff\1\4\5\uffff\2\4\3\uffff\1\4\1\uffff\1\4\2\uffff\3\4\2\uffff\13\4\1\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "4454:7: ( ( ( ( ( ruleJvmFormalParameter ) ) ':' ) )=> ( ( (lv_declaredParam_7_0= ruleJvmFormalParameter ) ) otherlv_8= ':' ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA76_0 = input.LA(1);

                         
                        int index76_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA76_0==RULE_ID) ) {s = 1;}

                        else if ( (LA76_0==25) ) {s = 2;}

                        else if ( (LA76_0==33) && (synpred29_InternalAqua())) {s = 3;}

                        else if ( ((LA76_0>=RULE_STRING && LA76_0<=RULE_DECIMAL)||LA76_0==15||LA76_0==24||LA76_0==34||LA76_0==38||(LA76_0>=54 && LA76_0<=55)||LA76_0==60||(LA76_0>=66 && LA76_0<=67)||LA76_0==71||LA76_0==73||(LA76_0>=76 && LA76_0<=78)||(LA76_0>=81 && LA76_0<=91)||LA76_0==93) ) {s = 4;}

                         
                        input.seek(index76_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA76_1 = input.LA(1);

                         
                        int index76_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_InternalAqua()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index76_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA76_2 = input.LA(1);

                         
                        int index76_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_InternalAqua()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index76_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA99_eotS =
        "\120\uffff";
    static final String DFA99_eofS =
        "\1\2\117\uffff";
    static final String DFA99_minS =
        "\1\4\1\0\116\uffff";
    static final String DFA99_maxS =
        "\1\136\1\0\116\uffff";
    static final String DFA99_acceptS =
        "\2\uffff\1\2\114\uffff\1\1";
    static final String DFA99_specialS =
        "\1\uffff\1\0\116\uffff}>";
    static final String[] DFA99_transitionS = {
            "\5\2\6\uffff\2\2\3\uffff\3\2\1\uffff\1\2\1\1\13\2\1\uffff\1\2\2\uffff\34\2\1\uffff\31\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "5511:2: ( ( ( ( '(' ) )=> (lv_explicitOperationCall_7_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )? otherlv_12= ')' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_1 = input.LA(1);

                         
                        int index99_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA98_eotS =
        "\44\uffff";
    static final String DFA98_eofS =
        "\44\uffff";
    static final String DFA98_minS =
        "\1\4\2\0\41\uffff";
    static final String DFA98_maxS =
        "\1\135\2\0\41\uffff";
    static final String DFA98_acceptS =
        "\3\uffff\2\1\1\2\35\uffff\1\3";
    static final String DFA98_specialS =
        "\1\0\1\1\1\2\41\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\1\4\5\6\uffff\1\5\10\uffff\1\5\1\2\1\uffff\1\43\5\uffff\1\3\1\5\3\uffff\1\5\17\uffff\2\5\4\uffff\1\5\5\uffff\2\5\1\uffff\1\4\1\uffff\1\5\1\uffff\1\5\2\uffff\3\5\2\uffff\13\5\1\uffff\1\5",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "5532:2: ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_featureCallArguments_8_0= ruleXShortClosure ) ) | ( ( (lv_featureCallArguments_9_0= ruleXExpression ) ) (otherlv_10= ',' ( (lv_featureCallArguments_11_0= ruleXExpression ) ) )* ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA98_0 = input.LA(1);

                         
                        int index98_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA98_0==RULE_ID) ) {s = 1;}

                        else if ( (LA98_0==25) ) {s = 2;}

                        else if ( (LA98_0==33) && (synpred33_InternalAqua())) {s = 3;}

                        else if ( (LA98_0==69) && (synpred33_InternalAqua())) {s = 4;}

                        else if ( ((LA98_0>=RULE_STRING && LA98_0<=RULE_DECIMAL)||LA98_0==15||LA98_0==24||LA98_0==34||LA98_0==38||(LA98_0>=54 && LA98_0<=55)||LA98_0==60||(LA98_0>=66 && LA98_0<=67)||LA98_0==71||LA98_0==73||(LA98_0>=76 && LA98_0<=78)||(LA98_0>=81 && LA98_0<=91)||LA98_0==93) ) {s = 5;}

                        else if ( (LA98_0==27) ) {s = 35;}

                         
                        input.seek(index98_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA98_1 = input.LA(1);

                         
                        int index98_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_InternalAqua()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index98_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA98_2 = input.LA(1);

                         
                        int index98_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_InternalAqua()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index98_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA100_eotS =
        "\120\uffff";
    static final String DFA100_eofS =
        "\1\2\117\uffff";
    static final String DFA100_minS =
        "\1\4\1\0\116\uffff";
    static final String DFA100_maxS =
        "\1\136\1\0\116\uffff";
    static final String DFA100_acceptS =
        "\2\uffff\1\2\114\uffff\1\1";
    static final String DFA100_specialS =
        "\1\uffff\1\0\116\uffff}>";
    static final String[] DFA100_transitionS = {
            "\5\2\6\uffff\2\2\3\uffff\3\2\1\uffff\15\2\1\uffff\1\2\2\uffff\32\2\1\1\1\2\1\uffff\31\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "5611:3: ( ( ( () '[' ) )=> (lv_featureCallArguments_13_0= ruleXClosure ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_1 = input.LA(1);

                         
                        int index100_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index100_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA104_eotS =
        "\120\uffff";
    static final String DFA104_eofS =
        "\1\2\117\uffff";
    static final String DFA104_minS =
        "\1\4\1\0\116\uffff";
    static final String DFA104_maxS =
        "\1\136\1\0\116\uffff";
    static final String DFA104_acceptS =
        "\2\uffff\1\2\114\uffff\1\1";
    static final String DFA104_specialS =
        "\1\uffff\1\0\116\uffff}>";
    static final String[] DFA104_transitionS = {
            "\5\2\6\uffff\2\2\3\uffff\3\2\1\uffff\12\2\1\1\2\2\1\uffff\1\2\2\uffff\34\2\1\uffff\31\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "5776:2: ( ( ( '<' )=>otherlv_3= '<' ) ( (lv_typeArguments_4_0= ruleJvmArgumentTypeReference ) ) (otherlv_5= ',' ( (lv_typeArguments_6_0= ruleJvmArgumentTypeReference ) ) )* otherlv_7= '>' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_1 = input.LA(1);

                         
                        int index104_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index104_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA107_eotS =
        "\120\uffff";
    static final String DFA107_eofS =
        "\1\2\117\uffff";
    static final String DFA107_minS =
        "\1\4\1\0\116\uffff";
    static final String DFA107_maxS =
        "\1\136\1\0\116\uffff";
    static final String DFA107_acceptS =
        "\2\uffff\1\2\114\uffff\1\1";
    static final String DFA107_specialS =
        "\1\uffff\1\0\116\uffff}>";
    static final String[] DFA107_transitionS = {
            "\5\2\6\uffff\2\2\3\uffff\3\2\1\uffff\1\2\1\1\13\2\1\uffff\1\2\2\uffff\34\2\1\uffff\31\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "5825:3: ( ( ( ( '(' ) )=> (lv_explicitConstructorCall_8_0= '(' ) ) ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )? otherlv_13= ')' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA106_eotS =
        "\44\uffff";
    static final String DFA106_eofS =
        "\44\uffff";
    static final String DFA106_minS =
        "\1\4\2\0\41\uffff";
    static final String DFA106_maxS =
        "\1\135\2\0\41\uffff";
    static final String DFA106_acceptS =
        "\3\uffff\2\1\1\2\35\uffff\1\3";
    static final String DFA106_specialS =
        "\1\0\1\1\1\2\41\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\1\4\5\6\uffff\1\5\10\uffff\1\5\1\2\1\uffff\1\43\5\uffff\1\3\1\5\3\uffff\1\5\17\uffff\2\5\4\uffff\1\5\5\uffff\2\5\1\uffff\1\4\1\uffff\1\5\1\uffff\1\5\2\uffff\3\5\2\uffff\13\5\1\uffff\1\5",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "5846:2: ( ( ( ( () ( ( ( ruleJvmFormalParameter ) ) ( ',' ( ( ruleJvmFormalParameter ) ) )* )? ( ( '|' ) ) ) )=> (lv_arguments_9_0= ruleXShortClosure ) ) | ( ( (lv_arguments_10_0= ruleXExpression ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleXExpression ) ) )* ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_0 = input.LA(1);

                         
                        int index106_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA106_0==RULE_ID) ) {s = 1;}

                        else if ( (LA106_0==25) ) {s = 2;}

                        else if ( (LA106_0==33) && (synpred37_InternalAqua())) {s = 3;}

                        else if ( (LA106_0==69) && (synpred37_InternalAqua())) {s = 4;}

                        else if ( ((LA106_0>=RULE_STRING && LA106_0<=RULE_DECIMAL)||LA106_0==15||LA106_0==24||LA106_0==34||LA106_0==38||(LA106_0>=54 && LA106_0<=55)||LA106_0==60||(LA106_0>=66 && LA106_0<=67)||LA106_0==71||LA106_0==73||(LA106_0>=76 && LA106_0<=78)||(LA106_0>=81 && LA106_0<=91)||LA106_0==93) ) {s = 5;}

                        else if ( (LA106_0==27) ) {s = 35;}

                         
                        input.seek(index106_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA106_1 = input.LA(1);

                         
                        int index106_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_InternalAqua()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index106_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA106_2 = input.LA(1);

                         
                        int index106_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_InternalAqua()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index106_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA108_eotS =
        "\120\uffff";
    static final String DFA108_eofS =
        "\1\2\117\uffff";
    static final String DFA108_minS =
        "\1\4\1\0\116\uffff";
    static final String DFA108_maxS =
        "\1\136\1\0\116\uffff";
    static final String DFA108_acceptS =
        "\2\uffff\1\2\114\uffff\1\1";
    static final String DFA108_specialS =
        "\1\uffff\1\0\116\uffff}>";
    static final String[] DFA108_transitionS = {
            "\5\2\6\uffff\2\2\3\uffff\3\2\1\uffff\15\2\1\uffff\1\2\2\uffff\32\2\1\1\1\2\1\uffff\31\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "5925:3: ( ( ( () '[' ) )=> (lv_arguments_14_0= ruleXClosure ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_1 = input.LA(1);

                         
                        int index108_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\120\uffff";
    static final String DFA111_eofS =
        "\1\41\117\uffff";
    static final String DFA111_minS =
        "\1\4\40\0\57\uffff";
    static final String DFA111_maxS =
        "\1\136\40\0\57\uffff";
    static final String DFA111_acceptS =
        "\41\uffff\1\2\55\uffff\1\1";
    static final String DFA111_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\57\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\1\1\27\1\23\1\24\1\25\6\uffff\1\12\1\41\3\uffff\3\41\1\uffff\1\11\1\40\10\41\1\15\2\41\1\uffff\1\2\2\uffff\15\41\1\10\1\7\4\41\1\6\5\41\1\17\1\20\1\41\1\uffff\1\41\1\31\1\41\1\13\2\41\1\32\1\33\1\34\2\41\1\3\1\4\1\5\1\16\1\21\1\22\1\26\1\30\1\35\1\36\1\37\1\41\1\14\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "6265:1: ( ( 'extends' | 'static' | 'import' | 'extension' | '!' | '-' | '+' | 'new' | '{' | 'switch' | 'synchronized' | '<' | 'super' | '#' | '[' | 'false' | 'true' | 'null' | 'typeof' | 'if' | 'for' | 'while' | 'do' | 'throw' | 'return' | 'try' | '(' | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING )=> (lv_expression_2_0= ruleXExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA111_5 = input.LA(1);

                         
                        int index111_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA111_6 = input.LA(1);

                         
                        int index111_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA111_7 = input.LA(1);

                         
                        int index111_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA111_8 = input.LA(1);

                         
                        int index111_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA111_9 = input.LA(1);

                         
                        int index111_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA111_10 = input.LA(1);

                         
                        int index111_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA111_11 = input.LA(1);

                         
                        int index111_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA111_12 = input.LA(1);

                         
                        int index111_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA111_13 = input.LA(1);

                         
                        int index111_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA111_14 = input.LA(1);

                         
                        int index111_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA111_15 = input.LA(1);

                         
                        int index111_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA111_16 = input.LA(1);

                         
                        int index111_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA111_17 = input.LA(1);

                         
                        int index111_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA111_18 = input.LA(1);

                         
                        int index111_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA111_19 = input.LA(1);

                         
                        int index111_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA111_20 = input.LA(1);

                         
                        int index111_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA111_21 = input.LA(1);

                         
                        int index111_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA111_22 = input.LA(1);

                         
                        int index111_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA111_23 = input.LA(1);

                         
                        int index111_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA111_24 = input.LA(1);

                         
                        int index111_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA111_25 = input.LA(1);

                         
                        int index111_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA111_26 = input.LA(1);

                         
                        int index111_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA111_27 = input.LA(1);

                         
                        int index111_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA111_28 = input.LA(1);

                         
                        int index111_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA111_29 = input.LA(1);

                         
                        int index111_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA111_30 = input.LA(1);

                         
                        int index111_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA111_31 = input.LA(1);

                         
                        int index111_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA111_32 = input.LA(1);

                         
                        int index111_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalAqua()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index111_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA129_eotS =
        "\122\uffff";
    static final String DFA129_eofS =
        "\1\2\121\uffff";
    static final String DFA129_minS =
        "\1\4\1\0\120\uffff";
    static final String DFA129_maxS =
        "\1\140\1\0\120\uffff";
    static final String DFA129_acceptS =
        "\2\uffff\1\2\116\uffff\1\1";
    static final String DFA129_specialS =
        "\1\uffff\1\0\120\uffff}>";
    static final String[] DFA129_transitionS = {
            "\5\2\6\uffff\2\2\3\uffff\3\2\1\uffff\12\2\1\1\2\2\1\uffff\2\2\1\uffff\34\2\1\uffff\31\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "6915:2: ( ( ( '<' )=>otherlv_1= '<' ) ( (lv_arguments_2_0= ruleJvmArgumentTypeReference ) ) (otherlv_3= ',' ( (lv_arguments_4_0= ruleJvmArgumentTypeReference ) ) )* otherlv_5= '>' ( ( ( ( () '.' ) )=> ( () otherlv_7= '.' ) ) ( ( ruleValidID ) ) ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )? )* )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA129_1 = input.LA(1);

                         
                        int index129_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_InternalAqua()) ) {s = 81;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index129_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA127_eotS =
        "\122\uffff";
    static final String DFA127_eofS =
        "\1\2\121\uffff";
    static final String DFA127_minS =
        "\1\4\1\0\120\uffff";
    static final String DFA127_maxS =
        "\1\140\1\0\120\uffff";
    static final String DFA127_acceptS =
        "\2\uffff\1\2\116\uffff\1\1";
    static final String DFA127_specialS =
        "\1\uffff\1\0\120\uffff}>";
    static final String[] DFA127_transitionS = {
            "\5\2\6\uffff\2\2\3\uffff\3\2\1\uffff\12\2\1\1\2\2\1\uffff\2\2\1\uffff\34\2\1\uffff\31\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "6991:2: ( ( ( '<' )=>otherlv_9= '<' ) ( (lv_arguments_10_0= ruleJvmArgumentTypeReference ) ) (otherlv_11= ',' ( (lv_arguments_12_0= ruleJvmArgumentTypeReference ) ) )* otherlv_13= '>' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_1 = input.LA(1);

                         
                        int index127_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_InternalAqua()) ) {s = 81;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index127_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA139_eotS =
        "\7\uffff";
    static final String DFA139_eofS =
        "\2\uffff\1\4\3\uffff\1\4";
    static final String DFA139_minS =
        "\1\4\1\uffff\1\16\1\4\2\uffff\1\16";
    static final String DFA139_maxS =
        "\1\121\1\uffff\1\122\1\70\2\uffff\1\122";
    static final String DFA139_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\1\3\1\uffff";
    static final String DFA139_specialS =
        "\7\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\2\114\uffff\1\1",
            "",
            "\1\4\6\uffff\1\3\1\uffff\1\4\15\uffff\1\4\40\uffff\1\4\13\uffff\1\4",
            "\1\6\63\uffff\1\5",
            "",
            "",
            "\1\4\6\uffff\1\3\1\uffff\1\4\15\uffff\1\4\40\uffff\1\4\13\uffff\1\4"
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "7567:1: ( ( ( (lv_static_1_0= 'static' ) ) ( (lv_extension_2_0= 'extension' ) )? ( ( ruleQualifiedNameInStaticImport ) ) ( ( (lv_wildcard_4_0= '*' ) ) | ( (lv_memberName_5_0= ruleValidID ) ) ) ) | ( ( ruleQualifiedName ) ) | ( (lv_importedNamespace_7_0= ruleQualifiedNameWithWildcard ) ) )";
        }
    }
 

    public static final BitSet FOLLOW_ruleAquaModel_in_entryRuleAquaModel75 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAquaModel85 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePackageDeclaration_in_ruleAquaModel132 = new BitSet(new long[]{0x0000002000804002L,0x0000000000040000L});
    public static final BitSet FOLLOW_ruleXImportSection_in_ruleAquaModel152 = new BitSet(new long[]{0x0000002000804002L});
    public static final BitSet FOLLOW_ruleType_in_ruleAquaModel174 = new BitSet(new long[]{0x0000002000804002L});
    public static final BitSet FOLLOW_rulePackageDeclaration_in_entryRulePackageDeclaration211 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePackageDeclaration221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_rulePackageDeclaration258 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleQualifiedName_in_rulePackageDeclaration279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleType_in_entryRuleType315 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleType325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleUnitOrBoard_in_ruleType372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDataType_in_ruleType399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleUnitOrBoard_in_entryRuleUnitOrBoard434 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleUnitOrBoard444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleUnit_in_ruleUnitOrBoard491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBoard_in_ruleUnitOrBoard518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBoard_in_entryRuleBoard553 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleBoard563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_ruleBoard600 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleBoard617 = new BitSet(new long[]{0x00000000000E0000L});
    public static final BitSet FOLLOW_rulePortDeclaration_in_ruleBoard643 = new BitSet(new long[]{0x00000000000E8000L});
    public static final BitSet FOLLOW_15_in_ruleBoard656 = new BitSet(new long[]{0x0000000000410010L});
    public static final BitSet FOLLOW_ruleFlow_in_ruleBoard677 = new BitSet(new long[]{0x0000000000410010L});
    public static final BitSet FOLLOW_16_in_ruleBoard690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePortDeclaration_in_entryRulePortDeclaration726 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePortDeclaration736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleInputPort_in_rulePortDeclaration783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOutputPort_in_rulePortDeclaration810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleInputPort_in_entryRuleInputPort845 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleInputPort855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_ruleInputPort892 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleInputPort913 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleInputPort930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOutputPort_in_entryRuleOutputPort971 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOutputPort981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_ruleOutputPort1025 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_19_in_ruleOutputPort1056 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleOutputPort1078 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleOutputPort1095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFlow_in_entryRuleFlow1136 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFlow1146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOutputPortReference_in_ruleFlow1192 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_ruleFlow1204 = new BitSet(new long[]{0x0000000000400010L,0x0000000000000008L});
    public static final BitSet FOLLOW_ruleInputPortReference_in_ruleFlow1225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOutputPortReference_in_entryRuleOutputPortReference1261 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOutputPortReference1271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLocalInputPort_in_ruleOutputPortReference1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIntegratedPort_in_ruleOutputPortReference1345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIntegratedPort_in_entryRuleIntegratedPort1380 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIntegratedPort1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleIntegratedPort1435 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_rulePort_in_ruleIntegratedPort1456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePort_in_entryRulePort1493 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePort1503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_rulePort1540 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_rulePort1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLocalInputPort_in_entryRuleLocalInputPort1598 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLocalInputPort1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ruleLocalInputPort1645 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleLocalInputPort1665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleInputPortReference_in_entryRuleInputPortReference1701 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleInputPortReference1711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLocalOutputPort_in_ruleInputPortReference1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIntegratedPort_in_ruleInputPortReference1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXClosure_in_ruleInputPortReference1823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLocalOutputPort_in_entryRuleLocalOutputPort1859 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLocalOutputPort1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ruleLocalOutputPort1906 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleLocalOutputPort1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleUnit_in_entryRuleUnit1962 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleUnit1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_ruleUnit2009 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleUnit2026 = new BitSet(new long[]{0x00000000000E0000L});
    public static final BitSet FOLLOW_rulePortDeclaration_in_ruleUnit2052 = new BitSet(new long[]{0x00000000000E8000L});
    public static final BitSet FOLLOW_15_in_ruleUnit2065 = new BitSet(new long[]{0x0000000031010000L,0x0000000000018000L});
    public static final BitSet FOLLOW_ruleDeclaration_in_ruleUnit2086 = new BitSet(new long[]{0x0000000031010000L,0x0000000000018000L});
    public static final BitSet FOLLOW_16_in_ruleUnit2099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDeclaration_in_entryRuleDeclaration2135 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDeclaration2145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleConstructor_in_ruleDeclaration2192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleInputProcessingDeclaration_in_ruleDeclaration2219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMethodDeclaration_in_ruleDeclaration2246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleVariableDeclaration_in_ruleDeclaration2273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleConstructor_in_entryRuleConstructor2308 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleConstructor2318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_ruleConstructor2355 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleConstructor2367 = new BitSet(new long[]{0x000000020A000010L});
    public static final BitSet FOLLOW_ruleFullJvmFormalParameter_in_ruleConstructor2389 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_26_in_ruleConstructor2402 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleFullJvmFormalParameter_in_ruleConstructor2423 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_27_in_ruleConstructor2439 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_ruleXBlockExpression_in_ruleConstructor2460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleVariableDeclaration_in_entryRuleVariableDeclaration2496 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleVariableDeclaration2506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXVariableDeclaration_in_ruleVariableDeclaration2551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleInputProcessingDeclaration_in_entryRuleInputProcessingDeclaration2586 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleInputProcessingDeclaration2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_ruleInputProcessingDeclaration2633 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleInputProcessingDeclaration2653 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_ruleXBlockExpression_in_ruleInputProcessingDeclaration2674 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_20_in_ruleInputProcessingDeclaration2687 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_ruleLocalOutputPort_in_ruleInputProcessingDeclaration2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMethodDeclaration_in_entryRuleMethodDeclaration2746 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMethodDeclaration2756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_ruleMethodDeclaration2793 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleMethodDeclaration2814 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleMethodDeclaration2831 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleMethodDeclaration2848 = new BitSet(new long[]{0x000000020A000010L});
    public static final BitSet FOLLOW_ruleFullJvmFormalParameter_in_ruleMethodDeclaration2870 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_26_in_ruleMethodDeclaration2883 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleFullJvmFormalParameter_in_ruleMethodDeclaration2904 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_27_in_ruleMethodDeclaration2920 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_ruleXBlockExpression_in_ruleMethodDeclaration2941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXExpression_in_entryRuleXExpression2977 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXExpression2987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXAssignment_in_ruleXExpression3034 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_20_in_ruleXExpression3077 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_ruleLocalOutputPort_in_ruleXExpression3098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpOther_in_entryRuleOpOther3138 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpOther3149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_ruleOpOther3187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_ruleOpOther3207 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_32_in_ruleOpOther3220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_ruleOpOther3240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_ruleOpOther3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_ruleOpOther3279 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_ruleOpOther3310 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_ruleOpOther3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_ruleOpOther3344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_ruleOpOther3366 = new BitSet(new long[]{0x0000000600000000L});
    public static final BitSet FOLLOW_34_in_ruleOpOther3397 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_34_in_ruleOpOther3410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_ruleOpOther3431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_ruleOpOther3450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_ruleOpOther3471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_ruleOpOther3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDataType_in_entryRuleDataType3530 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDataType3540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_ruleDataType3577 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleDataType3594 = new BitSet(new long[]{0x000000C400008000L});
    public static final BitSet FOLLOW_34_in_ruleDataType3612 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleJvmTypeParameter_in_ruleDataType3633 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_26_in_ruleDataType3646 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleJvmTypeParameter_in_ruleDataType3667 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_31_in_ruleDataType3681 = new BitSet(new long[]{0x000000C000008000L});
    public static final BitSet FOLLOW_38_in_ruleDataType3696 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleJvmParameterizedTypeReference_in_ruleDataType3717 = new BitSet(new long[]{0x0000008000008000L});
    public static final BitSet FOLLOW_39_in_ruleDataType3732 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleJvmParameterizedTypeReference_in_ruleDataType3753 = new BitSet(new long[]{0x0000000004008000L});
    public static final BitSet FOLLOW_26_in_ruleDataType3766 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleJvmParameterizedTypeReference_in_ruleDataType3787 = new BitSet(new long[]{0x0000000004008000L});
    public static final BitSet FOLLOW_15_in_ruleDataType3803 = new BitSet(new long[]{0x0000000222010010L});
    public static final BitSet FOLLOW_ruleMember_in_ruleDataType3824 = new BitSet(new long[]{0x0000000222010010L});
    public static final BitSet FOLLOW_16_in_ruleDataType3837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMember_in_entryRuleMember3873 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMember3883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePropertyDeclaration_in_ruleMember3930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMethodDeclaration_in_ruleMember3957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePropertyDeclaration_in_entryRulePropertyDeclaration3992 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePropertyDeclaration4002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_rulePropertyDeclaration4048 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_RULE_ID_in_rulePropertyDeclaration4065 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_40_in_rulePropertyDeclaration4083 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_rulePropertyDeclaration4104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXAssignment_in_entryRuleXAssignment4142 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXAssignment4152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFeatureCallID_in_ruleXAssignment4210 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ruleOpSingleAssign_in_ruleXAssignment4226 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXAssignment_in_ruleXAssignment4246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXOrExpression_in_ruleXAssignment4276 = new BitSet(new long[]{0x00003E0480000002L});
    public static final BitSet FOLLOW_ruleOpMultiAssign_in_ruleXAssignment4329 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXAssignment_in_ruleXAssignment4352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpSingleAssign_in_entryRuleOpSingleAssign4392 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpSingleAssign4403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_ruleOpSingleAssign4440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpMultiAssign_in_entryRuleOpMultiAssign4480 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpMultiAssign4491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_ruleOpMultiAssign4529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_ruleOpMultiAssign4548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_ruleOpMultiAssign4567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_ruleOpMultiAssign4586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_ruleOpMultiAssign4605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_ruleOpMultiAssign4625 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_34_in_ruleOpMultiAssign4638 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_ruleOpMultiAssign4651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_ruleOpMultiAssign4672 = new BitSet(new long[]{0x0000400080000000L});
    public static final BitSet FOLLOW_31_in_ruleOpMultiAssign4686 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_46_in_ruleOpMultiAssign4701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXOrExpression_in_entryRuleXOrExpression4742 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXOrExpression4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXAndExpression_in_ruleXOrExpression4799 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_ruleOpOr_in_ruleXOrExpression4852 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXAndExpression_in_ruleXOrExpression4875 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_ruleOpOr_in_entryRuleOpOr4914 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpOr4925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_ruleOpOr4962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXAndExpression_in_entryRuleXAndExpression5001 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXAndExpression5011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXEqualityExpression_in_ruleXAndExpression5058 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_ruleOpAnd_in_ruleXAndExpression5111 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXEqualityExpression_in_ruleXAndExpression5134 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_ruleOpAnd_in_entryRuleOpAnd5173 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpAnd5184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_ruleOpAnd5221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXEqualityExpression_in_entryRuleXEqualityExpression5260 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXEqualityExpression5270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXRelationalExpression_in_ruleXEqualityExpression5317 = new BitSet(new long[]{0x001E000000000002L});
    public static final BitSet FOLLOW_ruleOpEquality_in_ruleXEqualityExpression5370 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXRelationalExpression_in_ruleXEqualityExpression5393 = new BitSet(new long[]{0x001E000000000002L});
    public static final BitSet FOLLOW_ruleOpEquality_in_entryRuleOpEquality5432 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpEquality5443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_ruleOpEquality5481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_ruleOpEquality5500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_ruleOpEquality5519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_ruleOpEquality5538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXRelationalExpression_in_entryRuleXRelationalExpression5578 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXRelationalExpression5588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXOtherOperatorExpression_in_ruleXRelationalExpression5635 = new BitSet(new long[]{0x0020400480000002L});
    public static final BitSet FOLLOW_53_in_ruleXRelationalExpression5671 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleXRelationalExpression5694 = new BitSet(new long[]{0x0020400480000002L});
    public static final BitSet FOLLOW_ruleOpCompare_in_ruleXRelationalExpression5755 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXOtherOperatorExpression_in_ruleXRelationalExpression5778 = new BitSet(new long[]{0x0020400480000002L});
    public static final BitSet FOLLOW_ruleOpCompare_in_entryRuleOpCompare5818 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpCompare5829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_ruleOpCompare5867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_ruleOpCompare5887 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_ruleOpCompare5900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_ruleOpCompare5920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_ruleOpCompare5939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXOtherOperatorExpression_in_entryRuleXOtherOperatorExpression5979 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXOtherOperatorExpression5989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXAdditiveExpression_in_ruleXOtherOperatorExpression6036 = new BitSet(new long[]{0x0000001FC0000002L});
    public static final BitSet FOLLOW_ruleOpOther_in_ruleXOtherOperatorExpression6089 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXAdditiveExpression_in_ruleXOtherOperatorExpression6112 = new BitSet(new long[]{0x0000001FC0000002L});
    public static final BitSet FOLLOW_ruleXAdditiveExpression_in_entryRuleXAdditiveExpression6150 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXAdditiveExpression6160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXMultiplicativeExpression_in_ruleXAdditiveExpression6207 = new BitSet(new long[]{0x00C0000000000002L});
    public static final BitSet FOLLOW_ruleOpAdd_in_ruleXAdditiveExpression6260 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXMultiplicativeExpression_in_ruleXAdditiveExpression6283 = new BitSet(new long[]{0x00C0000000000002L});
    public static final BitSet FOLLOW_ruleOpAdd_in_entryRuleOpAdd6322 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpAdd6333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_ruleOpAdd6371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_ruleOpAdd6390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXMultiplicativeExpression_in_entryRuleXMultiplicativeExpression6430 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXMultiplicativeExpression6440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXUnaryOperation_in_ruleXMultiplicativeExpression6487 = new BitSet(new long[]{0x0F00000000000002L});
    public static final BitSet FOLLOW_ruleOpMulti_in_ruleXMultiplicativeExpression6540 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXUnaryOperation_in_ruleXMultiplicativeExpression6563 = new BitSet(new long[]{0x0F00000000000002L});
    public static final BitSet FOLLOW_ruleOpMulti_in_entryRuleOpMulti6602 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpMulti6613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_ruleOpMulti6651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_ruleOpMulti6670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_ruleOpMulti6689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_ruleOpMulti6708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXUnaryOperation_in_entryRuleXUnaryOperation6748 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXUnaryOperation6758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpUnary_in_ruleXUnaryOperation6816 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXUnaryOperation_in_ruleXUnaryOperation6837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXCastedExpression_in_ruleXUnaryOperation6866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpUnary_in_entryRuleOpUnary6902 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpUnary6913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_ruleOpUnary6951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_ruleOpUnary6970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_ruleOpUnary6989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXCastedExpression_in_entryRuleXCastedExpression7029 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXCastedExpression7039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXPostfixOperation_in_ruleXCastedExpression7086 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_61_in_ruleXCastedExpression7121 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleXCastedExpression7144 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_ruleXPostfixOperation_in_entryRuleXPostfixOperation7182 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXPostfixOperation7192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXMemberFeatureCall_in_ruleXPostfixOperation7239 = new BitSet(new long[]{0xC000000000000002L});
    public static final BitSet FOLLOW_ruleOpPostfix_in_ruleXPostfixOperation7291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpPostfix_in_entryRuleOpPostfix7331 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOpPostfix7342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_ruleOpPostfix7380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_ruleOpPostfix7399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXMemberFeatureCall_in_entryRuleXMemberFeatureCall7439 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXMemberFeatureCall7449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXPrimaryExpression_in_ruleXMemberFeatureCall7496 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000003L});
    public static final BitSet FOLLOW_21_in_ruleXMemberFeatureCall7568 = new BitSet(new long[]{0x0000004000000010L,0x00000000000E0000L});
    public static final BitSet FOLLOW_64_in_ruleXMemberFeatureCall7592 = new BitSet(new long[]{0x0000004000000010L,0x00000000000E0000L});
    public static final BitSet FOLLOW_ruleFeatureCallID_in_ruleXMemberFeatureCall7629 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ruleOpSingleAssign_in_ruleXMemberFeatureCall7645 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXAssignment_in_ruleXMemberFeatureCall7667 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000003L});
    public static final BitSet FOLLOW_21_in_ruleXMemberFeatureCall7753 = new BitSet(new long[]{0x0000004400000010L,0x00000000001E0000L});
    public static final BitSet FOLLOW_65_in_ruleXMemberFeatureCall7777 = new BitSet(new long[]{0x0000004400000010L,0x00000000001E0000L});
    public static final BitSet FOLLOW_64_in_ruleXMemberFeatureCall7814 = new BitSet(new long[]{0x0000004400000010L,0x00000000001E0000L});
    public static final BitSet FOLLOW_34_in_ruleXMemberFeatureCall7843 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleXMemberFeatureCall7864 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_26_in_ruleXMemberFeatureCall7877 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleXMemberFeatureCall7898 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_31_in_ruleXMemberFeatureCall7912 = new BitSet(new long[]{0x0000004400000010L,0x00000000001E0000L});
    public static final BitSet FOLLOW_ruleIdOrSuper_in_ruleXMemberFeatureCall7937 = new BitSet(new long[]{0x0000000002600012L,0x000000000000000BL});
    public static final BitSet FOLLOW_25_in_ruleXMemberFeatureCall7971 = new BitSet(new long[]{0x10C000460B4081F0L,0x000000002FFE72ACL});
    public static final BitSet FOLLOW_ruleXShortClosure_in_ruleXMemberFeatureCall8056 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXMemberFeatureCall8084 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_26_in_ruleXMemberFeatureCall8097 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXMemberFeatureCall8118 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_27_in_ruleXMemberFeatureCall8135 = new BitSet(new long[]{0x0000000000600012L,0x000000000000000BL});
    public static final BitSet FOLLOW_ruleXClosure_in_ruleXMemberFeatureCall8170 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000003L});
    public static final BitSet FOLLOW_ruleXPrimaryExpression_in_entryRuleXPrimaryExpression8210 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXPrimaryExpression8220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXConstructorCall_in_ruleXPrimaryExpression8267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXBlockExpression_in_ruleXPrimaryExpression8294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXSwitchExpression_in_ruleXPrimaryExpression8321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXSynchronizedExpression_in_ruleXPrimaryExpression8365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXFeatureCall_in_ruleXPrimaryExpression8393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXLiteral_in_ruleXPrimaryExpression8420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXIfExpression_in_ruleXPrimaryExpression8447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXForLoopExpression_in_ruleXPrimaryExpression8504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXBasicForLoopExpression_in_ruleXPrimaryExpression8532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXWhileExpression_in_ruleXPrimaryExpression8559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXDoWhileExpression_in_ruleXPrimaryExpression8586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXThrowExpression_in_ruleXPrimaryExpression8613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXReturnExpression_in_ruleXPrimaryExpression8640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXTryCatchFinallyExpression_in_ruleXPrimaryExpression8667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXParenthesizedExpression_in_ruleXPrimaryExpression8694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXLiteral_in_entryRuleXLiteral8729 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXLiteral8739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXCollectionLiteral_in_ruleXLiteral8786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXClosure_in_ruleXLiteral8826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXBooleanLiteral_in_ruleXLiteral8854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXNumberLiteral_in_ruleXLiteral8881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXNullLiteral_in_ruleXLiteral8908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXStringLiteral_in_ruleXLiteral8935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXTypeLiteral_in_ruleXLiteral8962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXCollectionLiteral_in_entryRuleXCollectionLiteral8997 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXCollectionLiteral9007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXSetLiteral_in_ruleXCollectionLiteral9054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXListLiteral_in_ruleXCollectionLiteral9081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXSetLiteral_in_entryRuleXSetLiteral9116 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXSetLiteral9126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_ruleXSetLiteral9172 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_15_in_ruleXSetLiteral9184 = new BitSet(new long[]{0x10C00044034181F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXSetLiteral9206 = new BitSet(new long[]{0x0000000004010000L});
    public static final BitSet FOLLOW_26_in_ruleXSetLiteral9219 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXSetLiteral9240 = new BitSet(new long[]{0x0000000004010000L});
    public static final BitSet FOLLOW_16_in_ruleXSetLiteral9256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXListLiteral_in_entryRuleXListLiteral9292 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXListLiteral9302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_ruleXListLiteral9348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_ruleXListLiteral9360 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE729CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXListLiteral9382 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_26_in_ruleXListLiteral9395 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXListLiteral9416 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_ruleXListLiteral9432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXClosure_in_entryRuleXClosure9468 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXClosure9478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_ruleXClosure9538 = new BitSet(new long[]{0x10C00046334081F0L,0x000000002FFFF2BCL});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_ruleXClosure9611 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_26_in_ruleXClosure9624 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_ruleXClosure9645 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_ruleXClosure9667 = new BitSet(new long[]{0x10C00044334081F0L,0x000000002FFFF29CL});
    public static final BitSet FOLLOW_ruleXExpressionInClosure_in_ruleXClosure9704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_ruleXClosure9716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXExpressionInClosure_in_entryRuleXExpressionInClosure9752 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXExpressionInClosure9762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXExpressionOrVarDeclaration_in_ruleXExpressionInClosure9818 = new BitSet(new long[]{0x10C00044334081F2L,0x000000002FFFF2CCL});
    public static final BitSet FOLLOW_70_in_ruleXExpressionInClosure9831 = new BitSet(new long[]{0x10C00044334081F2L,0x000000002FFFF28CL});
    public static final BitSet FOLLOW_ruleXShortClosure_in_entryRuleXShortClosure9871 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXShortClosure9881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_ruleXShortClosure9989 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_26_in_ruleXShortClosure10002 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_ruleXShortClosure10023 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_ruleXShortClosure10045 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXShortClosure10081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXParenthesizedExpression_in_entryRuleXParenthesizedExpression10117 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXParenthesizedExpression10127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_ruleXParenthesizedExpression10164 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXParenthesizedExpression10186 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleXParenthesizedExpression10197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXIfExpression_in_entryRuleXIfExpression10233 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXIfExpression10243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_ruleXIfExpression10289 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleXIfExpression10301 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXIfExpression10322 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleXIfExpression10334 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXIfExpression10355 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_ruleXIfExpression10376 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXIfExpression10398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXSwitchExpression_in_entryRuleXSwitchExpression10436 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXSwitchExpression10446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_ruleXSwitchExpression10492 = new BitSet(new long[]{0x10C00046034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_25_in_ruleXSwitchExpression10530 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_ruleXSwitchExpression10551 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_22_in_ruleXSwitchExpression10563 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXSwitchExpression10586 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleXSwitchExpression10598 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_ruleXSwitchExpression10647 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_22_in_ruleXSwitchExpression10659 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXSwitchExpression10683 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_15_in_ruleXSwitchExpression10697 = new BitSet(new long[]{0x0000000206410010L,0x0000000000000C00L});
    public static final BitSet FOLLOW_ruleXCasePart_in_ruleXSwitchExpression10718 = new BitSet(new long[]{0x0000000206410010L,0x0000000000000C00L});
    public static final BitSet FOLLOW_74_in_ruleXSwitchExpression10732 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_22_in_ruleXSwitchExpression10744 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXSwitchExpression10765 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_16_in_ruleXSwitchExpression10779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXCasePart_in_entryRuleXCasePart10815 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXCasePart10825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleXCasePart10880 = new BitSet(new long[]{0x0000000004400000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_ruleXCasePart10894 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXCasePart10915 = new BitSet(new long[]{0x0000000004400000L});
    public static final BitSet FOLLOW_22_in_ruleXCasePart10931 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXCasePart10952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_ruleXCasePart10977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXForLoopExpression_in_entryRuleXForLoopExpression11027 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXForLoopExpression11037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_ruleXForLoopExpression11114 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleXForLoopExpression11126 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_ruleXForLoopExpression11147 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_22_in_ruleXForLoopExpression11159 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXForLoopExpression11182 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleXForLoopExpression11194 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXForLoopExpression11215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXBasicForLoopExpression_in_entryRuleXBasicForLoopExpression11251 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXBasicForLoopExpression11261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_ruleXBasicForLoopExpression11307 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleXBasicForLoopExpression11319 = new BitSet(new long[]{0x10C00044334081F0L,0x000000002FFFF2CCL});
    public static final BitSet FOLLOW_ruleXExpressionOrVarDeclaration_in_ruleXBasicForLoopExpression11341 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_26_in_ruleXBasicForLoopExpression11354 = new BitSet(new long[]{0x10C00044334081F0L,0x000000002FFFF28CL});
    public static final BitSet FOLLOW_ruleXExpressionOrVarDeclaration_in_ruleXBasicForLoopExpression11375 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_ruleXBasicForLoopExpression11391 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE72CCL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXBasicForLoopExpression11412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_ruleXBasicForLoopExpression11425 = new BitSet(new long[]{0x10C000440B4081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXBasicForLoopExpression11447 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_26_in_ruleXBasicForLoopExpression11460 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXBasicForLoopExpression11481 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_27_in_ruleXBasicForLoopExpression11497 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXBasicForLoopExpression11518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXWhileExpression_in_entryRuleXWhileExpression11554 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXWhileExpression11564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_ruleXWhileExpression11610 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleXWhileExpression11622 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXWhileExpression11643 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleXWhileExpression11655 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXWhileExpression11676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXDoWhileExpression_in_entryRuleXDoWhileExpression11712 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXDoWhileExpression11722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_ruleXDoWhileExpression11768 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXDoWhileExpression11789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_ruleXDoWhileExpression11801 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleXDoWhileExpression11813 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXDoWhileExpression11834 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleXDoWhileExpression11846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXBlockExpression_in_entryRuleXBlockExpression11882 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXBlockExpression11892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_ruleXBlockExpression11938 = new BitSet(new long[]{0x10C00044334181F0L,0x000000002FFFF28CL});
    public static final BitSet FOLLOW_ruleXExpressionOrVarDeclaration_in_ruleXBlockExpression11960 = new BitSet(new long[]{0x10C00044334181F0L,0x000000002FFFF2CCL});
    public static final BitSet FOLLOW_70_in_ruleXBlockExpression11973 = new BitSet(new long[]{0x10C00044334181F0L,0x000000002FFFF28CL});
    public static final BitSet FOLLOW_16_in_ruleXBlockExpression11989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXExpressionOrVarDeclaration_in_entryRuleXExpressionOrVarDeclaration12025 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXExpressionOrVarDeclaration12035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXVariableDeclaration_in_ruleXExpressionOrVarDeclaration12082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXExpressionOrVarDeclaration12109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXVariableDeclaration_in_entryRuleXVariableDeclaration12144 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXVariableDeclaration12154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_ruleXVariableDeclaration12207 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_80_in_ruleXVariableDeclaration12238 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleXVariableDeclaration12286 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleXVariableDeclaration12307 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleXVariableDeclaration12336 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_40_in_ruleXVariableDeclaration12350 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXVariableDeclaration12371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_entryRuleJvmFormalParameter12409 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmFormalParameter12419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleJvmFormalParameter12465 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleJvmFormalParameter12487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFullJvmFormalParameter_in_entryRuleFullJvmFormalParameter12523 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFullJvmFormalParameter12533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleFullJvmFormalParameter12579 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleFullJvmFormalParameter12600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXFeatureCall_in_entryRuleXFeatureCall12636 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXFeatureCall12646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_ruleXFeatureCall12693 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleXFeatureCall12714 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_26_in_ruleXFeatureCall12727 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleXFeatureCall12748 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_31_in_ruleXFeatureCall12762 = new BitSet(new long[]{0x0000004400000010L,0x00000000001E0000L});
    public static final BitSet FOLLOW_ruleIdOrSuper_in_ruleXFeatureCall12787 = new BitSet(new long[]{0x0000000002400012L,0x0000000000000008L});
    public static final BitSet FOLLOW_25_in_ruleXFeatureCall12821 = new BitSet(new long[]{0x10C000460B4081F0L,0x000000002FFE72ACL});
    public static final BitSet FOLLOW_ruleXShortClosure_in_ruleXFeatureCall12906 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXFeatureCall12934 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_26_in_ruleXFeatureCall12947 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXFeatureCall12968 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_27_in_ruleXFeatureCall12985 = new BitSet(new long[]{0x0000000000400012L,0x0000000000000008L});
    public static final BitSet FOLLOW_ruleXClosure_in_ruleXFeatureCall13020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFeatureCallID_in_entryRuleFeatureCallID13058 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFeatureCallID13069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleFeatureCallID13116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_ruleFeatureCallID13140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_ruleFeatureCallID13159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_ruleFeatureCallID13178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_ruleFeatureCallID13197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdOrSuper_in_entryRuleIdOrSuper13238 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIdOrSuper13249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFeatureCallID_in_ruleIdOrSuper13296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_ruleIdOrSuper13320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXConstructorCall_in_entryRuleXConstructorCall13360 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXConstructorCall13370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_ruleXConstructorCall13416 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleQualifiedName_in_ruleXConstructorCall13439 = new BitSet(new long[]{0x0000000402400012L,0x0000000000000008L});
    public static final BitSet FOLLOW_34_in_ruleXConstructorCall13460 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleXConstructorCall13482 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_26_in_ruleXConstructorCall13495 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleXConstructorCall13516 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_31_in_ruleXConstructorCall13530 = new BitSet(new long[]{0x0000000002400012L,0x0000000000000008L});
    public static final BitSet FOLLOW_25_in_ruleXConstructorCall13566 = new BitSet(new long[]{0x10C000460B4081F0L,0x000000002FFE72ACL});
    public static final BitSet FOLLOW_ruleXShortClosure_in_ruleXConstructorCall13651 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXConstructorCall13679 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_26_in_ruleXConstructorCall13692 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXConstructorCall13713 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_27_in_ruleXConstructorCall13730 = new BitSet(new long[]{0x0000000000400012L,0x0000000000000008L});
    public static final BitSet FOLLOW_ruleXClosure_in_ruleXConstructorCall13765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXBooleanLiteral_in_entryRuleXBooleanLiteral13802 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXBooleanLiteral13812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_ruleXBooleanLiteral13859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_ruleXBooleanLiteral13883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXNullLiteral_in_entryRuleXNullLiteral13933 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXNullLiteral13943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_ruleXNullLiteral13989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXNumberLiteral_in_entryRuleXNumberLiteral14025 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXNumberLiteral14035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNumber_in_ruleXNumberLiteral14090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXStringLiteral_in_entryRuleXStringLiteral14126 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXStringLiteral14136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleXStringLiteral14187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXTypeLiteral_in_entryRuleXTypeLiteral14228 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXTypeLiteral14238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_ruleXTypeLiteral14284 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleXTypeLiteral14296 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleQualifiedName_in_ruleXTypeLiteral14319 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_ruleArrayBrackets_in_ruleXTypeLiteral14340 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_27_in_ruleXTypeLiteral14353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXThrowExpression_in_entryRuleXThrowExpression14389 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXThrowExpression14399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_ruleXThrowExpression14445 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXThrowExpression14466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXReturnExpression_in_entryRuleXReturnExpression14502 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXReturnExpression14512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_ruleXReturnExpression14558 = new BitSet(new long[]{0x10C00044034081F2L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXReturnExpression14793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXTryCatchFinallyExpression_in_entryRuleXTryCatchFinallyExpression14830 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXTryCatchFinallyExpression14840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_ruleXTryCatchFinallyExpression14886 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXTryCatchFinallyExpression14907 = new BitSet(new long[]{0x0000000000000000L,0x0000000050000000L});
    public static final BitSet FOLLOW_ruleXCatchClause_in_ruleXTryCatchFinallyExpression14937 = new BitSet(new long[]{0x0000000000000002L,0x0000000050000000L});
    public static final BitSet FOLLOW_92_in_ruleXTryCatchFinallyExpression14959 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXTryCatchFinallyExpression14981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_ruleXTryCatchFinallyExpression15003 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXTryCatchFinallyExpression15024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXSynchronizedExpression_in_entryRuleXSynchronizedExpression15062 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXSynchronizedExpression15072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_ruleXSynchronizedExpression15136 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleXSynchronizedExpression15148 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXSynchronizedExpression15171 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleXSynchronizedExpression15183 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXSynchronizedExpression15204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXCatchClause_in_entryRuleXCatchClause15240 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXCatchClause15250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_ruleXCatchClause15295 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_ruleXCatchClause15308 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleFullJvmFormalParameter_in_ruleXCatchClause15329 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleXCatchClause15341 = new BitSet(new long[]{0x10C00044034081F0L,0x000000002FFE728CL});
    public static final BitSet FOLLOW_ruleXExpression_in_ruleXCatchClause15362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleQualifiedName_in_entryRuleQualifiedName15399 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleQualifiedName15410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleQualifiedName15457 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_21_in_ruleQualifiedName15485 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleQualifiedName15508 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_ruleNumber_in_entryRuleNumber15562 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNumber15573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_HEX_in_ruleNumber15617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleNumber15645 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_RULE_DECIMAL_in_ruleNumber15671 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_21_in_ruleNumber15691 = new BitSet(new long[]{0x0000000000000180L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleNumber15707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_DECIMAL_in_ruleNumber15733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_entryRuleJvmTypeReference15788 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmTypeReference15798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmParameterizedTypeReference_in_ruleJvmTypeReference15846 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_ruleArrayBrackets_in_ruleJvmTypeReference15882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_ruleXFunctionTypeRef_in_ruleJvmTypeReference15913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleArrayBrackets_in_entryRuleArrayBrackets15949 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleArrayBrackets15960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_ruleArrayBrackets15998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_ruleArrayBrackets16011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXFunctionTypeRef_in_entryRuleXFunctionTypeRef16051 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXFunctionTypeRef16061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_ruleXFunctionTypeRef16099 = new BitSet(new long[]{0x000000020A000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleXFunctionTypeRef16121 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_26_in_ruleXFunctionTypeRef16134 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleXFunctionTypeRef16155 = new BitSet(new long[]{0x000000000C000000L});
    public static final BitSet FOLLOW_27_in_ruleXFunctionTypeRef16171 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_ruleXFunctionTypeRef16185 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleXFunctionTypeRef16206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmParameterizedTypeReference_in_entryRuleJvmParameterizedTypeReference16242 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmParameterizedTypeReference16252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleQualifiedName_in_ruleJvmParameterizedTypeReference16300 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_ruleJvmParameterizedTypeReference16321 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleJvmParameterizedTypeReference16343 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_26_in_ruleJvmParameterizedTypeReference16356 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleJvmParameterizedTypeReference16377 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_31_in_ruleJvmParameterizedTypeReference16391 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_21_in_ruleJvmParameterizedTypeReference16427 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleJvmParameterizedTypeReference16452 = new BitSet(new long[]{0x0000000400200002L});
    public static final BitSet FOLLOW_34_in_ruleJvmParameterizedTypeReference16473 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleJvmParameterizedTypeReference16495 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_26_in_ruleJvmParameterizedTypeReference16508 = new BitSet(new long[]{0x0000000202000010L,0x0000000080000000L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_ruleJvmParameterizedTypeReference16529 = new BitSet(new long[]{0x0000000084000000L});
    public static final BitSet FOLLOW_31_in_ruleJvmParameterizedTypeReference16543 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_ruleJvmArgumentTypeReference_in_entryRuleJvmArgumentTypeReference16585 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmArgumentTypeReference16595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleJvmArgumentTypeReference16642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmWildcardTypeReference_in_ruleJvmArgumentTypeReference16669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmWildcardTypeReference_in_entryRuleJvmWildcardTypeReference16704 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmWildcardTypeReference16714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_ruleJvmWildcardTypeReference16760 = new BitSet(new long[]{0x0000004000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_ruleJvmUpperBound_in_ruleJvmWildcardTypeReference16783 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ruleJvmUpperBoundAnded_in_ruleJvmWildcardTypeReference16804 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ruleJvmLowerBound_in_ruleJvmWildcardTypeReference16834 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ruleJvmLowerBoundAnded_in_ruleJvmWildcardTypeReference16855 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ruleJvmUpperBound_in_entryRuleJvmUpperBound16895 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmUpperBound16905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_ruleJvmUpperBound16942 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleJvmUpperBound16963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmUpperBoundAnded_in_entryRuleJvmUpperBoundAnded16999 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmUpperBoundAnded17009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_ruleJvmUpperBoundAnded17046 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleJvmUpperBoundAnded17067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmLowerBound_in_entryRuleJvmLowerBound17103 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmLowerBound17113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_ruleJvmLowerBound17150 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleJvmLowerBound17171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmLowerBoundAnded_in_entryRuleJvmLowerBoundAnded17207 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmLowerBoundAnded17217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_ruleJvmLowerBoundAnded17254 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_ruleJvmLowerBoundAnded17275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmTypeParameter_in_entryRuleJvmTypeParameter17311 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJvmTypeParameter17321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleJvmTypeParameter17367 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_ruleJvmUpperBound_in_ruleJvmTypeParameter17389 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ruleJvmUpperBoundAnded_in_ruleJvmTypeParameter17410 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ruleQualifiedNameWithWildcard_in_entryRuleQualifiedNameWithWildcard17450 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleQualifiedNameWithWildcard17461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleQualifiedName_in_ruleQualifiedNameWithWildcard17508 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_21_in_ruleQualifiedNameWithWildcard17526 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_56_in_ruleQualifiedNameWithWildcard17539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleValidID_in_entryRuleValidID17580 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleValidID17591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleValidID17630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXImportSection_in_entryRuleXImportSection17674 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXImportSection17684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleXImportDeclaration_in_ruleXImportSection17729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_ruleXImportDeclaration_in_entryRuleXImportDeclaration17765 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleXImportDeclaration17775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_ruleXImportDeclaration17812 = new BitSet(new long[]{0x0000000000000010L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_ruleXImportDeclaration17832 = new BitSet(new long[]{0x0000000000000010L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_ruleXImportDeclaration17863 = new BitSet(new long[]{0x0000000000000010L,0x0000000000080000L});
    public static final BitSet FOLLOW_ruleQualifiedNameInStaticImport_in_ruleXImportDeclaration17900 = new BitSet(new long[]{0x0100000000000010L});
    public static final BitSet FOLLOW_56_in_ruleXImportDeclaration17919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleXImportDeclaration17959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_ruleQualifiedName_in_ruleXImportDeclaration17990 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_ruleQualifiedNameWithWildcard_in_ruleXImportDeclaration18017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_ruleXImportDeclaration18031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleQualifiedNameInStaticImport_in_entryRuleQualifiedNameInStaticImport18070 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleQualifiedNameInStaticImport18081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleValidID_in_ruleQualifiedNameInStaticImport18128 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_21_in_ruleQualifiedNameInStaticImport18146 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_67_in_synpred1_InternalAqua1806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_synpred2_InternalAqua3049 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_ruleLocalOutputPort_in_synpred2_InternalAqua3056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_synpred3_InternalAqua3294 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_synpred3_InternalAqua3299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_synpred4_InternalAqua3381 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_34_in_synpred4_InternalAqua3386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpMultiAssign_in_synpred5_InternalAqua4297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpOr_in_synpred6_InternalAqua4820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpAnd_in_synpred7_InternalAqua5079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpEquality_in_synpred8_InternalAqua5338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_synpred9_InternalAqua5652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpCompare_in_synpred10_InternalAqua5723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpOther_in_synpred11_InternalAqua6057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpAdd_in_synpred12_InternalAqua6228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpMulti_in_synpred13_InternalAqua6508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_synpred14_InternalAqua7102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOpPostfix_in_synpred15_InternalAqua7259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_synpred16_InternalAqua7514 = new BitSet(new long[]{0x0000004000000010L,0x00000000000E0000L});
    public static final BitSet FOLLOW_64_in_synpred16_InternalAqua7528 = new BitSet(new long[]{0x0000004000000010L,0x00000000000E0000L});
    public static final BitSet FOLLOW_ruleFeatureCallID_in_synpred16_InternalAqua7544 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ruleOpSingleAssign_in_synpred16_InternalAqua7550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_synpred17_InternalAqua7692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred17_InternalAqua7706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred17_InternalAqua7726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_synpred18_InternalAqua7953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred19_InternalAqua8005 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_26_in_synpred19_InternalAqua8012 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred19_InternalAqua8019 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_synpred19_InternalAqua8033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_synpred20_InternalAqua8153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_synpred21_InternalAqua8342 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_synpred21_InternalAqua8346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_synpred22_InternalAqua8468 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_synpred22_InternalAqua8472 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred22_InternalAqua8479 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_22_in_synpred22_InternalAqua8485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_synpred23_InternalAqua8807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred25_InternalAqua9557 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_26_in_synpred25_InternalAqua9564 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred25_InternalAqua9571 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_synpred25_InternalAqua9585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_synpred27_InternalAqua10368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_synpred28_InternalAqua10507 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred28_InternalAqua10514 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_22_in_synpred28_InternalAqua10520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred29_InternalAqua10622 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_22_in_synpred29_InternalAqua10628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmTypeReference_in_synpred31_InternalAqua12256 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ruleValidID_in_synpred31_InternalAqua12265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_synpred32_InternalAqua12803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred33_InternalAqua12855 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_26_in_synpred33_InternalAqua12862 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred33_InternalAqua12869 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_synpred33_InternalAqua12883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_synpred34_InternalAqua13003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_synpred35_InternalAqua13452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_synpred36_InternalAqua13548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred37_InternalAqua13600 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_26_in_synpred37_InternalAqua13607 = new BitSet(new long[]{0x0000000202000010L});
    public static final BitSet FOLLOW_ruleJvmFormalParameter_in_synpred37_InternalAqua13614 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_synpred37_InternalAqua13628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_synpred38_InternalAqua13748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred39_InternalAqua14568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_synpred40_InternalAqua14921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_synpred41_InternalAqua14951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_synpred44_InternalAqua15476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleArrayBrackets_in_synpred45_InternalAqua15861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_synpred46_InternalAqua16313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_synpred47_InternalAqua16408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_synpred48_InternalAqua16465 = new BitSet(new long[]{0x0000000000000002L});

}